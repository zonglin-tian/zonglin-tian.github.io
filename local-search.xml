<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>系统代理</title>
    <link href="/vpn/"/>
    <url>/vpn/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><ul><li>三种环境变量:<ul><li><code>all_proxy</code></li><li><code>http_proxy</code></li><li><code>https_proxy</code></li></ul></li><li>两种代理:<ul><li><code>http://IP:PORT</code></li><li><code>socks5[h]://IP:PORT</code></li></ul></li></ul><h1 id="终端使用代理"><a href="#终端使用代理" class="headerlink" title="终端使用代理"></a>终端使用代理</h1><ul><li>Windows<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:HTTPS_PROXY</span>=<span class="hljs-string">&quot;socks5://127.0.0.1:20170&quot;</span><br><span class="hljs-variable">$env:HTTP_PROXY</span>=<span class="hljs-string">&quot;socks5://127.0.0.1:20170&quot;</span><br><span class="hljs-variable">$env:ALL_PROXY</span>=<span class="hljs-string">&quot;socks5://127.0.0.1:20170&quot;</span><br></code></pre></td></tr></table></figure></li><li>Ubuntu<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:20171&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:20171&quot;</span><br><span class="hljs-built_in">export</span> all_proxy=<span class="hljs-string">&quot;http://127.0.0.1:20171&quot;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 常用库</title>
    <link href="/plib/"/>
    <url>/plib/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="imageio"><a href="#imageio" class="headerlink" title="imageio"></a><a href="https://pypi.org/project/imageio/">imageio</a></h1><p>用于易于读写各种图像数据 Python 库</p><ul><li>安装: <code>pip install imageio</code></li><li>导入: <code>import imageio.v3 as iio</code></li><li>读取 (uint8 array): <code>img = iio.imread(path_to_file)</code></li><li>保存: <code>iio.imwrite(path_to_save, img)</code></li></ul><h1 id="pyexr"><a href="#pyexr" class="headerlink" title="pyexr"></a><a href="https://pypi.org/project/pyexr/">pyexr</a></h1><p>一个简单的 Python EXR 输入-输出库, 简化 OpenEXR 的使用</p><ul><li>安装: <code>pip install pyexr</code></li><li>读取 <strong>(数值没有做任何处理)</strong>: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># with</span><br><span class="hljs-keyword">with</span> pyexr.<span class="hljs-built_in">open</span>(file.exr) <span class="hljs-keyword">as</span> file:<br>    img = file.get()  <span class="hljs-comment"># (H, W, 3) np.float32 array</span><br><br><span class="hljs-comment"># read</span><br>img = pyexr.read(file.exr)  <span class="hljs-comment"># (H, W, 3) np.float32 array</span><br></code></pre></td></tr></table></figure></li><li>保存: <code>pyexr.write(out.exr, color_array)</code></li></ul><h1 id="ArgumentParser"><a href="#ArgumentParser" class="headerlink" title="ArgumentParser"></a>ArgumentParser</h1><p><code>ArgumentParser</code> 是 Python 标准库 <code>argparse</code> 中的一个类, 用于解析命令行参数, 并自动生成帮助和使用信息: <code>from argparse import ArgumentParser</code></p><h2 id="add-argument-name-or-flags-kwargs"><a href="#add-argument-name-or-flags-kwargs" class="headerlink" title="add_argument(name_or_flags, **kwargs)"></a><code>add_argument(name_or_flags, **kwargs)</code></h2><p><strong>添加命令行参数</strong></p><ul><li><code>name_or_flags</code>: 参数名 (<code>filename</code>) 或选项标志 (<code>-f</code>, <code>--file</code>)<ul><li>定位参数 (<code>&quot;input&quot;</code>): 按顺序提供 (<code>file.txt</code>)</li><li>可选参数 (<code>&quot;--input&quot;</code>, <code>&quot;-i&quot;</code>): 通过标志指定 (<code>--input file.txt</code>)<ul><li>短选项 (<code>-</code>): 高频使用的简单参数</li><li>长选项 (<code>--</code>): 需要明确语义的复杂参数</li></ul></li></ul></li><li>关键字参数 (<code>kwargs</code>)<ul><li><code>type</code>: 参数类型 (<code>int</code>, <code>str</code>)</li><li><code>help</code>: 帮助信息</li><li><code>default</code>: 默认值</li><li><code>action</code>: 特殊行为 (<code>store_true, append</code>)<ul><li><code>store_true</code>: 指定参数, 值为 <code>True</code>, 否则为 <code>False</code></li></ul></li><li><code>choices</code>: 限制参数范围</li><li><code>dest</code>: 解析后属性的名称 (默认取第一个长选项或短选项的名称去掉 <code>-</code>)</li><li><code>required</code>: 是否必填 (针对可选参数)</li></ul></li></ul><h2 id="parse-args"><a href="#parse-args" class="headerlink" title="parse_args()"></a><code>parse_args()</code></h2><p><strong>解析命令行参数 (从 <code>sys.argv</code> 读取), 返回命名空间对象 (<code>Namespace</code>)</strong></p><ul><li><code>parse_args(list(str))</code>: 从列表解析 (而非命令行), 列表格式必须模拟命令行, 可直接控制输入参数, 通常用于测试场景, </li><li><code>parse_known_args()</code>: 忽略未知参数, 解析已知参数, 返回 <code>(args, unknown_args)</code> 元组</li><li><code>Namespace</code> 对象 (<code>argparse</code> 模块中定义的一个类)<ul><li>将解析后的命令行参数存储为对象的动态属性, 通过 <code>args.attribute_name</code> 的方式访问</li><li>属性名与参数名一致, 自动转换短横线为<strong>下划线</strong>), 未指定且无默认值的参数, 属性值为 <code>None</code></li><li>类似于字典, 可通过 <code>vars(args)</code> 转换为字典 (或通过 <code>args.__dict__</code> 查看存储的字典形式)<ul><li><code>Namespace(**dict_name)</code>: 将字典解包为 <code>Namespace</code> 对象</li></ul></li><li><code>hasattr(args, pram_name)</code>: 检查参数是否存在</li><li><code>delattr(args, pram_name)</code>: 删除参数</li><li><code>setattr(args, param_name, value)</code> 或 <code>args.param_name = value</code>: 更新参数 <code>param_name</code> 的值为 <code>value</code></li></ul></li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li><code>add_argument_group(str)</code>: 在帮助信息中创建分组的参数显示 (逻辑分组, 不影响解析逻辑)</li><li><code>print_help()</code>: 打印帮助信息 (<code>-h</code>)</li></ul><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><ul><li><a href="https://pythonjishu.com/pandas-dataframe-to_excel/">Pandas 将数据写入 Excel</a></li><li>获取 <em>DataFrame</em> 的所有列名: <code>list(data_frame)</code> (sorted 返回有序)</li></ul><h1 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h1><ul><li><a href="https://blog.csdn.net/beautiful77moon/article/details/88877519#:~:text=%E5%9C%A8python%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20datetime%20%E6%9D%A5%E5%A4%84%E7%90%86%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%98%AF%E8%A6%81%E7%8E%B0%E5%AF%BC%E5%85%A5datetime%E5%BA%93%201%20%3E%3E%3E%20%20print%20(datetime.datetime.today()),(datetime.datetime.now())%204%202019%20-03-%2028%2020%3A%2034%3A%2011.377443">获取当前日期&#x2F;时间</a></li><li><a href="https://blog.csdn.net/Gabriel100yi/article/details/135251097#:~:text=%E8%A6%81%E8%AE%A1%E7%AE%97%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E6%98%AF%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20date%20%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E3%80%82%20%E5%85%B7%E4%BD%93%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B%EF%BC%9A%20%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E7%9A%84%E5%B9%B4%E4%BB%BD%EF%BC%9A%E4%BD%BF%E7%94%A8%20year%20%E5%B1%9E%E6%80%A7%E3%80%82%20%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E7%9A%84%E6%9C%88%E4%BB%BD%EF%BC%9A%E4%BD%BF%E7%94%A8,%E4%BD%BF%E7%94%A8%20date%20%E7%B1%BB%E7%9A%84%20timetuple()%20%E6%96%B9%E6%B3%95%E5%B0%86%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%97%B6%E9%97%B4%E5%85%83%E7%BB%84%E3%80%82%20%E4%BD%BF%E7%94%A8%E6%97%B6%E9%97%B4%E5%85%83%E7%BB%84%E4%B8%AD%E7%9A%84%20tm_yday%20%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9%E3%80%82">计算指定日期是一年中的第几天</a></li><li><a href="https://blog.csdn.net/weixin_40012554/article/details/108759160">计算日期差</a></li></ul><h1 id="shutil"><a href="#shutil" class="headerlink" title="shutil"></a>shutil</h1><ul><li><code>shutil.copytree(src, dst, dirs_exist_ok=False)</code>: 递归复制目录</li><li><code>shutil.copy2(src, dst)</code>: 复制文件 (保留元数据)</li><li><code>shutil.rmtree(dir_path)</code>: 递归删除<strong>目录</strong>及其内容 (删除非空目录)</li></ul><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><h2 id="os-path-–-路径操作"><a href="#os-path-–-路径操作" class="headerlink" title="os.path – 路径操作"></a>os.path – 路径操作</h2><ul><li><code>os.path.split(*path*)</code>: 将路径 <em>path</em> 拆分为一对, 即 <code>(head, tail)</code>, 其中 <em>tail</em> 是路径的最后一部分, 而 <em>head</em> 以除最后一部分外的所有内容, tail 部分不会包含斜杠, head 末尾的斜杠会被去掉<ul><li>如果 path 以斜杠结尾, 则 tail 为空</li><li><code>os.path.join(head, tail) == path</code></li><li><code>head == os.path.dirname(path)</code></li><li><code>tail == os.path.basename(path)</code></li></ul></li><li><code>os.path.dirname(path)</code>: 返回路径 path 的目录名称</li><li><code>os.path.basename(path)</code>: 返回路径 path 的基本名称</li><li><code>os.path.join(path, *paths)</code>: 智能地拼接一个或多个路径部分, 返回值是 <em>path</em> 和 <em>paths</em> 的所有成员的拼接, 其中每个非空部分后面都紧跟一个目录分隔符, 最后一个部分除外<ul><li>如果最后一个部分为空, 则结果将以分隔符结尾</li><li>如果某个部分为绝对路径, 则之前的所有部分会被 <strong>丢弃</strong>, 然后从绝对路径部分重新开始继续拼接</li></ul></li><li><code>os.path.splitex(path)</code>: 将路径名称拆分为 <code>(root, ext)</code> 对, 使得 <code>root + ext = path</code>, 并且扩展名为空或以句点打头并最多只包含一个句点</li><li><code>os.path.splitdrive(path)</code>: 将路径拆分为一对, 即 <code>(drive, tail)</code>, 使得 <code>drive + tial == path</code>, 其中 <em>drive</em> 是持载点或空字符串<ul><li>如果路径 path 包含盘符, 则 drive 将包含冒号之前的所有内容包括冒号本身</li></ul></li><li><code>os.path.exists(path)</code>: 如果 <em>path</em> 指向一个已存在的路径或已打开的文件描述符, 返回 <code>True</code></li><li><code>os.path.isdir(path)</code>: 判断 path 是否为目录</li><li><code>os.path.isfile(path)</code>: 判断 path 是否为文件</li></ul><h2 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h2><ul><li><code>os.getenv(name)</code>: 获取系统环境变量值</li><li><code>os.listdir(path)</code>: 返回路径下的所有文件与目录名 </li><li><code>os.remove(file_path)</code>: 删除<strong>文件</strong> (不能是目录)</li><li><code>os.rmdir(dir_path)</code>: 删除<strong>空</strong>目录<ul><li><code>os.rmdirs(dir_path)</code>: <strong>递归</strong>删除<strong>空</strong>目录</li></ul></li></ul><h1 id="tqdm"><a href="#tqdm" class="headerlink" title="tqdm"></a>tqdm</h1><p>Python 进度条: <code>from tqdm import tqdm</code></p><ul><li><code>desc</code>: 进度条描述</li><li><code>initial</code>: 进度条的起始值 (默认为 0) (不是偏移量, 只是显示值的起点)</li></ul><p><strong>参考:</strong></p><ul><li><a href="https://www.zhihu.com/question/420057177/answer/2268739686">python的tqdm可以调整进度条的颜色吗. 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/163613814">周兵. python进度条库tqdm详解. 知乎</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科研基础知识</title>
    <link href="/2025/08/11/Basic-Knowledge/"/>
    <url>/2025/08/11/Basic-Knowledge/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="三线性插值-Trilinear-Interpolation"><a href="#三线性插值-Trilinear-Interpolation" class="headerlink" title="三线性插值 (Trilinear Interpolation)"></a>三线性插值 (Trilinear Interpolation)</h1><p>用于三维空间数据插值, 通过对三个维度 $(x, y, z)$ 进行线性插值, 估算出目标点的值, 是双线性插值 (Bilinear Interpolation) 在三维空间的拓展</p><ul><li>核心思想: 在三维空间的 8 个邻近点 (立方体的顶点) 之间进行加权平均, 计算目标点的值</li><li>步骤: <ul><li>找到目标点所在的立方体单元 (8 个顶点)</li><li>在 $X$ 方向线性插值 4 次 (得到 4 个中间值)</li><li>在 $Y$ 方向线性插值 2 次 (得到 2 个中间值)</li><li>在 $Z$ 方向线性插值 1 次 (得到最终目标值)</li></ul></li><li>权重因子: $\alpha &#x3D; u - \lfloor u \rfloor$</li></ul>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 磁盘管理</title>
    <link href="/udisk/"/>
    <url>/udisk/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ul><li><code>fdisk -l</code>: 查看分区情况<ul><li><code>fdisk -l /dev/sda</code>: 查看磁盘 sda 的分区</li></ul></li><li><code>df -h</code>: 查看分区使用与挂载情况 (<code>lsblk</code>)</li></ul><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><p><code>fdisk</code> (format disk) 磁盘分区管理的命令行工具, 适用于 MBR (MS-DOS) 和 GPT 分区表, 可以创建, 删除, 调整分区, 并修改分区类型: <code>sudo fdisk [选项] &lt;磁盘设备&gt;</code></p><ul><li><code>-l</code>: 列出所有磁盘分区表 (不进入交互模式)</li><li><code>fdik &lt;磁盘设备&gt;</code>: 进入交互模式<ul><li>常用: <strong>n 创建分区 → 根据情况输入 (大多数时候按回车选默认值) → p 打印分区, 确认无误 → w 保存设置</strong></li><li><strong>m 展示帮助</strong></li><li>F 展示磁盘剩余未分区空间</li><li>n 增加一个新分区</li><li>d 删除分区</li><li>p 打印分区情况</li><li>t修改分区类型 (Linux&#x3D;83, swap&#x3D;82, NTFS&#x3D;7)</li><li>w 保存并退出</li><li>q 不保存退出</li></ul></li><li><code>partprobe</code>: 使修改生效</li></ul><h1 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><code>umount [挂载点或设备路径]</code>: 卸载已挂载的文件系统<ul><li><code>-f</code>: 强制卸载 </li><li><code>-v</code>: 显示详细操作信息</li></ul></li><li><code>mount [选项] [设备] [挂载点]</code>: 将存储设备挂载到文件系统的某个目录 (<strong>挂载点</strong>), 从而访问其中的数据<ul><li><code>设备</code>: 磁盘分区 (<code>/dev/sda1</code>), UUID, LABEL 或网络存储</li><li><code>挂载点</code>: 一个已经存在的目录</li><li><strong><code>findmnt</code>&#x2F;<code>mount</code>: 显示所有挂载点</strong></li><li><code>-t &lt;文件类型系统&gt;</code>: 指定文件系统类型</li><li><code>-o &lt;挂载选项&gt;</code>: 指定挂载选项</li><li><strong><code>-a</code>: 挂载 <code>/etc/fstab</code> 中所有未挂载的设备 (测试 <code>fstab</code> 配置是否正确)</strong></li><li><code>-v</code>: 显示详细挂载信息</li><li><code>-l</code>: 显示已挂载设备的 LABEL</li><li><code>-r</code>: 以只读模式挂载</li><li><code>-w</code>: 以读写模式挂载 (<strong>默认</strong>)</li></ul></li><li><code>sudo blkid</code>: 查看 UUID 和 LABEL (blok id)</li></ul><h2 id="etc-fstab-文件"><a href="#etc-fstab-文件" class="headerlink" title="&#x2F;etc&#x2F;fstab 文件"></a>&#x2F;etc&#x2F;fstab 文件</h2><p><code>/etc/fstab</code> (File System Table) 用于定义系统启动时自动挂载的文件系统和存储设备, 包含了系统需要挂载的所有分区, 网络共享和特殊文件系统的信息</p><p>文件由若干行组成, 每行定义一个挂载点, 字段之间使用单个制表符 (Tab) 分隔, <code>#</code> 表示注释, <strong>每行必须包含 6 个字段: <code>&lt;设备标识&gt; &lt;挂载点&gt; &lt;文件系统类型&gt; &lt;挂载选项&gt; &lt;dump 备份标志&gt; &lt;fsck 检查顺序&gt;</code></strong></p><ul><li>设备标识: 设备路径 (<code>/dev/sda1</code>), <code>UUID=</code> (<strong>更可靠</strong>), <code>LABEL=</code></li><li>挂载点: 文件系统用于挂载的目录路径 (<code>/</code>, <code>/home</code>, <code>/mnt/data</code>)</li><li>文件系统类型: <code>ext4</code> (Linux 常用), <code>xfs</code>, <code>btrfs</code>, <code>vfat</code> (FAT32), <code>ntfs</code> (Windows NTFS), <code>swap</code> (交换分区), <code>nfs</code> (网络文件系统), <code>tmpfs</code> (临时文件系统)</li><li>挂载选项: 多个选项用逗号分隔<ul><li><code>defaults</code>: (rw, suid, dev, exec, auto, nouser, async)</li><li><code>ro/rw</code>: 只读&#x2F;读写</li><li><code>noauto</code>: 启动时不自动挂载</li><li><code>user</code>: 允许普通用户挂载</li><li><strong><code>nofail</code>: 设备不存在时不报错</strong></li><li><code>exec/noexec</code>: 允许&#x2F;禁止执行二进制文件</li><li><code>suid/nosuid</code>: 允许&#x2F;禁止 SUID 和 SGID 位</li><li><code>_netdev</code>: 网络设备, 等待网络就绪后再挂载</li></ul></li><li>dump 备份标志: 0 (不备份), 1 (备份)</li><li>fsck 检查顺序: 0 (不检查), 1 (优先检查, <strong>根分区应为 1</strong>), 2 (次要检查)</li></ul><h1 id="home-重挂载或扩容"><a href="#home-重挂载或扩容" class="headerlink" title="home 重挂载或扩容"></a>home 重挂载或扩容</h1><p><strong>前提: 被扩容设备必须是 “起始” 分区</strong><br><strong>备份设备: 被扩容设备或者另外的设备</strong></p><ol><li>备份 <code>/home</code> 的数据到备份设备</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /media/home<br>sudo mount /back_up_device /media/home<br>sudo rsync -azXS --progress --partial /home/ /media/home/<br></code></pre></td></tr></table></figure><ol start="2"><li><code>/home</code> 重新挂载</li></ol><ul><li>卸载<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo umount /home<br><span class="hljs-comment"># 显示占用进程的 PID 和用户</span><br><span class="hljs-comment"># sudo fuser -vm /home</span><br><span class="hljs-comment"># 发送 SIGKILL 终止所有占用进程</span><br><span class="hljs-comment"># 强制解除占用</span><br>sudo umount -f /home<br></code></pre></td></tr></table></figure></li><li>挂载: 以防无法正常重启<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/fstab<br><span class="hljs-comment"># 将 /home 挂载到 /back_up_device</span><br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>删除原 <code>/home</code> 挂载分区 (<code>/dev/sda2</code>)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fdisk /dev/sda<br><span class="hljs-comment"># d → 2 → w</span><br></code></pre></td></tr></table></figure><ol start="4"><li>被扩容配备扩容 (<code>/dev/sda1</code>)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fdisk /dev/sda<br><span class="hljs-comment"># 通过 p 查看 sda1 的起始扇区并记住</span><br><span class="hljs-comment"># d → 1 → n → 1 → ... → w</span><br><span class="hljs-comment"># 务必保证起始扇区一致</span><br><span class="hljs-comment"># 检查文件系统</span><br>sudo e2fsck -f /dev/sda1<br><span class="hljs-comment"># 调整 ext4 文件系统大小</span><br>sudo resize2fs /dev/sda1<br></code></pre></td></tr></table></figure><ol start="5"><li>重新挂载 <code>/home</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/fstab<br><span class="hljs-comment"># 将 /home 挂载到 /dev/sda1</span><br>sudo mount -a<br><span class="hljs-comment"># 若有必要, 复制备份的 /home 数据</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式与通配符</title>
    <link href="/regex/"/>
    <url>/regex/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Shell-引号解析"><a href="#Shell-引号解析" class="headerlink" title="Shell 引号解析"></a>Shell 引号解析</h1><p><strong>理解:</strong></p><ul><li>单引号: 完全不管, 原样输出<ul><li><strong>固定</strong>正则表达式</li></ul></li><li>双引号: 稍微加工, 变量替换, 扩展 <code>$</code>, <code>`</code>, <strong><code>\</code> 转义字符 (<code>$`&quot;\</code>)</strong>, <code>$()</code> , 保护特殊字符 (<code>空格*?单引号</code>)<ul><li>含<strong>变量</strong>的正则表达式</li></ul></li><li>不加引号 (<strong>Shell 截胡</strong>): 过度加工, 替换变量, 拆分空格, 将特殊字符 (<code>*?</code>) 当成通配符匹配文件<ul><li><code>[[ &quot;string&quot; =~ regex  ]]</code> 右侧的 <code>regex</code> 不能加引号, 否则正则符号 (<code>.*</code>) 会变成普通字符</li><li>通配符, 重定向, 管道符</li></ul></li></ul><p><strong>口决:</strong></p><ul><li>有变量? 用双引号</li><li><strong>没变量? 用单引号</strong></li><li><code>[[ =~ ]]</code> 条件测试? 变量别加引号</li><li><strong>永远别完全不加引号</strong></li></ul><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><strong>正则表达式 (Regular Expressions)</strong> 用于<strong>文本内容匹配</strong> (如搜索, 替换字符串), 常见于 <code>grep</code>, <code>sed</code>, <code>awk</code>, <code>vim</code> 等命令</p><ul><li>普通字符: 字母, 数字, 符号匹配本身</li><li><strong>元字符</strong>: 具有特殊含义, 用于构造匹配规则</li></ul><h2 id="基础正则-BRE"><a href="#基础正则-BRE" class="headerlink" title="基础正则 (BRE)"></a>基础正则 (BRE)</h2><ul><li><code>\</code>: 转义符, 匹配特殊字符本身 (<code>&#123;</code>, <code>&#125;</code>, <code>+</code>)</li><li><code>.</code>: 任意单个字符 (除换行符)</li><li>字符集与字符范围<ul><li><code>[]</code>: 匹配括号内任意一个字符 (<code>[0-9]</code>, <code>[a-zA-Z]</code>)</li><li><code>[^]</code> (否定字符集): 匹配不在括号内的字符</li><li>当 <code>-</code> 出现在开头或结尾, <code>^</code> 出现在中间时, 为普通字符</li><li><code>\d</code>: 匹配数字 (<code>\d+</code> 连续数字)</li><li><code>\w</code>: 匹配单词字符 (字母, 数字, 下划线)</li></ul></li><li>边界符<ul><li><code>^</code>: 匹配字符串开始</li><li><code>$</code>: 匹配字符串结束</li></ul></li><li>量词 (重复符号): 用于指定前一个字符或分组重复出现的次数<ul><li><code>?</code>: 前一个字符 0 次或 1 次</li><li><code>*</code>: 前一个字符 0 次或多次 (不包括换行)<ul><li><strong><code>.*</code>: 匹配任意数量字符 (包括零个)</strong></li><li><code>^a.*z$</code>: 匹配以 a 开头, 以 z 结尾的任意字符串 (中间可以是任意字符)</li></ul></li><li><code>+</code>: 前一个字符 1 次或多次</li><li><code>&#123;n,m&#125;</code>: 前一个字符 n 到 m 次<ul><li><code>&#123;n&#125;</code>: 恰好 n 次</li><li><code>&#123;n,&#125;</code>: 至少 n 次</li></ul></li></ul></li><li><code>(pattern)</code>: 捕获分组</li><li><code>(a|b)</code>: 匹配 <code>a</code> 或 <code>b</code></li></ul><h2 id="扩展正则-ERE"><a href="#扩展正则-ERE" class="headerlink" title="扩展正则 (ERE)"></a>扩展正则 (ERE)</h2><ul><li>元字符无需转义, 易读</li></ul><h2 id="Perl-风格正则-PCRE"><a href="#Perl-风格正则-PCRE" class="headerlink" title="Perl 风格正则 (PCRE)"></a>Perl 风格正则 (PCRE)</h2><ul><li>由 Perl 语言发展而来, 功能最强大, 元字符无需转义</li><li>支持命令:<ul><li><code>grep -P</code></li></ul></li><li><code>\d</code>: 匹配数字</li><li><code>\D</code>: 非数字</li><li><code>\s</code>: 空白字符</li><li><code>\S</code>: 非空白字符</li><li><code>\w</code>: 单词字符 (字母, 数字, 下划线)</li><li><code>\W</code>: 非单词字符 (标点符号, 空格)</li><li><code>\b</code>: 匹配单词边界 (<code>grep -P &quot;\bcat\b&quot;</code> → <code>cat</code>)</li><li>逻辑: <code>|</code> (或)</li></ul><h2 id="支持命令"><a href="#支持命令" class="headerlink" title="支持命令"></a>支持命令</h2><ul><li><code>grep</code>: 文本搜索, 默认使用基础正则<ul><li><code>grep -E</code> 或 <code>egrep</code>: 启用扩展正则</li></ul></li><li><code>sed</code>: 流编辑器, 文本替换&#x2F;处理, 默认使用基础正则<ul><li><code>sed -E</code>: 启用扩展正则</li></ul></li><li><code>awk</code>: 文本处理&#x2F;字段提取, 默认使用<strong>扩展正则</strong></li><li><code>find</code>: 文件查找<ul><li><code>-regex</code>: 使用<strong>扩展正则</strong></li><li><code>-name</code>: 使用<strong>通配符</strong></li></ul></li><li><code>vim</code>: 文本编辑器<ul><li><code>\m</code>: 基础正则</li><li><code>\v</code>: 扩展正则</li></ul></li><li><code>less</code>: 分页查看, 默认使用基础正则</li></ul><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p><strong>通配符 (Wildcards)</strong> 主要用于快速匹配<em><strong>文件名</strong></em>或<em><strong>目录名</strong></em>的特殊字符</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>区分大小写</li><li><code>*</code> 不匹配以 <code>.</code> 开头的隐藏文件 (需显式指定 <code>.*</code>)</li><li>通配符<strong>不需要加单引号</strong>, 加单引号表示禁用通配符, 即为普通字符</li><li>特殊字符需通过 <code>\</code> 转义: <code>^</code>, <code>~</code></li></ul><h2 id="基础通配符"><a href="#基础通配符" class="headerlink" title="基础通配符"></a>基础通配符</h2><ul><li><code>*</code>: 任意数量 (包括零个) 的任意字符<ul><li><code>*.txt</code>: 所有 <code>.txt</code> 文件</li></ul></li><li><code>?</code>: 单个任意字符<ul><li><code>file?.log</code>: <code>file1.log</code>, <code>file2.log</code></li></ul></li><li><code>[]</code>: 括号内任意<strong>一个</strong>字符或范围<ul><li><code>[0-9]</code>, <code>[a-z]</code>, <code>[abc]</code></li><li>扩展: <code>[^/!]</code> (取反)</li></ul></li><li><code>&#123;&#125;</code>: <strong>生成组合</strong> (非匹配, 用于展开)<ul><li><code>&#123;start..end&#125;</code>, <code>&#123;a,b,c&#125;</code> <strong>(不含空格)</strong></li></ul></li></ul><h2 id="zsh-扩展通配符"><a href="#zsh-扩展通配符" class="headerlink" title="zsh 扩展通配符"></a>zsh 扩展通配符</h2><ul><li>检查当前与通配符相关的设置: <code>setopt | grep glob</code> (若输出 <code>extendedglob</code> 表示已启用)</li><li>手动启用: <code>setopt extendedglob</code> (永久启用需写入 <code>~/.zshrc</code> 中)</li><li><code>^</code>: 排除模式 (取反)</li><li><code>~</code>: 排除特定模式<ul><li><code>*.txt~backup*</code>: 匹配 <code>.txt</code> 文件但排除含 <code>backup</code> 的文件</li></ul></li><li><code>(x|y)</code>: 匹配 <code>x</code> 或 <code>y</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用文件格式</title>
    <link href="/format/"/>
    <url>/format/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p><code>JSON</code> (JavaScript Object Notation): 轻量级数据交换格式, 具有简洁, 易读的文本结构 (<code>.json</code>)</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ul><li>键值对: 数据以 <code>key: value</code>的形式存储, 键必须是<strong>双引号包裹的字符串</strong></li><li>值的数据类型<ul><li>字符串: <code>&quot;name&quot;: &quot;Temm&quot;</code></li><li>数字: <code>&quot;Age&quot;: 3</code></li><li>布尔值: <code>&quot;is_student&quot;: true</code></li><li>空值: <code>&quot;address&quot;: null</code></li><li>对象 (嵌套): <code>&quot;university&quot;: &#123;&quot;name&quot;: &quot;BNU&quot;&#125;</code></li><li>数组: <code>&quot;scores&quot;: [90, 85, 77]</code></li></ul></li></ul><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><ul><li>根元素必须是对象 <code>&#123;&#125;</code> 或数组 <code>[]</code></li><li>引号必须用双引号: 单引号或无引号无效</li><li>逗号分隔: 键值对之间用逗号分隔, 但<strong>末尾不能有逗号</strong></li><li>无注释: 不支持标准注释 <code>//</code>, <code>/**/</code> </li><li>在线校验: <a href="https://jsonlint.com/">JSONLint</a></li></ul><h2 id="衍生格式"><a href="#衍生格式" class="headerlink" title="衍生格式"></a>衍生格式</h2><h3 id="JSONC-JSON-with-Comments"><a href="#JSONC-JSON-with-Comments" class="headerlink" title="JSONC (JSON with Comments)"></a>JSONC (JSON with Comments)</h3><ul><li>扩展名: <code>.jsonc</code></li><li>特点:<ul><li>支持 <code>//</code> 单行注释和 <code>/**/</code> 多行注释</li><li>保留 JSON 的严格数据结构, 仅增加注释功能</li></ul></li></ul><h3 id="JSON5-更人性化的-JSON"><a href="#JSON5-更人性化的-JSON" class="headerlink" title="JSON5 (更人性化的 JSON)"></a>JSON5 (更人性化的 JSON)</h3><ul><li>扩展名: <code>.json5</code></li><li>特点:<ul><li>支持注释, 尾随逗号, 单引号字符串, 无引号键名, 十六进制数字等</li><li>目标是更易手写和维护</li><li><a href="https://json5.org/">官方库</a></li></ul></li></ul><h3 id="JSONL-JSON-Lines"><a href="#JSONL-JSON-Lines" class="headerlink" title="JSONL (JSON Lines)"></a>JSONL (JSON Lines)</h3><ul><li>扩展名: <code>.jsonl</code></li><li>特点: <ul><li>每行是一个独立的 JSON 对象, 适合流式处理或日志文件</li><li><strong>无需根数组或对象包裹</strong></li></ul></li></ul><h1 id="YAML-yml-yaml"><a href="#YAML-yml-yaml" class="headerlink" title="YAML (.yml&#x2F;.yaml)"></a>YAML (.yml&#x2F;.yaml)</h1><h1 id="INI-ini"><a href="#INI-ini" class="headerlink" title="INI (.ini)"></a>INI (.ini)</h1><h1 id="CSV-csv"><a href="#CSV-csv" class="headerlink" title="CSV (.csv)"></a>CSV (.csv)</h1>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debugging...</title>
    <link href="/debug/"/>
    <url>/debug/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="绪"><a href="#绪" class="headerlink" title="绪"></a>绪</h1><div class="note note-warning">            <p>Troubleshooting any problem without the error log is like driving with your eyes closed. (在没有错误日志的情况下诊断任何问题无异于闭眼开车)</p>          </div><h1 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h1><ul><li>解决办法:<ul><li>数据归一化</li><li>限制数据范围: <code>torch.clamp()</code></li><li>降低学习率或添加梯度裁剪 (<code>torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=specified_value)</code>)</li></ul></li><li>调试命令: <strong><code>torch.isnan()</code>, <code>torch.where()</code></strong><ul><li>自动检测反向传播过程中梯度是否存在 <code>NaN</code> 或 <code>inf</code>, 当检测到异常时会打印出该异常的原始前向传播操作并抛出 <em>RuntimeError</em><ul><li><strong>局部 (精细调试): <code>with torch.autograd.detect_anomaly(check_nan=True):</code></strong></li><li>全局: <code>torch.autograd.set_detect_anomaly(check_nan=True)</code></li></ul></li><li>检查是否含有 <code>NaN</code>: <code>torch.isnan(tensor).any()</code></li><li>统计 <code>NaN</code> 的数量: <code>torch.isnan(tensor).sum().item()</code></li><li>定位 <code>NaN</code> 的位置: <code>torch.where(torch.isnan(tensor))</code></li><li>替换 <code>NaN</code> 为特定值: <code>torch.nan_to_num(tensor, nan=specified_value)</code></li><li>过滤非 <code>NaN</code> 值: <code>valid_values = tensor[~torch.isnan(tensor)]</code></li><li>检查梯度中的 <code>NaN</code>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> model.named_parameters():<br>    <span class="hljs-keyword">if</span> param.grad <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> torch.isnan(param.grad).<span class="hljs-built_in">any</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;梯度 NaN 出现在参数: <span class="hljs-subst">&#123;name&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 用户管理</title>
    <link href="/uuser/"/>
    <url>/uuser/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="高频命令"><a href="#高频命令" class="headerlink" title="高频命令"></a>高频命令</h1><ul><li>创建用户: <code>adduser new_user_name</code></li><li>修改用户密码: <code>passwd user_name</code></li><li>删除用户并移除其工作目录: <code>deluser --remove-home user_name</code></li><li>切换用户并加载其环境变量: <code>su - user_name</code></li><li>查看用户所属组: <code>id user_name</code> or <code>groups user_name</code></li><li>编辑 <code>sudo</code> 文件: <code>sudo visudo</code></li><li>将用户添加到 <code>sudo</code> 组: <code>usermod -aG sudo user_name</code></li></ul><h1 id="查看登陆信息"><a href="#查看登陆信息" class="headerlink" title="查看登陆信息"></a>查看登陆信息</h1><ul><li>查看登陆用户 (详细程度 ↑): <code>whoami</code> (当前用户) → <code>users</code> (用户名列表) → <code>who</code> (登陆时间 &amp; 来源 IP) → <strong><code>w</code></strong> (空闲时间 &amp; 当前进程) → <code>last</code> (登陆历史)  </li><li>查看用户信息 (id 与组): <code>id user_name</code></li><li>查看所有用户: <code>grep -P &quot;bash|zsh&quot; /etc/passwd [| cut -d: -f1]</code></li></ul><h1 id="切换用户-su"><a href="#切换用户-su" class="headerlink" title="切换用户 (su)"></a>切换用户 (su)</h1><p><code>su [options] [-] user_name [parameters]</code></p><ul><li><code>-</code> 或 <code>-l</code>: 加载相应的环境变量 (<strong>推荐</strong>), 后面不加用户名表示切换到 <em>root</em></li><li><code>-c cmd</code>: 以特定用户身份执行命令</li><li><code>-s SHELL</code>: 指定 <em>shell</em></li><li><code>-g group_name</code>: 指定主组</li><li><code>-p</code>: 不重置环境变量 (不推荐)</li></ul><p><strong>注:</strong> 优先使用 <code>sudo</code> 执行命令, 而不是切换到相应用户</p><h1 id="创建用户-adduser"><a href="#创建用户-adduser" class="headerlink" title="创建用户 (adduser)"></a>创建用户 (adduser)</h1><ul><li>创建: <code>adduser new_user_name</code></li><li>测试用户<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换到新用户, 确保帐户正常</span><br>su -u new_user_name<br><span class="hljs-comment"># 验证当前用户</span><br><span class="hljs-built_in">whoami</span><br><span class="hljs-comment"># 系统中是否存在</span><br><span class="hljs-built_in">id</span> new_user_name<br><span class="hljs-comment"># 退出新用户</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="修改用户-usermod"><a href="#修改用户-usermod" class="headerlink" title="修改用户 (usermod)"></a>修改用户 (usermod)</h1><ul><li>更改 shell: <code>usermod -s /bin/zsh user_name</code></li><li>sudo 权限<ul><li>添加到 sudo 组: <code>usermod -aG sudo user_name</code></li><li>从 sudo 组中删除: <code>deluser user_name sudo</code></li></ul></li></ul><h1 id="删除用户-deluser"><a href="#删除用户-deluser" class="headerlink" title="删除用户 (deluser)"></a>删除用户 (deluser)</h1><ul><li>查找用户的文件 (可在删除前后查看与验证)<ul><li>用户名: <code>find / -user user_name -ls</code></li><li>id: <code>find / -uid user_id -ls</code></li></ul></li><li>删除用户并移除其工作目录: <code>deluser --remove-home user_name</code><ul><li>仅删除用户: <code>deluser user_name</code></li></ul></li><li>查找文件系统中与任何用户都没有关联的文件: <code>find / -nouser -ls</code></li></ul><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><ul><li><code>/etc/passwd</code>, <code>/etc/shadow</code>, <code>etc/group</code>: 创建新用户时, 增加相应条目, 字段间用冒号分隔<ul><li><code>/etc/passwd</code>: 帐户信息, 用户登陆名:x(密码):用户ID:组ID:用户信息:用户目录:用户登陆 shell</li><li><code>/etc/group</code>: 组信息, 组名:x(密码):组ID:用户列表 <em>(默认情况下, 每个用户都被添加到自己的组中)</em></li></ul></li><li><code>/etc/adduser.conf</code>, <code>/etc/login.defs</code>: <code>adduser</code> 创建新用户时的默认选项</li><li><code>/etc/skel/</code>: 创建新用户时, 此<strong>文件夹</strong>下的所有文件将被复制到新用户家目录下, 通常包括登陆和应用程序启动脚本</li></ul><h1 id="sudo-权限管理"><a href="#sudo-权限管理" class="headerlink" title="sudo 权限管理"></a>sudo 权限管理</h1><h2 id="usermod-添加用户到-sudo-组"><a href="#usermod-添加用户到-sudo-组" class="headerlink" title="usermod 添加用户到 sudo 组"></a>usermod 添加用户到 sudo 组</h2><ul><li>操作: <code>usermod -aG sudo user_name</code></li><li>验证 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 是否添加成功</span><br><span class="hljs-built_in">groups</span> user_name<br><span class="hljs-comment"># 切换到用户</span><br>su - user_name<br><span class="hljs-comment"># 如果输入密码后能成功执行, 配置正确</span><br>sudo apt update<br></code></pre></td></tr></table></figure></li></ul><h2 id="编辑-etc-sudoers-文件"><a href="#编辑-etc-sudoers-文件" class="headerlink" title="编辑 &#x2F;etc&#x2F;sudoers 文件"></a>编辑 &#x2F;etc&#x2F;sudoers 文件</h2><div class="note note-warning">            <ul><li>永远不要直接编辑 <strong>&#x2F;etc&#x2F;sudoers</strong> 文件, 语法错误可能导致所有 sudo 访问被锁定</li><li>使用 <code>visudo</code> 命令编辑, 其会检查语法错误 (<code>visudo -c</code>)</li><li>尽量使用用户组而非单个用户</li><li>限制权限到最小必要范围</li><li>查看日志文件: <code>sudo tail -f /var/log/auth.log</code></li></ul>          </div><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p><code>用户/用户组 主机=(目标用户[:组]) [NOPASSWD:]命令</code></p><ul><li>用户: <code>user_name</code></li><li>用户组: <code>%group_name</code> (以 <code>%</code> 开头)</li><li>主机 (从何处登陆): 通常设置为 <code>ALL</code> 表示所有主机, 可以指定主机名</li><li>目标用户 (可以哪些用户身份运行命令): <code>(ALL)</code> 表示任何用户, <code>(root)</code> 表示 <em>root</em></li><li>组 (通常不需指定): 指定目标组, 可选, 默认使用目标用户的主组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># (ALL)</span><br>sudo -u user_name <span class="hljs-built_in">id</span>  <span class="hljs-comment"># 用户=user_name, 组=user_name 的主组</span><br><span class="hljs-comment"># (ALL:ALL)</span><br><span class="hljs-comment"># 以指定用户及组运行命令</span><br>sudo -u user_name -g docker <span class="hljs-built_in">id</span>  <span class="hljs-comment"># 用户=user_name, 组=docker</span><br></code></pre></td></tr></table></figure></li><li>NOPASSWD: 允许无密码执行</li><li>命令 (允许执行命令列表, 以<strong>逗号</strong>分隔): 可以是完整路径 <code>/usr/bin/apt</code>, 也可以是目录 <code>/usr/sbin/</code> (结尾含 <code>/</code>), <code>ALL</code> 表示所有命令, 命令前加 <code>!</code> 表示禁止执行该命令</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>特殊字符: 字段之间以<strong>空格</strong>或<strong>制表位</strong>分隔, 命令列表之间以<strong>逗号</strong>  (必须) 分隔, 其后<em>可选</em>加空格, 注释以 <code>#</code> 开头</li><li>别名: 定义用户别名 (<code>User_Alias</code>), 主机别名 (<code>Host_Alias</code>), 命令别名 (<code>Cmnd_Alias</code>) 等<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Sudoers">User_Alias ADMINS = user1, user2, %admin<br>Host_Alias SERVERS = server1, server2<br>Cmnd_Alias PKGMGMT = /usr/bin/apt, /usr/bin/dpkg<br></code></pre></td></tr></table></figure></li><li>全局默认选项: <code>Default</code> 开头<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Sudoers"># 重置环境变量<br>Defaults env_reset<br># 2小时内无需重复输入<br>Defaults timestamp_timeout=120<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 文本处理</title>
    <link href="/utext/"/>
    <url>/utext/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li><code>grep</code>, <code>sed</code>, <code>awk</code> Linux 文本处理三剑客, <code>grep</code> 搜索专家, <code>sed</code> 编辑快手, <code>awk</code> 数据处理大师</li></ul><h1 id="grep-文本处理瑞士军刀"><a href="#grep-文本处理瑞士军刀" class="headerlink" title="grep 文本处理瑞士军刀"></a>grep 文本处理瑞士军刀</h1><p><code>grep</code>, Global Regular Expression Print (全局正则表达式打印), 强大的文本搜索工具: 通过<strong>正则表达式</strong>或简单字符串快速搜索文件或输入流中的匹配内容, 并返回结果</p><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><ul><li><code>i</code>: 忽略大小写</li><li><code>v</code>: 反向匹配</li><li><code>n</code>: 显示匹配行的行号</li><li><code>c</code>: 统计匹配行的行数</li><li><code>o</code>: 仅输出匹配的部分</li><li><code>r</code>: 递归搜索目录</li></ul><h1 id="sed-Stream-Editor-流编辑器"><a href="#sed-Stream-Editor-流编辑器" class="headerlink" title="sed (Stream Editor) 流编辑器"></a>sed (Stream Editor) 流编辑器</h1><p>强大的<em>非交互式</em>流编辑器, 主要用于 (逐行) 文本<strong>替换, 删除, 插入和转换</strong>, 支持<em>正则表达式</em>, 尤其适合批量处理文件或管道数据</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>应用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># PATH 变量内容各路径独占一行并排序</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span> | sed <span class="hljs-string">&#x27;s/:/\n/g&#x27;</span> | <span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure></li><li>替换 (<code>s</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 全局替换</span><br>sed <span class="hljs-string">&#x27;s/old/new/g&#x27;</span> file.txt<br><span class="hljs-comment"># 替换第 2 个</span><br>sed <span class="hljs-string">&#x27;s/old/new/2&#x27;</span> file.txt<br></code></pre></td></tr></table></figure></li><li>删除 (<code>d</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除第 3 行</span><br>sed <span class="hljs-string">&#x27;3d&#x27;</span> file.txt<br><span class="hljs-comment"># 删除第 3-5 行, 最后一行用 $ 表示</span><br>sed <span class="hljs-string">&#x27;1,5d&#x27;</span> file.txt<br><span class="hljs-comment"># 删除匹配 &quot;pattern&quot; 的行</span><br>sed <span class="hljs-string">&#x27;/pattern/d&#x27;</span> file.txt<br></code></pre></td></tr></table></figure></li><li>插入&#x2F;追加 (<code>i/a</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在第 2 行前插入</span><br>sed <span class="hljs-string">&#x27;2i\插入内容&#x27;</span> file.txt<br><span class="hljs-comment"># 在最后一行后追加</span><br>sed <span class="hljs-string">&#x27;$a\追加内容&#x27;</span> file.txt<br></code></pre></td></tr></table></figure></li><li>打印行 (<code>p &amp; n</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只打印 1-3 行</span><br>sed -n <span class="hljs-string">&#x27;1,3p&#x27;</span> file.txt<br><span class="hljs-comment"># 打印包含 &quot;pattern&quot; 的行</span><br>sed -n <span class="hljs-string">&#x27;/pattern/p&#x27;</span> file.log<br></code></pre></td></tr></table></figure></li><li>行号操作 (<code>=</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在每行前显示行号</span><br>sed <span class="hljs-string">&#x27;=&#x27;</span> file.txt<br><span class="hljs-comment"># 打印匹配行的行号</span><br>sed -n <span class="hljs-string">&#x27;/pattern/=&#x27;</span> file.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p><code>sed [选项] &#39;脚本命令&#39; 文件名</code></p><ul><li><code>脚本命令</code>: 指定要执行的操作 (替换, 删除)</li><li><code>文件名</code>: 可省略 (从管道读取输入)</li></ul><h2 id="常用选项-1"><a href="#常用选项-1" class="headerlink" title="常用选项"></a>常用选项</h2><ul><li><code>n</code>: 禁止默认输出</li><li><code>-e &#39;command&#39;</code>: 指定多个命令</li><li><strong><code>-i</code>: 直接修改文件 (谨慎, 建议通过 <code>-i.bak</code> 进行备份)</strong></li><li><code>-r</code>: 启用扩展正则表达式</li></ul><h1 id="awk-“奥克”-Aho-Weinberger-Kernighan"><a href="#awk-“奥克”-Aho-Weinberger-Kernighan" class="headerlink" title="awk “奥克” (Aho-Weinberger-Kernighan)"></a>awk “奥克” (<em>A</em>ho-<em>W</em>einberger-<em>K</em>ernighan)</h1><p>Linux 系统中强大的文本处理和<strong>数据提取</strong>工具, 以逐行处理<strong>结构化文本</strong> (如日志, CSV) 著称, 支持<em>字段切割</em>, <em>模式匹配</em>, <em>数学运算</em>等复杂操作</p><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>提取指定列<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打印第 1 和第 3 列 (空格分隔)</span><br>awk <span class="hljs-string">&#x27;&#123;print $3, $3&#125;&#x27;</span> file.txt<br><span class="hljs-comment"># 以 `:` 分割, 打印用户名和家目录</span><br>awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1, $6&#125;&#x27;</span> /etc/passwd<br></code></pre></td></tr></table></figure></li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>字段自动切割: 默认按<strong>空格或制表符</strong>分割每行, $1, $2…表示第 1, 2 列</li><li>模式-动作模型: <code>模式 &#123;动作&#125;</code> 仅当行匹配模式时执行动作</li><li>内置变量: <code>NR</code> 当前行号, <code>NF</code> 当前行的字段数, <code>RS</code> 行分隔符, <code>FS</code> 输入字段分隔符, <code>OFS</code> 输出字段分隔符, <code>$0</code> 整行内容, <code>$1~$n</code> 第 1 列到第 n 列的内容, <code>FILENAME</code> 当前处理的文件名</li><li>数学计算: <code>+, -, /, *, %</code></li></ul><h2 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h2><p><code>awk &#39;模式 &#123;动作&#125;&#39; 文件名</code></p><ul><li>省略模式: 对所有行执行动作 (如 <code>awk &#39;&#123;print $1&#125;&#39; file</code>)</li><li>省略动作: 默认打印匹配行（如 <code>awk &#39;/error/&#39; file</code>)</li></ul><h2 id="基本选项"><a href="#基本选项" class="headerlink" title="基本选项"></a>基本选项</h2><ul><li><code>-v key=value</code>: 定义变量, 可用于内部使用</li><li><code>-F&#39;:&#39;</code>: 设置字段分隔符</li></ul><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="文本查看与处理"><a href="#文本查看与处理" class="headerlink" title="文本查看与处理"></a>文本查看与处理</h2><ul><li><code>cat</code>: 查看文件内容</li><li><code>less</code> &#x2F; <code>more</code>: 分页查看文件内容 (相关命令与 <code>VIM</code> 相似)<ul><li><strong><code>less</code></strong> 功能更齐全 (双向翻页, 行号), <code>more</code> 功能简单 (快速查看)</li><li><code>less +F log.txt</code> (比 <code>tail -f</code> 更灵活): 实时跟踪查看日志</li></ul></li><li><code>wc</code> (Word Count): <strong>统计行数 (<code>l</code>)</strong>, 单词数 (<code>w</code>), 字节数 (<code>-c</code>), 字符数 (<code>m</code>), 最长行长度 (<code>L</code>)<ul><li><code>grep -o &#39;word&#39; file.txt | wc -l</code>: 统计匹配词的出现次数</li></ul></li><li><code>head</code> &#x2F; <code>tail</code> 查看文件开头或者结尾的若干行 (默认 10 行)<ul><li><code>tail -n 5 log.txt</code>: 实时查看日志的最后 5 行</li></ul></li></ul><h2 id="文本过滤与搜索"><a href="#文本过滤与搜索" class="headerlink" title="文本过滤与搜索"></a>文本过滤与搜索</h2><ul><li><p><code>tr</code> (translate): 字符替换 (转换) 与删除, 通常与管道符 <code>|</code> 结合使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除所有数字</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello 123&quot;</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;0-9&#x27;</span><br><span class="hljs-comment"># 删除非数字字符</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Phone: 123-456-7890&quot;</span> | <span class="hljs-built_in">tr</span> -<span class="hljs-built_in">cd</span> <span class="hljs-string">&#x27;[:digit:]&#x27;</span><br><span class="hljs-comment"># 替换制表符为空格</span><br><span class="hljs-built_in">cat</span> file.txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;\t&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># 压缩连续空格为单个空格</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;too  many   spaces&quot;</span> | <span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure><ul><li><code>tr str1 str2</code>: 用 <code>str2</code>中的字符对应替换 <code>str1</code> 中的字符</li><li><code>tr -d str</code>: 删除 <code>str</code> 中的字符</li><li><code>tr -s str</code>: 压缩 <code>str</code> 中的重复字符</li><li><code>str</code> 的格式<ul><li><code>c</code>: 取补集</li><li><code>abc</code>: 枚举字符</li><li><code>a-z</code>&#x2F;<code>[0-9]</code>: 范围</li><li><code>\n</code>&#x2F;<code>\t</code>: 特殊字符</li><li>预定义字符类</li></ul></li><li>预定义字符类<ul><li><code>&#39;[:alnum:]&#39;</code>: 字母和数字</li><li><code>&#39;[:alpha:]&#39;</code>: 字母</li><li><code>&#39;[:digit:]&#39;</code>: 数字</li><li><code>&#39;[:lower:]&#39;</code>: 小写字母</li><li><code>&#39;[:upper:]&#39;</code>: 大写字母</li><li><code>&#39;[:space:]&#39;</code>: 空白字符</li><li><code>&#39;[:punct:]&#39;</code>: 标点符号</li></ul></li></ul></li><li><p><code>sort</code>: 对文本排序 (默认按字母)</p><ul><li><code>f</code>: 忽略大小写</li><li><code>r</code>: 降序</li><li><code>n</code>: 按数值排序</li><li>字段控制<ul><li><code>u</code>: 去除重复行</li><li><code>k</code>: 指定排序字段 (列数字) ← <code>-k3n</code></li><li><code>t</code>: 指定字段分隔符 (,&#x2F;:)</li></ul></li><li>输出控制<ul><li><code>o</code>: 将结果输出到指定文件</li><li><code>c</code>: 检查是否排序</li><li><code>m</code>: 合并已排序文件</li></ul></li></ul></li><li><p><code>uniq</code>: 检查和删除<strong>连续重复行</strong> (常与 <code>sort</code> 配合)</p><ul><li><code>c</code>: 显示重复的次数</li><li><code>d</code>: 只显示重复的行</li><li><code>D</code>: 显示所有重复的行</li><li><code>u</code>: 只显示不重复的行</li></ul></li></ul><h2 id="字符串处理与生成"><a href="#字符串处理与生成" class="headerlink" title="字符串处理与生成"></a>字符串处理与生成</h2><ul><li><code>xargs</code>: 将输入转换为命令行参数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除所有 .pth 文件</span><br>find . -name <span class="hljs-string">&#x27;*.txt&#x27;</span> | xargs <span class="hljs-built_in">rm</span><br></code></pre></td></tr></table></figure></li><li><code>cut</code>: 文本字段&#x2F;字符提取 (<code>awk</code> 的简化版)<ul><li><code>d</code>: 指定字段分隔符 (<code>-d:</code>)</li><li><code>f</code>: 选择指定字段 (<code>-f1,3</code>)</li><li><code>c</code>: 按字符位置提取 (<code>-c1-5</code>)</li></ul></li><li><code>printf</code>: 格式化输出 (比 <code>echo</code> 更灵活)</li></ul><h2 id="流处理与脚本工具"><a href="#流处理与脚本工具" class="headerlink" title="流处理与脚本工具"></a>流处理与脚本工具</h2><ul><li><code>tee</code>: 同时输出到屏幕和文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l | <span class="hljs-built_in">tee</span> output.txt<br></code></pre></td></tr></table></figure></li><li><code>nl</code>: 为文本添加行号</li></ul>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每天学习一个思维</title>
    <link href="/2025/03/14/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AA%E6%80%9D%E7%BB%B4/"/>
    <url>/2025/03/14/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AA%E6%80%9D%E7%BB%B4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://space.bilibili.com/3546587456342714">B 站 UP 主: 无限进化的Doria</a></li></ul><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><ul><li>写情绪日记: 自觉, 理解 (动机), 转化</li></ul><h1 id="靠自学快速学会任何东西-先做个垃圾出来"><a href="#靠自学快速学会任何东西-先做个垃圾出来" class="headerlink" title="靠自学快速学会任何东西: 先做个垃圾出来"></a>靠自学快速学会任何东西: 先做个垃圾出来</h1><ul><li>无论学习任何东西, 都直接跳过是什么和为什么的阶段, 而直接从如何做开始</li><li>不是要学会了再去做, 而是要先去做了才能真正学会. 再烂的开始, 都会有反馈. 只要有反馈, 就有办法改进. 只要能够改进, 就有变废为宝的机会</li><li>知识让人渊博, 经验让人深刻. 站在原地空想就全是问题, 迈步向前去做就全是答案</li></ul><h1 id="做成任何事-准时出摊"><a href="#做成任何事-准时出摊" class="headerlink" title="做成任何事: 准时出摊"></a>做成任何事: 准时出摊</h1><ul><li>阻碍一个人做事的所有内耗和焦虑, 可归结于想要的太多, 而得到的太少, 即<span class="emp-style yellow">浮躁. 浮躁让人什么事都想做, 做什么事又都想立刻看到效果</li><li>焦虑的的原因之一在于欲望大于能力, 所以对抗焦虑的解药之一, 就是<span class="emp-style">保持耐心, 准时出摊.</span> 耐心不是意志力, 不是要让人忍受无趣, 承受痛苦, 咬牙坚持, 耐心的本质是基于对客观规律的认知, 然后顺应规律做事</li><li>关键尾部事件: 概率分布在尾部, 非常罕见极端的事件. 现实中, 往往低概率事件是影响最终结果的主要因素</li><li>我们的焦虑几乎都来自我们太渴望付出就立刻获得回报, 我们总相信存在短期速成的方法和逃避困难的捷径. 因为缺乏对于客观规律的认知, 所以我们总是急于求成. 一旦结果不如预期, 就开始焦虑内耗, 然后在自我怀疑中彻底放弃. 然而, <span class="emp-style yellow">世界的真相是我们的人生并不是随着付出的努力线性增长, 而是由几个关键节点瞬间拉动.</span> 但在此之前, 需要默默积累相当长的时间, 甚至蛰伏好多年, 然后某天突然等到那个关键尾部事件的降临, 从此人生上升到一个新的台阶. 所以, 当下一次焦虑来袭的时候, 告诉自己: <span class="emp-style">“是的, 有的阶段就是注定无法跨越的, 我无法一蹴而就.”</span> </li><li><strong>这个世界就是一个充满了随机性的无限游戏, 我们能做的只有每天准时出摊, 保持行动, 剩下的就是耐心等待, 把结果交给上帝手里的骰子.</strong> 这个规律是事物必经的发展过程, 不以人的意志为转移. 戒掉焦虑, <span class="emp-style">放下对于结果的执念, 对于付出的计算, 在过程中打磨做事的技能, 平淡的心态以及良好的习惯, 直到那个关键尾部事件奇迹一般地发生在你生命中.</span> 在外人看来简直是幸运女神的眷顾, 而只有你清楚, 其实<strong>真正的幸运女神就是那个心无旁骛持续行动的自己</strong></li></ul><h1 id="瞬间战胜拖延-停止捏造不存在的问题"><a href="#瞬间战胜拖延-停止捏造不存在的问题" class="headerlink" title="瞬间战胜拖延: 停止捏造不存在的问题"></a>瞬间战胜拖延: 停止捏造不存在的问题</h1><ul><li><p>造成拖延的根本原因不是懒惰, 而是恐惧. 因为真正懒惰的人对于自己的不作为是完全心安理得的, 过程中没有丝毫的纠结和痛苦. 而真正的拖延症患者, 一定会在过程中饱受焦虑的煎熬, 明知道一件事拖着对自己不好, 再拖也不得不做, 但就是没办法一咬牙赶紧做起来. 理性产生的动力和情绪引发的阻力同时存在, 内心两股力量在冲撞对抗. 就像踩着刹车, 又想加油前进, 结果就是轮胎在原地疯狂空转, 车子没往前挪一毫米, 油却耗尽了. 所以, 拖延症危害最大的地方, 就是一个人明明看起来毫无动弹, 但是内在的情绪和心力已经被消耗殆尽, 决策系统近乎瘫痪, 凡事犹豫不决, 做事拖泥带水, 从而导致整个人行动力和自信心的彻底丧失. </p></li><li><p>为什么明明是不得不做的事, 行为启动起来却如此困难? 因为<span class="emp-style red">我们总是过度思考, 然后预设困难, 进而潜意识中产生恐惧. 这种恐惧会变成隐形的内阻力, 像一个拴在我们脚上的巨大石块, 将我们牢牢困在原地, 动弹不得.</span> 对于我们不喜欢且不擅长的事情, 我们恐惧: </p><ul><li>过程中的漫长无聊</li><li>遇到困难时的焦虑无助</li><li>付出了但是没有结果的失望透顶</li><li>全力以赴却被人全盘否定的自我怀疑</li></ul><p>  这些恐惧长期存在于我们的潜意识当中, 形成了一种惯性思维, 我们甚至都很难察觉到这些恐惧本身. 一旦理性想要开启对于一件事的行动, 那些存储在潜意识当中的恐惧立刻扑面而来, 将所有的动力瞬间瓦解. 然后为了缓解理性上的矛盾和焦虑, 就给自己编出一大堆合理化借口:</p><ul><li>今天太累了</li><li>今天心情不好</li><li>今天天气不好</li></ul><p>  然后留下一句: <span class="emp-style yellow">实在不行, 明天再做吧.</span> 然而明天, 恐惧会再次卷土重来, 你还是会再次止步不前. </p></li><li><p>要从根源上摆脱拖延症, 就一定要:</p><ul><li>停止捏造不存在的问题</li><li>停止给自己预设困难</li><li>停止在想象中推演过程</li><li>停止幻想完美主义的结果</li><li>停止问题沿未发生就提前焦虑</li></ul></li><li><p>然而想要摆脱已经形成的思维定式异常困难, 所以最直接最有效的办法就是<span class="emp-style">不给潜意识制造恐惧的机会, 不思考, 直接行动.</span> 具体方法可以给自己设定一个<span class="emp-style">五分钟原则: 如果做一个事的时间只需要 5 分钟甚至更少, 那就不要进行任何思考, 直接立刻去做.</span> 因为在这种情况下, 任何思考都只是在耗损能量和心力. 对于那些 5 分钟之内就能完成的事情, 过分思考根本毫无意义, 只需要此刻立即行动. 一旦你开始尝试秉持这个原则去生活, 你的生活会瞬间变得充满秩序感, 那些让你不舒服的小事都会逐渐消失:</p><ul><li>你的沙发上不会再有堆积如山的衣服</li><li>你的水池里也不会再有满是油污的锅碗瓢盆</li><li>你的地板上不会再有随处可见的头发和灰尘</li><li>你的垃圾桶也总是套着新的垃圾袋, 没有任何异味</li></ul><p>  最重要的是, 这些因为迅速行动而得到的<strong>正反馈</strong>, 会逐渐改变你的思维习惯. 这些良好的感受, 会成为激励你对任何事情立即展开行动的强大动力. 因此, 你就能重新找回对于自己行为的掌控力, 从而彻底摆脱潜意识中恐惧的操纵. <strong>一旦你形成决定了就立刻去做的思维定式, 你就会变得朝气蓬勃, 积极快乐, 这就是一个人生命力的体现.</strong></p></li><li><p>对于那些周期更长, 过程更复杂的事情, 你同样需要简化思维, 快速决策. </p><ol><li>第一步, 审慎对待真实存在的风险, 谨慎决定到底是做, 还是不做; </li><li>第二步, 面对任何一项任务, 尽快结束思考阶段, 尽量做到当机立断, 放弃对于<span class="emp-style red">最短路径和完美结果的执着</span>, 找到<span class="emp-style">最小可行性闭环</span>, 降低行动门槛, 先迈出第一步; </li><li>第三步, 在具体执行过程中, 依然遵循<strong>五分钟原则</strong>, 减少无谓思考, <span class="emp-style">凡事先立刻开始做五分钟</span>.</li></ol></li><li><p>只要你能够真正去实践五分钟原则, 你就能克服拖延的毛病, 凡事做到当机立断, 迅速行动, 从此执行力爆棚. 这个世界上最可怕的东西, 是只存在我们想像中的鬼, 因为我们人类最擅长的事情就是<span class="emp-style red">自己吓自己.</span> 所以, <span class="emp-style">停止过度思考, 停止捏造不存在的问题, 用肉体的行动去控制精神的内耗.</span> 每个人都是由自己的行动力塑造的, <strong>在这一生里, 我们的任务不是把自己塑造成自己想象中应该成为的理想, 而是找出我们天生是谁, 然后一步步成为他.</strong> 愿你永远勇往直前, 所向披靡.</p></li></ul><h1 id="内心强大到不可战胜-提高人生容错率"><a href="#内心强大到不可战胜-提高人生容错率" class="headerlink" title="内心强大到不可战胜: 提高人生容错率"></a>内心强大到不可战胜: 提高人生容错率</h1><ul><li>强者和弱者最大的区别不在于能力的高低, 而在于对不确定性的耐受力. 强者将不确定性视为机会, 弱者将不确定性视为风险. 所以, 面对不确定性时, 强者只相信事物的规律, 在风险中分析机会; 弱者总沉溺自己的情绪, 在机会中不控制风险.</li><li>一个人之所以会陷入焦虑和内耗的负面情绪, 往往并非因为现实中的失败, <strong>而是内心被不确定的结果所扰动</strong>. 任何人面对未知都会产生本能的恐惧, 这种对于不确定性的恐惧会转化为对确定性的盲目依赖. 为了逃避不确定性带来的恐惧和不安, 很多人就会变得极端地厌恶风险. 由此, 所有决策都会以稳定和低风险为首要标准, 以此来获得内心的安全感和掌控感. 然而, 任何一个能够在现实中拿到大结果的人, 都能够在高度不确定的环境中, 解决开放性命题. </li><li>如果你要想成为真正的强者和高手, 就必须<strong>不断提升自己对于不确定性的耐受力.</strong> 一个人能够承受多大的不确定性, 不是由个人意志决定的, 而是由他的<strong>人生容错率</strong>决定的. 强者并非出于天性能够无视概率和风险, 而是通过充分的能力和资源, 构建更高的人生容错率, 从而让他们有更强大的底气, 更充分的认知, 以及更冗余的时间和空间, 去对冲未知的风险和失败的概率</li><li>普通人如何提升自己的人生容错率?<ul><li><strong>正确归因, 找回掌控感.</strong> 如何定义问题, 决定了如何解决问题. <span class="emp-style">将问题向内归因于自己可以通过行动控制和影响的范畴, 是提高容错率的第一步.</span> 向内归因的意思不是自我怪罪, 绝对不要把问题上升到对于自我的全盘否定. <strong>正确的归因是将问题视为暂时的, 可解的, 可充分发挥主观能动性的, 从而拿回对于局面的掌控感.</strong> 当你感觉自己面对任何问题, 有足够的认知找到解决方案, 有足够控制力降低负面影响和实际损失, 你的心力就会增强, 决心就会变大, 你就能控制住对于不确定性的恐惧, 从情绪中解脱而投入行动</li><li><strong>积累冗余, 对冲概率和风险.</strong> 针对自己不可控的概率和风险, 就需要有足够的冗余来进行对冲. 现实中任何一次尝试都需要承担相应的成本, 所以积累冗余的目的, 就是<strong>要让自己永远都有再来一次的机会和底气</strong>. 全方位积累自己的资金, 能力, 人脉等等, 一切能够给自己人生兜底的资源, 从而让自己拥有不下牌桌的资格</li><li><strong>撬动杠杆, 从失败中获益.</strong> 失败仅仅是个人主观的感受. 客观上来讲, 没有失败, 只有反馈. 你把结果当作失败, 它就会让你一蹶不振. 你把结果当作机会, 它就能让你浴火重生. 传统教育让我们对扣分有根深蒂固的恐惧, 所以总试图不废一兵一卒就完美通关. 然而, <strong>人生的本质是一场概率游戏, 胜利和失败都是常态, 都只是撬动成长的杠杆. 我们要做不是每分必争, 而是用试错的经验, 撬动关键分的胜率. 用局部的失败, 换取整个系统的胜利, 而这就是反脆弱的精髓.</strong> 我们试图创造秩序, 结果往往是被混乱反噬. 我们总喜欢寻求稳定, 结果却往往被风险摧毁. <span class="emp-style">一个人变强的第一步, 就是接受命运的无常, 人生的波折, 生活的难测.</span> 挫折和失败躲不掉, 避不开, 绕不过. 然而, 任何杀不死你的, 终将使你变得更强大</li></ul></li><li>当你逐步为自己的人生, 创造出更高的容错率, 你就能够在波动, 随机, 混乱, 压力, 风险, 和不确定性下像荒原中的火苗一样, 星火燎原, 所向披靡</li></ul><h1 id="彻底戒掉成瘾行为-停止一边上瘾-一边厌恶"><a href="#彻底戒掉成瘾行为-停止一边上瘾-一边厌恶" class="headerlink" title="彻底戒掉成瘾行为: 停止一边上瘾, 一边厌恶"></a>彻底戒掉成瘾行为: 停止一边上瘾, 一边厌恶</h1><ul><li>毁掉一个人最快的方式, 就是<strong>一边上瘾, 一边厌恶.</strong> 对一些事情强迫性上瘾, 沉溺于刷短视频, 香烟酒精, 暴饮暴食, 看网络小说, 报复性熬夜等等. 明明在做这些事的过程中, 其实也并没有感到多快乐, 甚至明知道对自己有害, 但就是无法控制自己停下来. 就算好不容易停下来. 内心感受到的也不是放松和愉悦, 而只有更深层次的空虚痛苦与厌恶自责. 这些让我们一边上瘾, 又一边厌恶的行为背后, 其实隐藏着的是一种<span class="emp-stye red">心理痛苦.</span> 也就是说, 当一个人内心出现一些负面的情绪和感受, 比如孤独, 压力, 焦虑, 沮丧, 无聊, 抑郁等等, 就会试图通过一些能够在短时间内刺激多巴胺释放的行为, 来覆盖或者排遣掉这些情绪. 当一个人频繁出现负面情绪, 人性趋利避害的本能就会对这些行为产生依赖, 从而变为一个成瘾行为<ul><li>经常感到烦躁焦虑的人, 就容易对吸烟上瘾</li><li>经常感到孤独无聊的人, 就容易对社交平台上瘾</li><li>经常感到压力抑郁的人, 就容易到暴饮暴食上瘾</li></ul></li><li>然而这些行为本身只能暂时缓解负面情绪, 当行为停止, 快乐也会随之消失, 负面感受会再次席卷而来, 甚至变本加厉, 我们又不得不依赖更多的成瘾行为来防御, 从而进入无限的恶性循环. 所以成瘾行为真正的可怕之处, 也是对我们伤害最大的, 并不是这些行为本身带来的后果, 而是我们<spam class="emp-style red">内心反复经受负面情绪与自我厌恶的双重折磨.</span> 这些行为本身沦为一种近乎失控的<strong>精神自毁</strong>. </li><li>对于自己的成瘾行为, 我们真正要解决的问题, 不是如何戒掉和克制行为本身, 而是<span class="emp-style">学会给自己的内心止痛.</span> 否则, 就算靠意志力戒掉表面的成瘾行为, 只要负面情绪的根源没有排除, 或者内心的真实需求没有得到满足, 就一定会再次出现新的成瘾行为. 所以, <span class="emp-stye">当下一次自己再出现上瘾冲动时, 或是上瘾行为无法停下来时, 先闭上眼睛, 深呼吸三次, 然后反问自己:</span> <span class="emp-style yellow">如果现在停下来不去做这件事, 那又会怎么样吗?</span> 这一步是先给自己冲动的欲望一个减速带, 然后启动理性来解决真正的问题. 当渴望得到克制和平息之后, 然后去感受自己此刻真实的情绪和内在渴望. 再接着问自己, <span class="emp-style">为什么此刻我如此渴望多巴胺.</span> 这一步, 是寻找问题的根源, <strong>看到自己真正的情绪问题和内在需求.</strong> 只有直面症结所在, 才能对症下药<ul><li>如果上瘾行为是因为负面情绪, 可以选择更加积极的方式来替代成瘾行为. 可以根据自己的情况, 去<strong>建立一个属于自己的情绪缓冲带</strong>. 面对负面情绪, 正确的做法不是克制压制, 更不是用快感覆盖, 而是彻底地忽略, 让自己的注意力从负面情绪上转移. 一旦你不再主动关注和感受负面情绪, 它们就会像海浪一样逐渐退潮. 所以, 建立能给自己带来正面感受的爱好特别重要. 就算不喜欢运动健身, 也可以选择出门逛街, 打扫房间或者是撸撸宠物一类的事情. 总之, 让自己不再囿于负面情绪本身. 众多爱好: 走到户外, 尽可能接触大自然, 公园散步, 骑骑车, 吹吹风. 尽量离开容易导致自己出现成瘾行为的环境, 去没有天花板的地方找到治愈自己的力量</li><li>如果上瘾行为是因为空虚无聊, 只是想找一些事情来填补时间黑洞, 可以<strong>选择一些能够带来自我成长, 积极影响, 或者更加健康的休息方式.</strong> 取关社交平台上所有刺激多巴胺的碎片化内容, 只关注能够提升认知, 拓展视野的优质信息源以及能让自己感受到平静和愉悦的旅行类, 生活类内容. 让刷手机这件事能够给自己带来正面的影响, 而非无意义的浪费. 可以把睡前刷手机的行为换成睡前看几页书, 因为阅读能够让人拥有获得感和成就感, 比盲目刷手机更能补偿自己白天没有得到满足的情绪</li><li>如果上瘾行为的背后是因为自己需要被看见, 被理解, 被支持, 那就去<strong>找到一段能让自己感到安全和舒服的人际关系, 找一个信任并喜欢的人,</strong> 让对方陪伴你, 聊聊天, 吃吃饭. 高质量的人际关系同样能够让我们得到滋养, 人与人之间的情感流动, 爱与关心, 能够极大地填补我们内心孤独和无助, 让我们感觉到被稳稳地接住, 不再因为<em>精神空寂而自我下坠.</em>*</li></ul></li><li>总之, 无论是通过更加积极健康的爱好, 还是更加有益身心的消遣, 亦或是更加温情脉脉的人际关系, 都能帮助我们走出一边强迫上瘾, 一边自我厌恶的恶性循环. 戒除成瘾行为, 不需要整日清醒克制. 我们需要做的首先是<span class="emp-style">爱自己, 去清楚地看见自己的痛苦和创伤, 勇敢地去面对自己的情绪和需求, 然后帮它们找到更好的安放之处, 让内心止痛.</span></li><li>如果上面的内容都无法摆脱痛苦, 克制上瘾, 那么就请记住一句话: <span class="emp-style yellow">面对生活, 重要的不是治愈, 而是带着遗憾活下去, 并且勇敢地跟痛苦相处.</span></li></ul><h1 id="摆脱自卑拧巴感-尽快消除贫穷感"><a href="#摆脱自卑拧巴感-尽快消除贫穷感" class="headerlink" title="摆脱自卑拧巴感: 尽快消除贫穷感"></a>摆脱自卑拧巴感: 尽快消除贫穷感</h1><ul><li>所谓贫穷感, 一方面是指物质方面的匮乏感, 多花一点钱就会负罪内疚. 对于自己想拥有的东西和想做到的事情, 第一反应就是我不够有钱, 所以不可能得到, 也不可能做到. 另一方面是指<strong>精神上的不配得感</strong>, 认为自己很无能, 不值得, 从而自我设限. 遇到任何机会时, 首先想到的就是不确定性, 不可能性, 进而轻易放弃, 不敢主动争取. 这种物质和精神上的双重贫穷感, 会<span class="emp-style red">极大增强我们对于风险和困难的恐惧意识, 进而极大削弱个人的思考能力和行动能力, 失毁一个人解决问题的能力. </span></li><li>内心存在贫穷感的人, 通常会有三种典型自我设限的心智模式: <strong>没有希望, 无能为力, 没有价值.</strong>     - 没有希望: 认为自己无论怎么努力, 目标都不可能实现, 一旦遭受了一些挫折, 人就会立刻陷入习得性无助的颓丧状态. 凡事总会暗示自己: 我就是做不好, 我命中注定就是这么倒霉<ul><li><strong>无能为力</strong>: 虽然认为目标有可能实现, 但不相信自己有能力得到想要的结果. 抱持这种信念的人, 会自发地给自己设置门槛. 因为自己不够专业, 就放弃理想; 因为自己不够漂亮, 就放弃爱情; 因为自己不够有钱, 就不去做自己想做的事情. 这种无能为力背后的潜台词是, 别人有可能实现这个目标, 但是我不行, 我不够好, 我没有能力, 没有资源去达成目标</li><li><span class="emp-style red">没有价值</span>: 虽然相信目标有可能实现, 甚至相信自己有能力实现, 但却会认为自己不配得到它, 这种心智模式会导致自我认同感很低, 喜欢把自己的缺点无限放大. 明明自己有能力, 却不敢去尝试新事物, 不愿主动争取机会, 也不去拼尽全力追求最好的结果. 这种低价值感传达的信息是, 我什么都不是, 我这个有太多问题, <strong>我不配获得幸福的生活和美好的事物</strong></li></ul></li><li>没有希望, 无能为力, 没有价值这些限制性心智模式, 会在我们的内心架起一堵高墙, 让我们无意识地给自己的人生强加许多枷锁, 让人举步维艰, 画地为牢. 所以要想消除内心的贫穷感, 摆脱限制性信念, 就一定要去<strong>客观地认识自己, 了解自己, 你必须看见一个真实的自己, 认清自己的能力边界, 发掘自己的核心优势, 认可自己的过往经验, 从而找回自我高价值感.</strong></li><li>一个消除自我限制性思维, 最直接最高效的方法: <span class="emp-style yellow">转变自己的语言模式, 从此刻开始, 停止使用一切负面词汇.</span> 当你下次再说出诸如 “我不行”, “我没办法”, “我做不到” 的时候, 你必须有意识地去删除这些限制你思考的负面词语, 然后用正面词语代替. 比如,<ul><li>把 “我没钱”, 变成 “我需要想办法增加收入”</li><li>把 “我社恐”, 变成 “我可以去学习一些处理人际关系的技巧和交流沟通的方法”</li><li>把 “我做不到”, 变成 “我需要去了解更多关于实现这件事的信息, 并且提升完成这件事的对应能力”</li></ul></li><li>当你替换掉负面的限制性词汇, 原本死气沉沉的思维就会开始转动起来. 一旦思维开始流动, 一切就会充满可能性. 只有当你解除了头脑中的限制性信念, 消除了内心中的贫穷感, 你才能拥有让改变发生的力量. <span class="emp-style">如果你想做成一件事, 或成为什么人, 你必须要有非常强大的配得感</span>, 必须是自己一定可以拿下的, 必须是自己一定可以实现的. 相信非我莫属, 相信舍我其谁</li><li>请签下一份<span class="emp-style yellow">人生誓言:</span> <span class="emp-style">无论身处贫寒还是富贵, 健康或是疾病, 抑或其他任何境遇, 我都将永远坚定地站在自己这边, 认可自己, 爱护自己, 尊重自己, 全然接纳自己, 对自己保持永恒的忠诚与坚定, 直至生命的最后一刻</span> ← <strong>我愿意</strong></li></ul><h1 id="熬过任何至暗时刻-定力强者胜"><a href="#熬过任何至暗时刻-定力强者胜" class="headerlink" title="熬过任何至暗时刻: 定力强者胜"></a>熬过任何至暗时刻: 定力强者胜</h1><ul><li>生活的困顿源于对当下处境的陌生和对于未来的恐惧, 而希望来自对自我的理解, 以及对于未来的定力. <span class="emp-style">定力就是无论在何种境况下, 都不丧失对于未来的希望, 都不停止当下的行动.</span> 所谓希望, 不是空想, 不是奢望, 而是一个有意义且有清晰实现路径的目标, 可以拆解为一系列有策略的具体行动, 是能够在日复一日的行动中取得微小进展的事业, 是一个美好而具体的愿景</li><li>自我精神的牢笼是生活中最大的监狱, 命运会将我们关进生活的监狱, 我们像一头受了槌的牛, 问题叠着问题的日子变成了一个缓慢受槌的过程. 一旦磨灭了希望, 停止了抗争, 否定了可塑性, 放弃了寻找出路, 就是画地为牢, 给自己带上了镣铐, 精神中的高墙平地而起, 自己给自己判了终身监禁</li><li>无论身处何种逆境, 只要你清楚地知道你自己是谁, 你不再给自我设限, 你的精神疆域就会变得无限辽阔, 从此希望会让你坚持到底, 定力能带你逃出生天</li><li>表面上的至暗时刻, 其实也是自我最好的扎根期, 保持希望, 保持定力, 学会耐心等待, 等待时机到来, 等待形势变化. 在等待的日子里, 最重要的准备就是: <span class="emp-style yellow">夯实自己的底层基石.</span> 即便我们对于当下的处境有一万个抱怨的理由, 但只要我们能够安心于增加自我的内在价值, 不要过度在意外在世界的波动, 我们就拥有定力, 从而就拥有改变的能力和希望, 好好学习, 认真生活, 积极行动, 不断生成, 持续锻炼自己的身体, 心灵和头脑, 找到一个件能够帮自己积蓄力量的事情, 去花时间偷偷地挖那条越狱的通道, 直到它最终通往你向往的生活</li><li><strong>大劫大难之后, 人该失去锐气, 不该失去热度, 你镇定了但仍在燃烧, 你平稳了却更加浩荡</strong></li></ul><h1 id="解决情绪内耗-我永远有解决问题的能力"><a href="#解决情绪内耗-我永远有解决问题的能力" class="headerlink" title="解决情绪内耗: 我永远有解决问题的能力"></a>解决情绪内耗: 我永远有解决问题的能力</h1><ul><li><p>情绪稳定不是说像机器人一样没有任何情绪, 也不是凡事置身事外, 漠不关心. 情绪稳定的本质是具备快速分析和调整情绪的能力, 不会让任何情绪干扰到自己的行动甚至伤害到自己. 即能够快速跳过与情绪的对抗与纠缠, 直接进入分析问题与解决问题的状态. 跨越情绪的速度越快, 情绪就越稳定, 内核也就越强大</p></li><li><p>关于情绪稳定, 首先要意识到情绪没有好坏之分, 任何情绪都只是一个信号灯, 试图提醒我们自己正在经历什么以及需要面对什么</p></li><li><p>当感受到那些会影响自己状态, 妨碍自己做事, 自己不想要长时间维持的情绪时, 你需要<span class="emp-style">建立一个高维视角, 抽离情绪本身, 进入一个上帝视角, 反问自己: </span></p><ul><li>我为什么会产生这种情绪? </li><li>我的动机是什么? 我想通过这种情绪得到什么? </li><li>有没有更好的方式来获得?</li></ul></li><li><p>即处理任何情绪问题的方法可分三步, 自觉, 理解, 转换</p><ul><li><strong>自觉:</strong> 无论在当前 (下意识) 产生了怎样的情绪反应, 都要先迅速觉察到自己的情绪状态, 然后判断自己当前是什么情绪, 比如感到生气, 委屈, 失望, 伤心. 当能够清楚地看到自己的情绪, 理性的出现已经可以消解一大半情绪的痛苦了</li><li><strong>理解:</strong> 问一下自己我为什么会有这种情绪 (感到失望, 伤心)? 慢慢理解自己情绪背后的动机, 可能会发现<span class="emp-style yellow">自己的情绪跟动机之间往往都不存在必然的逻辑关系,</span> 开始能够从难受的情绪中解脱出来</li><li><strong>转化:</strong> 明确了自己情绪背后的动机, 发现当下的情绪可能都是没有用的, 寻找更好的方法</li></ul></li><li><p>通过建立高维视角, 分三步处理情绪问题, 就拥有了看见, 分析, 并且管理自己情绪的能力. 习惯这种思维方式, 就能做到真正的情绪稳定了. 否则, 情绪就像大脑随机打开的盲盒, 无法驾驭自己的情绪感受, 只能任由自己被情绪操控, 陷入内耗的痛苦. 所以, 解决情绪内耗, 不是和情绪本身对抗, 而是要<span class="emp-style yellow">刻意练习自己认知情绪和拆解情绪的能力</span></p></li><li><p>在还没有熟练掌握建立高维视角的思维习惯之前, 可以通过<span class="emp-style">手写情绪日记</span>的方式帮助自己梳理思路, 看见动机, 化解情绪, 按照自觉, 理解, 转换三个步骤, 去一个字一个字写下自己对于情绪的觉察. 只要愿意开始动笔, 那些在心中剪不断理还乱的思绪和情绪, 都会在写字的过程中越来越清晰和明确, 因为书写本身就具备强大的理性力量, 有助于我们<span class="emp-style red">直视自己的欲望, 恐惧与贪婪, 看清自己的软弱, 无能和嫉妒,</span> 从而逐渐<span class="emp-style">学会勇敢, 克制以及耐心, 会彻底与自己和他人和解, 包容世间一切, 任万事自然流动</span></p></li></ul><h1 id="顶级自律-平静如水的野心"><a href="#顶级自律-平静如水的野心" class="headerlink" title="顶级自律: 平静如水的野心"></a>顶级自律: 平静如水的野心</h1><p><a href="https://www.bilibili.com/video/BV1kcSZYwE8Q?spm_id_from=333.788.videopod.sections&vd_source=23460d5cc9c78243da443476ec5bde1c">当前进度</a></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Word 与排版</title>
    <link href="/2025/03/03/Word-%E4%B8%8E%E6%8E%92%E7%89%88/"/>
    <url>/2025/03/03/Word-%E4%B8%8E%E6%8E%92%E7%89%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Word-使用技巧"><a href="#Word-使用技巧" class="headerlink" title="Word 使用技巧"></a>Word 使用技巧</h1><h2 id="文字编辑"><a href="#文字编辑" class="headerlink" title="文字编辑"></a>文字编辑</h2><ul><li>文本大小写转换:<ul><li>快捷键: <code>Shift + F3</code> 来回切换 (全部大写, 全部小写, 首字母大写)</li><li>菜单项: <code>开始</code> 选项卡 → <code>字体</code> 分组 → <code>更改大小写</code> 按钮</li></ul></li></ul><h2 id="参考文献排版"><a href="#参考文献排版" class="headerlink" title="参考文献排版"></a>参考文献排版</h2><h3 id="多个交叉引用"><a href="#多个交叉引用" class="headerlink" title="多个交叉引用"></a>多个交叉引用</h3><ol><li>多篇不连续引用, 如 [1, 3, 5]: 先进行对应文献编号的交叉引用 → 在引用处选中编号, 右键 → 选择 <code>切换域代码</code> → 将 [1] 变为 <code>&#123;... \r \h \#&quot;[0&quot;&#125;</code>, [3] 变为 <code>&#123;... \r \h \#&quot;0&quot;&#125;</code>, 将 [5] 变为 <code>&#123;... \r \h \#&quot;0]&quot;&#125;</code>, 中间再添加逗号分隔即可 → 更新域</li></ol><ul><li><code>\#&quot;[0&quot;</code>: 表示保留左中括号</li><li><code>\#&quot;0&quot;</code>: 表示不要中括号</li><li><code>\#&quot;0]&quot;</code>: 表示保留右中括号</li></ul><ol start="2"><li>多篇连续引用, 如 [1-5]: 只进行第一篇和最后一篇文献编号的引用 → 对于第一个编号保留左中括号, 对于第二个编号保留右中括号 → 更新域</li><li>两个连续引用间使用<strong>逗号+空格</strong>分隔, 如 <code>[1, 2]</code>, 三个及以上的连续引用之间用短横线连接, 如 <code>[1-5]</code></li><li><code>F9</code>: 更新所有域代码 (先 <code>Ctrl + A</code> 选中内容)</li></ol><h2 id="查找与替换使用正则表达式"><a href="#查找与替换使用正则表达式" class="headerlink" title="查找与替换使用正则表达式"></a>查找与替换使用正则表达式</h2><p>开启<code>使用通配符</code>模式</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>任意数字: <code>[0-9]</code></li></ul><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><ul><li>换行符: <code>\p</code></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul><li>表达式查找: <code>()</code></li><li>占位: <code>\数字</code></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/142237132">嘟嘟. Word多参考文献连续交叉引用. 知乎</a><br>[2] <a href="https://zhuanlan.zhihu.com/p/399183452">CSer. word和正则表达式. 知乎</a></p><h1 id="Mathtype-公式录入"><a href="#Mathtype-公式录入" class="headerlink" title="Mathtype 公式录入"></a>Mathtype 公式录入</h1><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ul><li>显示空格或者制表符: 菜单栏[视图] → 全部显示[选中]</li></ul><h2 id="空格与对齐"><a href="#空格与对齐" class="headerlink" title="空格与对齐"></a>空格与对齐</h2><ul><li>空格: 0, 1, 2, 3, 4 宽度种空格, 对应快捷键为 <code>Ctrl + K</code> + <code>空格宽度</code></li><li>快速插入 0&#x2F;1 宽度空格: <code>Shift + Space</code>&#x2F;<code>Ctrl + Alt + Space</code></li><li>文本空格: 将模式切换成文本, 然后 <code>Space</code> 键即为普通意义的空格</li><li>制表符对齐: 如果未在标尺上点击位置, 按下 <code>Ctrl + Tab</code> 自动对齐到<strong>整数</strong>刻度位置</li><li>对齐符号: 在想对齐位置处按下 <code>Ctrl + ;</code> (或者通过菜单栏插入), 可实现多行公式在等号处对齐等效果; 对于没有插入对齐符号的行, 默认在公式<strong>最前端</strong>对齐</li></ul><p align="center"><img src="/img/posts/Word-与排版/space_align.png" style="height:250px" alt="空格示意图与插入菜单"/></p><h2 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://blog.csdn.net/zch19960629/article/details/88430098">Christopher Cheung. MathType中输入空格的方法. CSDN</a></p><h1 id="域代码"><a href="#域代码" class="headerlink" title="域代码"></a>域代码</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li>插入域符号: <code>Ctrl + F9</code> or [菜单]插入 → [文本]文档部件 → 域</li><li>更新域: <code>F9</code> (需要先选中内容)</li><li>显示&#x2F;隐藏域代码: <code>Shift + F9</code> (需要先选中内容或将光标放在内容之前[单个]), <code>Alt + F9</code> (显示所有域代码)</li></ul><h2 id="常用域代码"><a href="#常用域代码" class="headerlink" title="常用域代码"></a>常用域代码</h2><ul><li>编号项 (生成整数序列): <code>SEQ Equation</code> (Equation 是序列名)</li></ul><h1 id="自带公式编辑器使用技巧"><a href="#自带公式编辑器使用技巧" class="headerlink" title="自带公式编辑器使用技巧"></a>自带公式编辑器使用技巧</h1><h2 id="基本输入"><a href="#基本输入" class="headerlink" title="基本输入"></a>基本输入</h2><ul><li>输入方式可选择 LaTeX, 然后转制成公式 (专业)</li><li>公式后紧根空格可触发公式自动转换</li><li><code>()</code> 可用于界定结构子内容边界</li><li>选中内容, 点击<code>文本</code>可设置特殊字体格式</li></ul><h2 id="插入编号的公式"><a href="#插入编号的公式" class="headerlink" title="插入编号的公式"></a>插入编号的公式</h2><ul><li>✅ 自动转换: <code>Contents#()Enter</code> (不支持字体更改)</li><li>创建<code>公式</code>样式, 设定居中对齐与右对齐制表位</li><li>动态编号<ul><li>✅ 插入域代码 (<code>Ctrl + F9</code>) → <code>&#123; SEQ Equation \* MERGEFORMAT &#125;</code> </li><li>插入题注 + <strong>样式分隔符[同一段落实现不同样式]</strong> (<code>Ctrl + Alt + Enter</code>)</li></ul></li></ul><h2 id="公式编号交叉引用"><a href="#公式编号交叉引用" class="headerlink" title="公式编号交叉引用"></a>公式编号交叉引用</h2><ul><li>✅ 域代码编号: 选中编号建立书签 → 交叉引用对应的书签 (相当于 LaTeX 公式中的 <code>label</code>)</li><li>题注方式编号: 交叉引用对应的题注</li></ul><h2 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h2><p>[1] <a href="http://www.hanlindong.com/2021/word-equation/">董翰林. Word 公式编辑器的优雅使用方法</a></p><h1 id="插入-Unicode-编码字符"><a href="#插入-Unicode-编码字符" class="headerlink" title="插入 Unicode 编码字符"></a>插入 Unicode 编码字符</h1><ul><li>Unicode: 全球统一的字符编码标准, 为每个符号分配唯一的十六进制编号 (至多 4 位)</li><li><strong>输入 Unicode 编码之后, 按 <code>Alt + X</code> 直接转换为相应字符</strong> </li><li><strong>在特殊字符之后, 按 <code>Alt + X</code> 可得到相应的 Unicode 编码</strong></li><li><a href="https://symbl.cc/">Unicode 字符编码查询</a></li></ul><h2 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h2><ul><li>带圈数字: ①-⑩ → 2460-2469</li></ul><h2 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h2><ul><li>偏导数: ∂ → 2202</li></ul>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typesetting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>专业单词与术语</title>
    <link href="/2025/02/20/%E4%B8%93%E4%B8%9A%E5%8D%95%E8%AF%8D%E4%B8%8E%E6%9C%AF%E8%AF%AD/"/>
    <url>/2025/02/20/%E4%B8%93%E4%B8%9A%E5%8D%95%E8%AF%8D%E4%B8%8E%E6%9C%AF%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h1><h1 id="英文单词"><a href="#英文单词" class="headerlink" title="英文单词"></a>英文单词</h1><ul><li>steer: v. 驾驶; 操纵; <strong>控制; 引导</strong>; 行驶; 掌控方向盘</li></ul>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git-GitBash-GitHub</title>
    <link href="/2025/02/13/Git-GitBash-GitHub/"/>
    <url>/2025/02/13/Git-GitBash-GitHub/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>查看配置: <code>git config --list</code></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>clone 特定版本的仓库: <code>git clone --branch &lt;version&gt; repository_url</code></li><li>代理管理<ul><li>设置: <code>git config --global http.proxy 127.0.0.1:12345</code></li><li>取消: <code>git config –-global –unset http.proxy</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal</title>
    <link href="/2025/01/07/Windows-Terminal/"/>
    <url>/2025/01/07/Windows-Terminal/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="以应用为导向"><a href="#以应用为导向" class="headerlink" title="以应用为导向"></a>以应用为导向</h1><ul><li><p>查看命令的帮助信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">help cmd<br></code></pre></td></tr></table></figure></li><li><p>查看别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">CMD</span><br>doskey /macros<br><span class="hljs-meta prompt_"># </span><span class="language-bash">PowerShell</span><br>Get-Alias<br></code></pre></td></tr></table></figure></li><li><p>查看系统环境变量</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">CMD</span><br>set  # 显示所有环境变量<br>echo %var_name%  # 显示某个环境变量的值<br>set var_name=value  # 查置环境变量的值<br><span class="hljs-meta prompt_"># </span><span class="language-bash">PowerShell</span><br>Get-ChildItem/dir ENV:  # 显示所有环境变量<br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">env</span>:var_name  <span class="hljs-comment"># 显示某个环境变量的值</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">env</span>:Path -<span class="hljs-built_in">split</span> <span class="hljs-string">&#x27;:&#x27;</span>  <span class="hljs-comment"># 分行查看环境变量 Path 的值</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">env</span>:Path -<span class="hljs-built_in">split</span> <span class="hljs-string">&#x27;:&#x27;</span> | sls Python  <span class="hljs-comment"># 查找 Path 中包含 &#x27;Python&#x27; 的路径</span></span><br></code></pre></td></tr></table></figure><h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><ul><li>将命令输出到粘贴板: <code>cmd | clip</code></li></ul><h1 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h1><ul><li>配置文件位置: <code>echo $PROFILE</code></li><li>修改配置文件: <code>vim $PROFILE</code></li><li><strong>配置文件立即生效: <code>. $PROFILE</code></strong></li></ul><h1 id="ps1"><a href="#ps1" class="headerlink" title=".ps1"></a><code>.ps1</code></h1><p>- </p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 脚本</title>
    <link href="/2024/12/04/Shell-%E8%84%9A%E6%9C%AC/"/>
    <url>/2024/12/04/Shell-%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h1><ul><li>空格: 赋值语句 <code>=</code> 两边不能有空格, 测试语句 <code>[]</code>内必须有空格分隔</li><li>引号<ul><li><p>变量, 命令替换, 含空格&#x2F;特殊字符的字符串 (文件名) 必须加引号</p><ul><li>默认用双引号 <code>&quot;&quot;</code> (防止空格&#x2F;特殊字符问题): 变量扩展, 支持转义字符</li><li>不需要变量扩展时单引号 <code>&#39;</code> (正则表达式): <strong>静态字符</strong>, 完全原样输出</li></ul></li><li><p><code>test</code> 或 <code>[]</code> 条件判断中变量比较必须加引号</p></li></ul></li></ul><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><ul><li>变量引用: <code>value=&quot;$Var_name&quot;</code></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/452686607">Soler索莱尔HO. 一文掌握shell脚本的基本语法. 知乎</a><br>[2] <a href="https://blog.csdn.net/u012294618/article/details/78427864">Pikachu5808. 释伴：Linux 上的 Shebang 符号(#!). CSDN</a></p>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Docker</title>
    <link href="/docker/"/>
    <url>/docker/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="最常用命令"><a href="#最常用命令" class="headerlink" title="最常用命令"></a>最常用命令</h1><ul><li>列出已有镜像: <code>docker image ls</code></li><li>镜像打包: <code>docker save -o file_name.tar &quot;img_name:img_tag&quot;</code></li><li>根据镜像创建实例:  <code>docker run -it --gpus all --name instance_name img_name:img_tag /bin/bash</code></li><li>根据 Dockerfile 创建镜像: <code>docker build -t img_name:img_tag</code></li><li>列出正在运行的实例: <code>docker ps</code></li></ul><h1 id="Dockerfile-语句"><a href="#Dockerfile-语句" class="headerlink" title="Dockerfile 语句"></a>Dockerfile 语句</h1><ul><li>FROM: 基础镜像名与标签</li><li>ENV: 设置环境变量</li><li>ARG: 创建镜像时的参数</li><li>WORKDIR: 设置镜像当前目录</li><li>COPY: 从本地复制内容到镜像</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>启动&#x2F;停止&#x2F;重启 Docker 服务: <code>sudo systemctl stop docker</code></li><li>编辑配置文件: <ul><li>Ubuntu: <code>sudo vim /etc/docker/daemon.json</code></li><li>Windows: <code>%USERPROFILE%\.docker\daemon.json</code></li></ul></li></ul><h2 id="自定义默认子网-172-17-0-0-16"><a href="#自定义默认子网-172-17-0-0-16" class="headerlink" title="自定义默认子网 (172.17.0.0/16)"></a>自定义默认子网 (<code>172.17.0.0/16</code>)</h2><p>在配置文件中添加如下内容 (以 <code>10.0.0.0/24</code> 为例):</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;bip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10.0.0.1/24&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-address-pools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;base&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10.1.0.0/16&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">24</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>验证: <code>ip addr show docker0</code></li></ul><h1 id="wsl"><a href="#wsl" class="headerlink" title="wsl"></a>wsl</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>查看帮助: <strong><code>wsl --help</code></strong></li><li>版本管理:<ul><li><strong>查看状态: <code>wsl --status</code></strong></li><li>更新 wsl: <code>wsl --update</code></li><li>设置默认子系统: <code>wsl --set-default/-s sub_system_name</code></li><li>将子系统转换为 wsl2: <code>wsl --set-version sub_system_name 2</code> </li><li>设置 wsl2 为默认版本: <code>wsl --set-default-version 2</code></li></ul></li><li>查看子系统信息:<ul><li>已安装子系统: <strong><code>wsl -l -v</code></strong></li><li>官方发布子系统: <code>wsl -l -o</code></li><li><strong>运行子系统: <code>wsl -l -r</code></strong></li></ul></li><li>启动子系统:<ul><li>默认子系统: <code>wsl [~]</code></li><li><strong>特定: <code>wsl -d sub_system_name</code></strong></li></ul></li><li><strong>关闭子系统:</strong><ul><li>特定: <code>wsl -t sub_system_name</code></li><li>所有子系统与虚拟机: <code>wsl --shutdown</code></li><li>退出子系统: <code>exit</code></li></ul></li><li><strong>安装子系统: <code>wsl --install -d sub_system_name</code> (建议下载文件以自定义安装位置)</strong></li><li>卸载子系统: <code>wsl --unregister sub_system_name</code></li></ul><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/11217948712">直抒胸臆. 解决问题：WSL升级后无法运行：错误代码: wsl&#x2F;callmsi&#x2F;install&#x2F;error_install_failure. 知乎</a></li><li><a href="https://github.com/microsoft/WSL/issues/11697">WSL. Could not write value to key \SOFTWARE\Classes\Drive\shell\WSL #11697</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>终端 Python: IPython</title>
    <link href="/2024/10/25/Terminal-Python-IPython/"/>
    <url>/2024/10/25/Terminal-Python-IPython/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>IPython 提供了一个丰富的工具包, 可以最大限度以交互方式使用 Python, 主要由两部分组成:</p><ul><li>交互式 Python shell</li><li>一个 Jupyter 内核</li></ul><h1 id="历史输入与输出"><a href="#历史输入与输出" class="headerlink" title="历史输入与输出"></a>历史输入与输出</h1><ul><li>hist: 查看历史输入, <code>-n</code> 则额外显示输入序号</li><li>_: 查看最近的一个<em>输出</em>结果</li><li>_n: 查看指定序号 n 的输出结果</li><li>_i: 查看最近的一个输入</li><li>_iN: 查看指定序号的输入</li></ul><h1 id="内省-内视功能"><a href="#内省-内视功能" class="headerlink" title="内省 (内视功能)"></a>内省 (内视功能)</h1><ul><li>object? 或者 ?object: 显示对象的一些通用信息</li><li>object?? 或者 ??object: 显示对象详细信息, 对于类或者函数, 将会显示源码</li><li>numpy.*load*?: 显示所有包含 load 的 numpy 函数</li><li>numpy.*sort?: 显示所有以 sort 结尾的 numpy 函数</li></ul><h1 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h1><p>Magic command 是常规 Python 代码的增强版, 通常由 <code>IPython</code> 的内核提供, 以 <code>%</code> 字符为前缀, 一共有两种魔术命令: </p><ul><li>% 前缀: 命令在一行代码上运行</li><li>%% 前缀: 命令在整个单元格上运行</li></ul><p><strong>默认情况下, 魔术命令总是以 % 分号开头, 但这不是必须的, 也可以直接使用不带 % 的魔术命令, 这称之为 <code>自动魔术命令 (automagic)</code></strong>. 当使用自动魔术命令时, 不能出现和魔术命令同名的变量, 否则显示的是变量. <strong>可以使用 <code>%automagic</code> 来切换是否开启自动魔术命令</strong></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>quickref: 显示 ipython 的快速参考</li><li><strong>lsmagic: 列出所有魔术命令</strong></li><li><strong>mc? 或者 ?mc: 显示魔术命令的帮助信息</strong></li><li>magic: 列出所有魔术命令的详细信息</li><li><strong>run file.py: 运行脚本</strong></li><li><strong>pycat file.py: 显示脚本内容</strong></li><li>writefile file.py: 将内容写入脚本 (-a 表示追加)</li><li>paste: 运行粘贴板上的代码</li><li><strong>查看变量</strong><ul><li>who: 依次显示所有变量的名称</li><li>whols: 以列表的形式显示所有变量的名称</li><li>whos: 显示所有变量的详细信息</li></ul></li><li><strong>变量删除</strong><ul><li>xdel var_name 或者 del var_name: 删除变量 var_name</li><li>resest: 删除交互命名空间中所有变量</li></ul></li><li><strong>调试</strong><ul><li>debug: 运行代码出现问题后, 使用此命令将回溯到代码异常处, 并进入调试模式</li><li>pdb: 运行代码出现问题时, 将自动进入调试模式</li></ul></li></ul><h1 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h1><p>以 <code>!</code> 开头的命令可直接在 Python 环境中执行操作系统中 shell 命令</p><ul><li>!cmd: 打开 CMD</li><li>!pwd: 当前目录</li><li>!echo $HOME: 查看环境变量 $HOME</li><li>!python train.py: 运行 python 程序</li></ul><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ul><li>向前查找以当前输入的文本开头的历史命令: <code>Ctrl + P</code></li><li>向后查找以当前输入的文本开头的历史命令: <code>Ctrl + N</code></li><li>从剪贴板粘贴文本: <code>Ctrl + Shift + V</code></li><li>将光标移至行首: <code>Ctrl + A</code></li><li>将光标移至行尾: <code>Ctrl + E</code></li><li>删除从光标开始至行尾的文本: <code>Ctrl + K</code></li><li>删除光标以前的所有文本: <code>Ctrl + U</code></li><li>清屏: <code>Ctrl + L</code></li><li>移动一个字符: <code>Ctrl + B/F</code></li></ul><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="给系统-shell-命令定义一个别名作为魔术命令"><a href="#给系统-shell-命令定义一个别名作为魔术命令" class="headerlink" title="给系统 shell 命令定义一个别名作为魔术命令"></a>给系统 shell 命令定义一个别名作为魔术命令</h2><h2 id="给文件目录定义一个书签-快速访问"><a href="#给文件目录定义一个书签-快速访问" class="headerlink" title="给文件目录定义一个书签, 快速访问"></a>给文件目录定义一个书签, 快速访问</h2><h2 id="以-Vim-模式输入命令"><a href="#以-Vim-模式输入命令" class="headerlink" title="以 Vim 模式输入命令"></a>以 Vim 模式输入命令</h2><ul><li>临时配置: 在 IPython 内输入: <code>%config TerminalInteractiveShell.editing_mode = &#39;vi&#39;</code></li><li>查询当前输入模式: <code>%config TerminalInteractiveShell.editing_mode</code></li><li>永久配置: 编辑或者创建位于 <code>~/.ipython/profile_default/</code> 目录下的  <code>ipython_config.py</code> 文件, 添加下列行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c.TerminalInteractiveShell.editing_mode = <span class="hljs-string">&#x27;vi&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://blog.csdn.net/qq_27825451/article/details/84320859?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-84320859-blog-53086766.235%5Ev39%5Epc_relevant_yljh&spm=1001.2101.3001.4242.2&utm_relevant_index=2">LoveMIss-Y. 史上最详细、最完全的ipython使用教程，Python使用者必备！——ipython系列之一. CSDN</a><br>[2] <a href="https://ipython.readthedocs.io/en/stable/">IPython. Document</a><br>[3] <a href="https://marketsplash.com/tutorials/ipython/ipython-vim-mode/#:~:text=Setting%20Up%20IPython%20Vim%20Mode%201%20IPython%20Installation,...%205%20Checking%20Your%20Vim%20Mode%20Status%20">How To Use IPython Vim Mode Effectively</a></p>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完美淡然, 缺憾坦然</title>
    <link href="/mood/%E5%AE%8C%E7%BE%8E%E6%B7%A1%E7%84%B6-%E5%A4%B1%E6%84%8F%E5%9D%A6%E7%84%B6/"/>
    <url>/mood/%E5%AE%8C%E7%BE%8E%E6%B7%A1%E7%84%B6-%E5%A4%B1%E6%84%8F%E5%9D%A6%E7%84%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-align:center;font-weight:bold;font-size:18pt">我今天觉察到自己陷入悲伤</p><h1 id="以终为始"><a href="#以终为始" class="headerlink" title="以终为始"></a>以终为始</h1><ul><li>含泪经验: 对于长期使用的东西 (比如电车, 自行车), 尽可能在周边实体店买, <strong>售后大于一切</strong></li><li>当很努力地去做一件事后, 完美&#x2F;得之淡然, 缺憾坦然</li></ul><h1 id="事情经过"><a href="#事情经过" class="headerlink" title="事情经过"></a>事情经过</h1><p>国庆前几天网购了一台可骑行的自行车 (848 元), 骑行了几次, 总感觉有些小问题 (外观属实精美). 其中一个核心的问题是: 用力踩时链条会 “打滑”, 导致踩空, 重心失衡, 比较危险. 我在最开始的时候, 以为这个问题是 “跳链” 或者 “跳档” 所引起的. 店家在线给出一些解决方案, 我实操. 这个过程怎么说好呢, 感觉就像在抛骰子一般, 我一遍遍试, 能不能有效果全靠运气. 昨天晚上, 吃完晚饭我再次尝试店家给出的一个 “简单” 方法, 结果一试试一个晚上, 还没试出个所以然. 今早, 我将自行车骑到附近的两个实体店进行调试. 师傅给出的回答, 让我基本没有再继续调试的念头. <strong>“这个车子好多配件不合格, 修不好.”</strong> 现在想起, 我的车子肯定是存在问题的, 但其实应该没有师傅说的那么夸张 (可能更多的是, 我没在修车师傅那里买车, 他不想花心思给修…). </p><p>联想起博士刚入学的那一年, 我也是在网上买的电瓶车, 后面为了上牌照, 真可谓四处奔波: 大冬天的, 骑着车去离学校 10 公里左右的车管所上牌照. 结果因为一些参数不符合标准, 不能上牌照, 可谓雪上加霜… (不要问我现在的牌照哪里来的, 劳动人民的智慧使然) 尤其是后面了解到, 离学校三公里左右的地方就有卖电车的, 并且包办上牌照, 我现在都想像不了当时有多后悔. 结果, 我还是没记住这个教训, 再次跌倒在同一个地方: 网购自行车. 这样的坑我不想再踩了: <strong>不要轻易在网上购买可能需要长期售后的东西</strong>. </p><p>我觉得我这个人的一个特点是: 当一个事情发生了, 尽管我追悔莫及, 但我还是愿意努力去解决. 买电瓶车不方便上照牌, 我还是愿意大冷天去上牌照. 自行车出问题了, 我还是愿意花时间调试, 甚至到实体店找师傅帮忙. 简单来说, 可能就是能吃苦吧? 但当车管所的相关人员告诉我车辆不规范无法上牌照, 自行车修车师傅说车子参数不对无法修好时, 一股<strong>无力感</strong>袭来. 我是个完美主义, 为了做好一件事, 我愿意投入大量的时间和精力 (相对来说), 但当最后我发现这件事基本超出我的能力范围之外或者不以我的投入而改变时, 确实让我很受挫. 对此, 我希望自己以后仍然能有尽力做好一件事的心态, 但对于结果能有<strong>得之淡然, 缺憾坦然</strong>的心态. 抑或是: 尽人事, 听天命. 人生三件大事: </p><ul><li>求学 (理想的毕业院校与科研成果)</li><li>恋爱&#x2F;结婚 (理想的另一半)</li><li>工作 (理想的职位与薪资)</li></ul><h1 id="觉察"><a href="#觉察" class="headerlink" title="觉察"></a>觉察</h1><p>我今天主要感受到伤心与挫败感, 因为尽管自己很想修好自行车, 而且确实也花了时间精力, 但还是修不好. 再想到是车子质量的问题, 对于自己网购自行车这一行为产生了后悔与自责的情绪. </p><p>小天使: 这个事和你的<strong>人生主线</strong>关系不大, 大不了咱重新在实体店买一辆好了. 要说稍微值得记住的不过是前面的两点经验, 从三个月, 一年后再来看这件事, 没准会有意想不到的收获. 和自己和解, 努力向前走吧, 加油!</p>]]></content>
    
    
    
    <tags>
      
      <tag>Grocery</tag>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>心理辅导</title>
    <link href="/2024/10/14/%E5%BF%83%E7%90%86%E8%BE%85%E5%AF%BC/"/>
    <url>/2024/10/14/%E5%BF%83%E7%90%86%E8%BE%85%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="拖延应对"><a href="#拖延应对" class="headerlink" title="拖延应对"></a>拖延应对</h1><h2 id="拖延分析"><a href="#拖延分析" class="headerlink" title="拖延分析"></a>拖延分析</h2><ul><li>在什么领域或者情况下拖延 <ul><li>主要集中在科研或者一些自己不擅长的事上</li></ul></li><li>拖延时的情形<ul><li>不知道怎么做, 有较大畏难情绪, 转而去做其它事情, 偏离主线<ul><li>完善博客&#x2F;阅读&#x2F;跑步&#x2F;购物&#x2F;刷短视频&#x2F;看小说 (做相对容易的事)</li></ul></li><li>尽管理智上要求自己紧盯主线, 但投入与产出的不平衡, 使得无法形成良好的正反馈, 行动上仍然迟缓</li></ul></li><li>拖延持续多久了? 给你带来了什么好处?<ul><li>从博士入学到现在</li><li>让我不至于心理崩溃</li></ul></li><li>我的拖延小怪兽: 大眼睛 (当我不看或者面对他时, 会受到惩罚)</li></ul><div style="text-align: center">    <img src="/img/posts/心理辅导/big_eye.jpg" style="zoom:15%"/></div><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>当你拖延时, 内心的小怪兽是怎么和你说话的? 些时, 你如何反驳他?</p><ul><li>我内心不够安静, 无法静下心来做事, 等我内心安静下先 (状态未准备好)<ul><li>你为什么内心不够安静?</li><li>拖延或者做什么能让你内心安静下来吗?</li></ul></li><li>还没想好怎么做, 不清楚怎么做 (能力&#x2F;知识未准备好)<ul><li>是一点都不知道怎么做吗? 计划拆解了啊</li></ul></li><li>担心 (害怕) 结果不好, 不想开始<ul><li>一直不开始, 结果会变好吗?</li></ul></li><li>还有时间, 可以再等等<ul><li>真的还有时间吗? 这周的安排挺紧凑的</li></ul></li><li>反正来不及了, 做不好了, 不必要了</li></ul></li><li><p>详细方法</p><ul><li>实在拖延时, 仍尽量做和主线相关的事</li></ul></li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>事情的重要性, 难易程度以及我们的兴趣与我们是否拖延有一定相关性</li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUDA Toolkit of Conda and Local</title>
    <link href="/2024/10/10/CUDA-Toolkit-of-Conda-and-Local/"/>
    <url>/2024/10/10/CUDA-Toolkit-of-Conda-and-Local/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-warning">            <p><strong>Warning:</strong><br>本人对这一块的相关概念理解不深, 主要从解决实际问题的角度出发, 慎重参考</p>          </div><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>以 ubuntu 服务器为例, 下面三种情况可能涉及到 cuda 版本的问题</p><ol><li><code>nvidia-smi</code>: 显卡驱动</li><li><code>nvcc -V</code>: 从 <a href="https://developer.nvidia.com/cuda-toolkit-archive">NVIDIA CUDA 官网</a>安装的 CUDA Toolkit 的 cuda 驱动</li><li><code>conda install pytorch==2.3.1 torchvision==0.18.1 torchaudio==2.3.1 pytorch-cuda=12.1 -c pytorch -c nvidia</code>: conda 安装 PyTorch 时, 安装的 cuda 驱动</li></ol><p><strong>存在性与版本兼容性:</strong></p><ul><li>1 必须存在, 2 与 3 可同时存在也可只含其一</li><li>1 的版本号必须<strong>不小于</strong> 2 和 3 的版本号</li></ul><h1 id="CUDA-自定义安装"><a href="#CUDA-自定义安装" class="headerlink" title="CUDA 自定义安装"></a>CUDA 自定义安装</h1><ul><li><p>通过 <code>nvidia-smi</code> 查看当前显卡驱动版本 (若没有安装, 可在后续安装 CUDA Toolkit 时选中 <code>Driver</code> 进行安装)</p></li><li><p>到<a href="https://developer.nvidia.com/cuda-toolkit-archive">官网</a>下载对应版本的 CUDA Toolkit (向下兼容). 以 ubuntu 20.04 安装 12.4.0 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Linux → x86_64 → Ubuntu → 20.04 → runfile (local) → 查看下方的 Installation Instructions</span><br>wget https://developer.download.nvidia.com/compute/cuda/12.4.0/local_installers/cuda_12.4.0_550.54.14_linux.run<br><span class="hljs-comment"># 当想自定义安装位置在个人工作目录下时, 命令可不以 sudo 开头</span><br>sudo sh cuda_12.4.0_550.54.14_linux.run<br></code></pre></td></tr></table></figure></li><li><p><span class="emp-style red">安装关键之处</span></p><ol><li>通常不需勾选安装&#x2F;更新显卡驱动 (若要勾选, 前面的命令应以 <code>sudo</code> 开头)</li><li>对于深度学习, 一般只需勾选第二个 <code>CUDA Toolkit</code>, 后面的不需要  <div style="text-align: center;">  <img src="/img/posts/CUDA-Toolkit-of-Conda-and-Local/cuda_install.png" style="zoom:80%">  </div></li><li><strong>点击 <code>Options</code> → <code>Toolkit Options</code> 可自定义 CUDA 安装位置</strong> (最后的 <code>Library install path</code> 通常不需要管)</li><li>一切定义好之后, 点击 <code>Install</code></li><li>安装完成后会有相关提示, 可复制其中的<strong>路径</strong>, 方便后面定义环境变量</li></ol></li><li><p>定义相关环境变量, 写入 <code>.bashrc</code> 或者 <code>.zshrc</code> 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对于自定义 cuda 安装位置, 必不可少</span><br><span class="hljs-comment"># 以 cuda-12.4 为例, 语句中的路径需要替换为前面安装完成时的输出路径</span><br><span class="hljs-built_in">export</span> CUDA_HOME=/usr/local/cuda-12.4/<br><span class="hljs-built_in">export</span> PATH=/usr/local/cuda-12.4/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-12.4/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br></code></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nvcc 有定义或者路径正确</span><br><span class="hljs-built_in">which</span> nvcc  <span class="hljs-comment"># 输出的前缀应以安装的 cuda 的路径为前缀</span><br>nvcc -V  <span class="hljs-comment"># 输出应为安装的 cuda 版本</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="多版本-CUDA-切换"><a href="#多版本-CUDA-切换" class="headerlink" title="多版本 CUDA 切换"></a>多版本 CUDA 切换</h1><p><strong>确定顺序: <code>CUDA_HOME/CUDA_PATH</code> → <code>which/where nvcc</code> → <code>/usr/local/cuda | C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v*.*</code></strong></p><p>当 2 和 3 同时存在或者第 2 种情况下安装有多个版本的 CUDA Toolkit, 代码运行时, 需要根据实际情况指定默认的 cuda 版本. </p><p><strong>查看当前默认的 cuda:</strong> <code>which nvcc</code> 输出的向上两级目录</p><ul><li>例 1: 假设 2 和 3 同时并存, 默认使用 3 中的 cuda, <em><strong>如何指定 2 中的 cuda 为默认值是个问题?</strong></em><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看 PyTorch 编译时 cuda 的版本</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># torch.__version__</span><br><span class="hljs-comment"># torch.cuda.is_available()</span><br>torch.version.cuda<br><span class="hljs-comment"># 查看 PyTorch 运行时调用的 cuda 版本</span><br><span class="hljs-keyword">import</span> torch.utils.cpp_extension<br>torch.utils.cpp_extension.CUDA_HOME<br></code></pre></td></tr></table></figure></li><li>例 2: 假设 2 中同时存在多个版本 cuda, 指定特定版本号的 cuda 为默认值 (<em><strong>对基于 Tensorflow 的任务可能较常遇到</strong></em>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 假设安装的 cuda 都在 /usr/local/ 下, 有 cuda-12.1, cuda-12.4</span><br><span class="hljs-comment"># 在 .bashrc 或者 .zshrc 文件中定义或者修改和 cuda 相关的环境变量</span><br><br><span class="hljs-comment"># 定义 CUDA_VERSION 这个变量使得后续更改更优雅</span><br><span class="hljs-comment"># 完全可以不用定义, 之后的更改使用完全显示的路径即可</span><br><span class="hljs-built_in">export</span> CUDA_VERSION=12.4<br><span class="hljs-built_in">export</span> CUDA_HOME=/usr/local/cuda-<span class="hljs-variable">$CUDA_VERSION</span>/<br><span class="hljs-built_in">export</span> PATH=/usr/local/cuda-<span class="hljs-variable">$CUDA_VERSION</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-<span class="hljs-variable">$CUDA_VERSION</span>/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><span class="hljs-comment"># 当只是临时指定, 可直接在终端输入</span><br><span class="hljs-comment"># 保存退出</span><br><span class="hljs-built_in">source</span> .bashrc <span class="hljs-comment"># source .zshrc</span><br><span class="hljs-comment"># 验证是否设置正确</span><br><span class="hljs-built_in">which</span> nvcc  <span class="hljs-comment"># 输出结果应为 /usr/local/cuda-12.4/bin/nvcc</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h1><p>cuDNN 是针对深度神经网络中的基础操作而设计基于 GPU 的加速库, 前面 3 会自动安装相应的 cuDNN, 当只是 2 存在时, 需要额外安装 cuDNN 并对相关文件复制&#x2F;移动</p><div class="note note-warning">            <p><strong>个人理解:</strong></p><ol><li>基于 PyTorch 的深度学习任务, 按照<a href="https://pytorch.org/get-started/previous-versions/">官网</a>提供的命令进行安装即可, <strong>不需要</strong>额外安装 CUDA Toolkit 与 cuDNN</li><li>基于 Tensorflow 的深度学习任务需要根据要安装的 <a href="https://tensorflow.google.cn/install/source#linux"><strong>Tensorflow 版本</strong></a>来安装相应版本的 CUDA Toolki 与 cuDNN, 并通常涉及到<a href="/2024/10/10/CUDA-Toolkit-of-Conda-and-Local/#%E5%A4%9A%E7%89%88%E6%9C%AC-cuda-%E5%88%87%E6%8D%A2"><strong>多版本 CUDA 切换</strong></a></li></ol>          </div><p><span style="font-size:15pt;font-weight:bold;color:red">Steps:</span> </p><ul><li>安装显卡驱动与 CUDA Toolkit (假设都为 12.4)</li><li>到<a href="https://developer.nvidia.com/rdp/cudnn-archive">官网</a>下载对应的 cuDNN 版本 (比如 v8.9.7) → <code>Local Installer for Linux x86_64 (Tar)</code> → 上传到服务器</li><li>解压缩上面的 <code>.tar.xz</code> 文件并复制相关文件到对应的 CUDA 目录下. 以 <code>/usr/local/cuda-12.4/</code> 为例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压缩</span><br>tar -xvf cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar.xz<br><span class="hljs-built_in">cd</span> cudnn-linux-x86_64-8.9.7.29_cuda12-archive<br><span class="hljs-comment"># 复制文件</span><br>sudo <span class="hljs-built_in">cp</span> include/cudnn*.h /usr/local/cuda-12.4/include<br>sudo <span class="hljs-built_in">cp</span> lib/libcudnn* /usr/local/cuda-12.4/lib64<br><span class="hljs-comment"># 为所有用户添加读权限 (可选, 通常都具有读的权限)</span><br>sudo <span class="hljs-built_in">chmod</span> a+r /usr/local/cuda-12.4/include/cudnn*.h<br>sudo <span class="hljs-built_in">chmod</span> a+r /usr/local/cuda-12.4/lib64/libcudnn*<br><span class="hljs-comment"># 查看 cuDNN 信息</span><br><span class="hljs-built_in">cat</span> /usr/local/cuda-12.4/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br></code></pre></td></tr></table></figure></li></ul><p><span style="font-size:12pt;font-weight:bold;color:green">注:</span> Windows 安装 cuDNN, 下载相应的 <code>.zip</code> 文件 → 解压缩 → 复制 <code>bin, lib, include</code> 三个文件夹到 <code>CUDA 的安装目录</code></p><h1 id="Ubuntu-显卡驱动更新"><a href="#Ubuntu-显卡驱动更新" class="headerlink" title="Ubuntu 显卡驱动更新"></a>Ubuntu 显卡驱动更新</h1><ul><li><p>基本命令 (sudo 运行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br>apt install software-properties-common  <span class="hljs-comment"># 为了使用 add-apt-repository 命令</span><br>apt install ubuntu-drivers-common  <span class="hljs-comment"># 为了使用 ubuntu-drivers 命令</span><br><span class="hljs-comment"># 添加 NVIDIA PPA</span><br>add-apt-repository ppa:graphics-drivers/ppa<br>apt update<br><span class="hljs-comment"># 查找可用的 NVIDIA 驱动驱动程序</span><br>ubuntu-drivers devices  <span class="hljs-comment"># 或 apt search nvidia-driver</span><br>apt install nvidia-driver-&lt;version&gt;<br><span class="hljs-comment"># 重启计算机</span><br></code></pre></td></tr></table></figure></li><li><p>PyTorch 无法使用 (<code>CUDA unknown error</code>)</p><ul><li><a href="https://blog.csdn.net/qq_43428139/article/details/133498358">白帽子续命指南. RuntimeError: CUDA unknown error - this may be due to an incorrectly set up environme… .CSDN</a></li></ul></li></ul><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><ul><li>ubuntu 安装 Tensorflow<ul><li><a href="https://blog.csdn.net/m0_51302496/article/details/137185657">配置Tensorflow使用CUDA进行GPU加速(超详细教程)</a></li></ul></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://blog.csdn.net/bird11111/article/details/105746686">一颗牙牙. 下载各版本cuda，下载以前版本的cuda. CSDN</a><br>[2] <a href="https://www.cnblogs.com/yhjoker/p/10972795.html"><strong>yhjoker. Pytorch 使用不同版本的 cuda. 博客园</strong></a><br>[3] <a href="https://zhuanlan.zhihu.com/p/91334380"><strong>marsggbo. 显卡，显卡驱动,nvcc, cuda driver,cudatoolkit,cudnn到底是什么？知乎</strong></a><br>[4] <a href="https://blog.csdn.net/qq_42406643/article/details/109545766">tomorrow″. 理清GPU、CUDA、CUDA Toolkit、cuDNN关系以及下载安装. CSDN</a><br>[5] <a href="https://blog.csdn.net/weixin_37926734/article/details/123033286">嵌入式技术. Ubuntu20.04下CUDA、cuDNN的详细安装与配置过程（图文）.CSDN</a><br>[6] <a href="https://blog.csdn.net/AI_BING_/article/details/129316768?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bpytorch%E7%94%A8%E7%9A%84cuda%E7%89%88%E6%9C%AC&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-129316768.142%5Ev73%5Einsert_down3,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">我是好人BING. 如何正确查看pytorch运行时真正调用的cuda版本. CSDN</a></p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Typing</title>
    <link href="/typing/"/>
    <url>/typing/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="五笔理论"><a href="#五笔理论" class="headerlink" title="五笔理论"></a>五笔理论</h1><h2 id="字型"><a href="#字型" class="headerlink" title="字型"></a>字型</h2><ul><li>杂合型<ul><li>字根相连&#x2F;相交构成的字</li><li>一个基本字根和一个单笔划相连: 自, 千, 尺, 且, 本</li><li>一个基本字根之前或之后有孤立的点: 勺, 术, 太, 主, 斗</li></ul></li></ul><h2 id="末笔-字根"><a href="#末笔-字根" class="headerlink" title="末笔 (字根)"></a>末笔 (字根)</h2><ul><li>万方力九兆乃折 ← 七, 匕</li><li>包框走之看被围</li><li>戈戋我成戊末撇</li><li>单独点字以点作末笔 (I): 义, 太, 勺</li></ul><h2 id="易错字"><a href="#易错字" class="headerlink" title="易错字"></a>易错字</h2><ul><li>乘: tuxv</li></ul><h1 id="练习方法"><a href="#练习方法" class="headerlink" title="练习方法"></a>练习方法</h1><ol start="0"><li>电脑安装<strong>金山打字通</strong>软件</li><li>打开软件 → <code>新手入门</code> (打字常识和字母键位部分非常重要)</li><li><code>英文打字</code> → 直接进行 <code>文章练习</code> (<strong>最为重要</strong>)</li><li><code>拼音打字</code> → <code>词组练习</code> or <code>文章练习</code></li><li><em>五笔打字</em></li></ol><h1 id="练习记录"><a href="#练习记录" class="headerlink" title="练习记录"></a>练习记录</h1><h2 id="五笔单字"><a href="#五笔单字" class="headerlink" title="五笔单字"></a>五笔单字</h2><ul><li>2024-10-04 (一级简码综合 1)</li><li>2024-10-18 (常用字 1)</li></ul><h2 id="英文文章"><a href="#英文文章" class="headerlink" title="英文文章"></a>英文文章</h2><ul><li>2024-10-04 (The road to modern English)</li><li>2024-10-18 (Journey down…)</li><li>2024-11-15 (practice health…)</li></ul><h1 id="最佳速度"><a href="#最佳速度" class="headerlink" title="最佳速度"></a>最佳速度</h1><ul><li>英文文章: 215 字&#x2F;分 (2024-10-18)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>书法</title>
    <link href="/handwriting/"/>
    <url>/handwriting/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="偏旁部首"><a href="#偏旁部首" class="headerlink" title="偏旁部首"></a>偏旁部首</h1><p>两点水 三点水 单人旁 双人旁</p><h1 id="单字"><a href="#单字" class="headerlink" title="单字"></a>单字</h1><ul><li>B: 彼 冰</li><li>C: 次 池 冲 </li><li>F: 彷 冯</li><li>H: 海 汉 河</li><li>J: 仅</li><li>M: 们</li><li>N: 你</li><li>T: 他</li><li>X: 行</li><li>Z: 征</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 利器</title>
    <link href="/usoft/"/>
    <url>/usoft/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="TMUX"><a href="#TMUX" class="headerlink" title="TMUX"></a>TMUX</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Tmux 用于分离终端与会话, 终端窗口关闭后, 会话仍在后台运行 (即进程守护)</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="root-系统级安装"><a href="#root-系统级安装" class="headerlink" title="root 系统级安装"></a>root 系统级安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install tmux<br></code></pre></td></tr></table></figure><h3 id="普通用户源码安装"><a href="#普通用户源码安装" class="headerlink" title="*普通用户源码安装"></a>*普通用户源码安装</h3><ul><li>(源码) 安装依赖 (libevent)</li><li><strong>下载并编译</strong></li><li>添加环境变量</li><li>验证安装: <code>tmux -V</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查 tmux 的依赖</span><br>ldd $(<span class="hljs-built_in">which</span> tmux)<br></code></pre></td></tr></table></figure></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>永久生效：写入 <code>~/.tmux.conf</code> 中 → 保存 → 重新加载配置 <code>tmux source-file ~/.tmux.conf</code></li><li>临时生效: 按 <code>Ctrl + B</code> → 输入 <code>:set ...</code> → 回车</li><li>查看配置值: <code>tmux show-options -g [item_name]</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 滚动模式下使用 vi 风格</span><br><span class="hljs-built_in">set</span> -g mode-keys vi<br><span class="hljs-comment"># 自定义缓冲区大小</span><br><span class="hljs-built_in">set</span> -g history-limit 10000<br><span class="hljs-comment"># 启用鼠标支持</span><br><span class="hljs-comment">#- 点击切换面板</span><br><span class="hljs-comment">#- 拖动面板边框调整大小</span><br><span class="hljs-comment">#- 滚动查看历史输出</span><br><span class="hljs-comment">#- 点击底部状态栏窗口名称切换窗口</span><br><span class="hljs-built_in">set</span> -g mouse on<br><span class="hljs-comment"># 移除默认鼠标右键绑定</span><br>unbind -n MouseDown3Pane  <br><span class="hljs-comment"># 鼠标右键粘贴</span><br><span class="hljs-built_in">bind</span> -n MouseDown3Pane run-shell <span class="hljs-string">&quot;tmux paste-buffer&quot;</span><br></code></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li><strong>核心</strong>: session (会话) → window (窗口) → pane (面板)</li><li>前缀键 (prefix): <code>Ctrl + b</code></li><li>启动 (新建会话): <code>tmux</code> (左侧为窗口信息: 编号与名称, 右则为系统信息)</li><li>后台运行 (分离会话): <code>tmux deatach</code> 或 <code>prfix + d</code></li><li>查看会话: <code>tmux ls</code> 或 <code>tmux list-session</code></li><li>进入会话: <code>tmux a -t session_id</code></li><li>退出 (关闭) 会话: <code>exit</code> 或 <code>Ctrl + d</code> (会话外可使用 <code>tmux kill-session -t session_id</code>)</li><li>查看帮助: <code>prefix + ?</code> (按下 <code>ESC</code> 或 <code>q</code> 退出)</li><li>[系统] 粘贴: <code>[Shift +] 鼠标右键 (需要配置)</code></li></ul><h2 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h2><ul><li>创建新窗口: <code>prefix + c</code></li><li>显示窗口列表: <code>prefix + w</code></li><li>切换窗口:<ul><li>指定窗口: <code>prefix + num</code></li><li>上&#x2F;下一个: <code>prefix + p/n</code></li></ul></li><li>重命名窗口: <code>prefix +,</code> → 输入新名称</li></ul><h2 id="面板操作"><a href="#面板操作" class="headerlink" title="面板操作"></a>面板操作</h2><ul><li>分割当前面板:<ul><li><strong>垂直: <code>prefix + %</code></strong></li><li>水平: <code>prefix + &quot;</code></li></ul></li><li>切换面板:<ul><li>鼠标点击</li><li><code>prefix + 方向键</code></li><li>循环切换: <code>prefix + o</code></li></ul></li><li>关闭当前面板: <code>exit</code> &#x2F; <code>prefix + x</code></li></ul><h2 id="滚动模式"><a href="#滚动模式" class="headerlink" title="滚动模式"></a>滚动模式</h2><ul><li>进入: <code>prefix + [</code></li><li>vi 模式: 搜索 (<code>/?-nN</code>), 最初位置 (<code>g</code>), 最新输出 (<code>G</code>)</li><li>翻页<ul><li><code>PageUp</code>, <code>PageDown</code></li><li>vi 模式: <code>Ctrl + b/d</code>, <code>Ctrl + f/u</code></li></ul></li><li>复制<ul><li>按住 <code>Shift</code> 选中即复制</li><li>vi 模式: 按下 <code>Space</code> 开始选择, 移动光标扩大选区, 按下 <code>Enter</code> 复制选中内容</li></ul></li></ul><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><ul><li>进入: <code>prefix + :</code></li><li>面板同步操作: <code>setw sync on/off</code></li></ul><h1 id="Asciinema"><a href="#Asciinema" class="headerlink" title="Asciinema"></a>Asciinema</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>用于录制和分享终端会话, 可以将命令行操作录制为 ASCII 视频格式, 方便记录和分享终端操作过程</p><p><em>单词理解</em>: ASCII  + Cinema → Asciinema (ASCII 电影, 即以 ASCII 字符形式记录和展示的终端操作过程)</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install asciinema<br></code></pre></td></tr></table></figure><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开始录制 (rec) 终端的输入与输出 (exit 结束录制)</span><br>asciinema rec /path_to_file/file_name.cast<br><span class="hljs-comment"># 即时显示 (cat) 录制的所有内容</span><br>asciinema <span class="hljs-built_in">cat</span> /path_to_file/file_name.cast<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>[1] <a href="https://zhuanlan.zhihu.com/p/261744578">chengco. asciinema:终端操作录制神器. 知乎</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>既然心有所想, 那就尽力为之</title>
    <link href="/2024/09/23/%E6%97%A2%E7%84%B6%E5%BF%83%E6%9C%89%E6%89%80%E6%83%B3-%E9%82%A3%E5%B0%B1%E5%B0%BD%E5%8A%9B%E4%B8%BA%E4%B9%8B/"/>
    <url>/2024/09/23/%E6%97%A2%E7%84%B6%E5%BF%83%E6%9C%89%E6%89%80%E6%83%B3-%E9%82%A3%E5%B0%B1%E5%B0%BD%E5%8A%9B%E4%B8%BA%E4%B9%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-primary">            <p>记 2024-09-22 衡水湖全程马拉松有感</p>          </div><h1 id="从过去汲取经验"><a href="#从过去汲取经验" class="headerlink" title="从过去汲取经验"></a>从过去汲取经验</h1><p>2023 年天津马拉松我的净成绩为 04:09:52, 枪声成绩为 04:16:00. 比赛之前, 我自己测试的成绩在 4 小时多一点. 所以, 天津马拉松我定的目标大约在 345 左右, 打算届时跟着 345 的兔子 (官方配速员) 跑. 比赛时, 由于检录较晚, 我离所在分区的出发点较远 (从净成绩和枪声成绩的巨大差值就看出来了, 雪上加霜的是我在 C 区), 出发时我并未看到任何的兔子. 于是, 在一开始的时候我基本是在不断提速. 具体的细节现在记不太清楚了, 可能是在 10 公里左右我追上了 400 的兔子, 然后紧跟跑至 20公里处. 此时, 我感觉自己仍然有余力, 下定决心单飞追赶 345 的兔子. 大概在 25 公里的时候, 跑起来有些吃力, 保持配速变得困难. 这时, 我看到前方有两个人的配速和我当前的速度差不多. 于是, 我跟着这两个人坚持当前配速跑至 35 公里左右. 但之后, 我出现撞墙 (即跑崩), 无法再坚持当前配速, 只得放慢速度, 甚至步行. 我查看了当时的成绩证书, 跑完 35 公里用时 3:11:40, 而跑完 40 公里用时 3:52:59, 5 公里用时 41 分钟. 而之前的每 5 公里平均用时在 27 分钟左右, 可见掉速之严重. 这次全马的跑崩经历让我整个比赛体验感非常不好, 甚至有点<span class="emp-style red">后悔没有一直跟着 400 的兔子跑…</span></p><div style="text-align: center"><img src="/running/tj_full_mar/certificate.jpg" height='400px'></div><h1 id="赛前准备"><a href="#赛前准备" class="headerlink" title="赛前准备"></a>赛前准备</h1><p><span class="emp-style">24</span> 年开学之前我并不热衷提高自己的全马成绩, <span class="emp-style">仅仅把跑步当作强身健体的一种方式 (只要我还在跑步, 我希望自己都是这种初心)</span>, 寒假期间基本是尽可能坚持每两三天跑个 6-7 公里 (35 分钟). <span class="emp-style">开学后</span>, 我想把跑步列入自己每天的一项固定常规. 结合 23 年早起跑完步会影响早上的学习, 所以我将时间定在 17:30-18:15. 同时, 我开始在学校健身房的跑步机上跑步. 这样的好处是不管天气如何我都能坚持跑步, 状态最好的时候我周一到周五跑步 5 天, 周六来个 10-20 公里, 周天休息, 一个月能跑 25 天, 180 公里左右. 在这期间, 我觉得<span class="emp-style green">跑步完全融入了我的生活</span>. 直到有一天, 我的师妹问我有没有参加今年的北京半程马拉松 (因为她知道我经常跑步), 我说当我看到北京半程马拉松的相关推送时, 比赛都已经结束了… 这时, 我脑子里闪过两个念头:</p><ol><li><em>经常跑步的人, 不跑马拉松感觉不是 “真跑步人”</em></li><li>我对马拉松的相关赛事资讯了解太少 (23 年我只参加了一个天津马拉松和内蒙古草原半马, 大多数赛事的报名时间都在 9 月之前, 而我是在 9 月份开学后才想起要参加一两个马拉松, 自然错过了大多数赛事的报名)</li></ol><p>于是, 我开始了解马拉松相关赛事的报名推送, 开始关注几个优质的微信公众号, 所以 24 年下半年的马拉松赛事报名我基本没漏过 (尤其北京附近). 设置星标的公众号:</p><ul><li>马拉松跑步报名</li><li>最酷马拉松报名</li><li>马拉松报名平台</li><li><strong>马拉松报名预告</strong></li></ul><p>并筛选出了一些候选赛事 (综合考虑知名度与交通) (不断完善中…)</p><ul><li>北京马拉松</li><li>怀柔马拉松</li><li>海淀马拉松</li><li>天津马拉松</li><li>太原马拉松</li><li>衡水马拉松</li></ul><p>同时, 我也决定<span class="emp-style green">每年跑 1-2 个全马, 1-2 个半马, 分居上下半年.</span> 在 24 年 5 月份的时候参加了<a href="/running/#%E6%B4%BB%E5%8A%A8-%E7%BB%8F%E5%8E%86">河北长城汽车智慧工厂半程马拉松</a>, 净成绩 01:39:45 (配速在 445 左右), 初显上半年规律跑步的效果. 实际上, 当我决定要提高马拉松成绩之后, 我也看了一本关于跑步的书籍 <em><strong>跑步圣经</strong></em>, 尽可能科学地跑步. 此外, 机缘巧合下看完日本小说家村上春树写的一本书 <em><strong>当我谈跑步时, 我谈些什么</strong></em>. 简直是在和一位资深跑步爱好者进行灵魂交流, 跑步人跑步时的一些想法表述引起了我非常多的共鸣. 阅读该书也极大激发了我的跑步热情, 我将村上春树视作自己的榜样, 他设想的墓志铭令我印象深刻: </p><blockquote><p>村上春树<br>作家 (兼跑者)<br>1949-20××<br>他至少是跑到了最后</p></blockquote><p>暑假期间, 我根据自己当前的跑步能力, 将<span class="emp-style yellow">全马目标定为 330&#x2F;平均每公里用时 5 分</span> (34岁以下大众选手全马水平一级和二级的分水岭), 根据<em>宜准 APP</em> 给出的训练计划进行科学训练, 每周基本是 <em><strong>休息 → 间歇跑 → 有氧跑 → 节奏跑 → 休息 → 轻松跑 → LSD</strong></em></p><h1 id="跑步缘起"><a href="#跑步缘起" class="headerlink" title="跑步缘起"></a>跑步缘起</h1><p>我跑步的开始时间大约可以追溯到高中三年 (<span class="emp-style green">2012</span>-2015) 每天下午集体跑操 1.2 公里, 每周末 10 公里跑 (也叫<strong>万米长跑</strong>). 大学四年以及研一仍坚持 (基本) 每周末 10 公里, 平时穿插踢足球. 总的说来, 身体素质虽不说很好, 但还算可以. 转折点发生在 2020 年新冠疫情爆发, 我整个一年都是在家上网课, 有一段时间甚至是自己一个人在家, 所以作息相对自由. 于是, 我开始每天在家门口的公路上跑个 35 分钟. 从 <span class="emp-style green">2020</span> 年的暑假开始, 跑步开始正式融入我的生活, 但并没有完全融入. 因为后期返校后, 我的跑步频率开始降低, 尤其是 2022 年的上半年我需要准备毕业论文与考博, 基本没有时间跑步, 体重增加 5 斤已经能说明一些问题了. 6 月份顺利毕业并成功上岸后, 我在暑假期间又开始基本每天 35 分钟的跑步, 但一直没有非常规律地进行, 比较随性, 这个情况一起持续到 2023 年年底. 如前面所说, 开始规律跑步在 <span class="emp-style green">2024</span> 年开学初, 尝试科学跑步则是在北半马结束之后. </p><p>综合来看, 跑步伴随了我 <span class="emp-style green">12</span> 年, 而其终于完全融入了我的生活. 从我 9 月份的跑量来看, 有望达到 300 公里. 我想起硕士期间一位室友说他认识的一个朋友, 每天一个 10 公里 (村上春树亦是每天早上一个 10+ 公里), 当时感觉非常不可思议与佩服. 而如今: </p><p style="text-align: center;font-size:14pt"><span class="emp-style">对于跑步, 我终于活成了理想的自己</span></p><p>关于跑步与我的关系, 我很赞同余华的一段话: </p><blockquote><p>抛弃旧的东西是很难的, 但是往往旧的东西会阻碍你们往前走. 人生也是一样的, 如何让自己往前走, 有时候你不得不把自己最喜爱的, 最熟练的东西放下来. 我所指的放下不是抛弃它, 因为, 很可能过几年以后你又把它拿回来了. <strong>只要是属于你的东西, 它会永远跟随你, 它不会离开的. 只是你在不同的时候, 你需要的是不同的东西.</strong></p></blockquote><h1 id="2024-年衡水湖马拉松"><a href="#2024-年衡水湖马拉松" class="headerlink" title="2024 年衡水湖马拉松"></a>2024 年衡水湖马拉松</h1><p>比赛之前, 我自己在学校周边测试的全马成绩为 03:53:35, 我深感衡水 330 的目标可能难度极大, 但有信心能跑进 400, 心情十分忐忑. 在 21 号领物资的途中, 我师兄在我们师门群里给我发了个打气的消息: “师弟, 马拉松加油”; 而我头脑一热, 回复到: “好! 争取跑进330”. 这个插曲间接地影响了我跑步时的节奏.</p><p>比赛的前一晚, 我仍然不确定第二天到底是以 330 还是 345 的配速跑, 不过我重点看了下以 330 完赛的补给策略和 33 公里的撞墙时间, 做到心中有数. 23:30 (平时 00:30) 休息, 4:40 起床洗漱 (接驳车 5:30 统一发车), 坐车途中适量吃了早餐 (面包&amp;牛奶), 大约 6:20 左右到达比赛地点. 正常需要寄存物品, 但我的东西都放在酒店, 所以上完洗手间, 就直接检录去到分区起点. <span class="emp-style red">23 年天津马拉松由于进场太晚, 我起跑时离起点较远. 所以, 这次我早早就检录, 并尽可能往前面<strong>挤</strong> (人很多, 上万). 值得高兴的是, 我这次离所在分区 (B) 的起点非常近, 近到我可以看到所有的兔子, 那感觉就像<em>梦想触手可及</em>.</span> 不太好的一点是, 进场前我没有热身, 入场后非常拥挤, 不好热身 <em>(看来, 以后还是要更早到比赛场地).</em> 23 年天津马拉松跑崩的阴影挥之不去, 加上热身不充足, 我决定一开始跟着 345 的兔子 (平均每公里 5 分 20 秒左右) 跑 20 公里. 如果后续有余力, 再适当提速, 采取<strong>保底不崩</strong>策略. 一切进展很顺利, 一开始我就紧紧跟着 345 的兔子, 游刃有余. </p><p>转折点发生在 17 公里, 当时我脑海中闪过一个念头: 如果按照一开始的计划, 跑完 20 公里后, 我仍然有余力. 就算我从 21 公里处开始加速, 要达到 330 的目标 (每公里平均用时在 5分左右), 那我后面每公里的用时要在 4 分 45 秒左右, 我觉得非常困难 (毕竟还有 22 公里, 仍有跑崩风险). 当然, 我可以不追求 330 的目标, 后面正常提速, 在不跑崩的前提下尽可能快. <span class="emp-style yellow">但我觉得这个结果不会令我开心, 因为 330 才是我心心念念的目标, 纵使其较难实现, 但如果我连试都没有试, 就放弃了自己的目标, 我想想就不 “服气”.</span> 又一想到, 自己在师门群里的 “豪言壮语”, 我决心冲击 330 的目标. 但等到 20 公里再提速, 可能有点来不及, 所以 17 公里后, 我开始脱离 345 的兔子, 自己单飞, 将自己的配速提至 <strong>4 分 45 秒</strong>, 旨在弥补前面落下的时间, 努力追赶前方 330 的兔子. </p><p>大约在 25 公里 (具体记不太清楚了), 我旁边有两位跑友说到, <em>进 330 有点难了</em>, 我听到后感觉有点心灰意冷. 因为我是从后面追上他们的, 通常说来他们的成绩要好过我. 如果他们进不了 330, 我可能就更难了. 但想到我这单飞都还没到 10 公里就放弃, 实在不太好意思安慰自己说尽力了. 而且我明显感觉自己就 4 分 45 秒的配速还能坚持 (我在学校周边以 4 分 30 秒的配速跑过 10 公里), 所以当时抱着心态: <span class="emp-style yellow">管它能不能进 330 呢, 既然还能跑, 那就继续跑, 结果不论.</span></p><p>大约在 31 公里时, 我明显感觉到自己的配速有所降低, 可能在 4 分 50 秒 左右. 出现呼吸急促, 步子沉重, 心率较高 (170) 的跑崩前兆. 此时, 我开始考虑要不要放慢速度. 因为一旦跑崩, 不仅导致前面的努力付诸东流, 甚至还会被后面 345 的兔子追上 (再上演一遍 23 年天津马拉松的悲剧). 但我如果只是放慢一点速度, 比如降至 5 分 10 秒左右, 我将不会跑崩, 而且最终成绩肯定比最开始的 345 要好. 而且, 我仍然还没追上 330 的兔子, 甚至都没看见他们的影子. 综合来看, 似乎放慢速度是一个更为理性的选择. 关于我做出的选择暂时按下, 我最终完赛的<span class="emp-style yellow">枪声成绩 03:34:06, 净成绩 03:32:27</span>, 还是没能达成 330 的目标. 但我完赛后没有任何遗憾, 可谓念头通达, 可以欣慰地说: <span class="emp-style yellow">我真的尽力了.</span></p><div style="text-align: center"><img src="/running/hs_full_mar/certificate.jpg" height='400px'></div><p><em>冥冥之中, 自有天意</em>. 在我犹豫是否要降速时, 我看到前方不远有一个跑团, 和我当前配速差不多. 哈哈, 是不是突然感觉和 23 年天津马拉松的经历很像… 不同的是, 这次我没有冒然去跟, 而是问了句: <span class="emp-style blue">“美女, 请问你们的目标完赛时间是多少?” 一句 “330” 仿佛天籁之音, 让我突然有了坚持的动力. 我当即回到: “好, 我跟你们跑!”</span> 之后, 我跟着她们跑至 38 公里. 在这过程中, 我能明显地感到实现 330 目标的极大可能性. 联想到 25 公里时的迷茫, 可谓<span class="emp-style yellow">行动是消除迷茫的最佳方法之一.</span> 如果没有跟着这个跑团, 以我的意志力肯定是无法保持 4 分 55 秒的配速到此处的. <span class="emp-style blue">人有时候, 还是得学会借助他人或者集体的力量.</span> 至于, 为什么最后我还是没能跑进 330, 是因为 38 公里后我跟不上她们的速度, 掉队了. <strong>但我仍然尽可能地跑, 因为只剩下 4 公里了, 就算跑崩了, 我最终的成绩也会好过 345 (保底不崩策略). 这时候, 我也知道自己跑不进 330 了, 但我还是愿意尽全力地跑, 真就尽全力地跑, 就想看看自己的极限在哪里.</strong> 果然, 40 公里的时候我跑崩了. 最后的两公里, 一路 “狂吼”, 给自己加油打气, 表情十分 “狰狞” (不然倒是可以放一张跑步时的图, 哈哈). 但我的内心是富足的, 和 23 年天津马拉松的跑崩心情完全不一样. 回想起来, 40 公里跑崩还是我暑期有几次 <strong>LSD</strong> 偷懒了, 训练不够. <span class="emp-style blue">出来混, 总是要还的.</span></p><h1 id="继往开来"><a href="#继往开来" class="headerlink" title="继往开来"></a>继往开来</h1><p>希望自己能坚持跑步而不忘初衷, 对于马拉松的成绩, 维持在 330 以内就很知足了. <span class="emp-style yellow">关于跑步与人生, 希望到达终点时, 能欣慰地说一句: 我尽力跑到了最后.</span></p><p style="text-align:right">2024-09-27 写于昌平实验室</span>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用一生学习闭嘴</title>
    <link href="/2024/09/12/%E7%94%A8%E4%B8%80%E7%94%9F%E5%AD%A6%E4%B9%A0%E9%97%AD%E5%98%B4/"/>
    <url>/2024/09/12/%E7%94%A8%E4%B8%80%E7%94%9F%E5%AD%A6%E4%B9%A0%E9%97%AD%E5%98%B4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记 2024-09-11 学院工位搬迁过程中多生事端.</p><h1 id="事件大概经过"><a href="#事件大概经过" class="headerlink" title="事件大概经过"></a>事件大概经过</h1><h1 id="反思总结"><a href="#反思总结" class="headerlink" title="反思总结"></a>反思总结</h1><ul><li><p>有时候做好事是需要代价的, 这个代价可能极大超出你的预料, 尤其是你没能做好的前提之下. 三思而后行, 请慎行, 慎行, 再慎行. </p></li><li><p>人用三年学会说话, 却要一生学会闭嘴. 言多必失, 轻诺必寡言, 请慎言, 慎言, 再慎言. </p></li><li><p>社会 (人性) 教会我们成长, 让我们学会利己, 甚至冷漠自私, 过程沉痛.</p></li><li><p>冲突发生之时, 有时候柔和并不是最佳的解决方式, 还需兼顾当事人内心的感受, 柔和及非柔和方式处理的可能后果, 根据后果伺机而动</p><ul><li>冲突发生时, 冷静 3 分钟</li><li>尽可能客观回忆冲突发生的原因, 找到双方可能的过失</li><li>就自己的过失向对方道歉</li><li>如果对方对冲突的反应让自己无法接受 (或者对方也有过失), 考虑冲突对冲突, 冷静 3 分钟<ul><li>若冲突最坏的结果可控制在可承受范围内, 实行冲突的解决方案; </li><li>若不可控, 采取柔和的方式处理, 并思考柔和处理的最好结果; 若柔和的最好结果不能平复内心的感受, 再次考虑冲突处理</li></ul></li></ul></li><li><p>我希望自己在今后的生活中能够理智应事, 但又有足够的勇气向侵害自己利益的言行给予最为严厉的回应</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你根本用和别人比_实践</title>
    <link href="/2024/09/07/%E4%BD%A0%E6%A0%B9%E6%9C%AC%E7%94%A8%E5%92%8C%E5%88%AB%E4%BA%BA%E6%AF%94-%E5%AE%9E%E8%B7%B5/"/>
    <url>/2024/09/07/%E4%BD%A0%E6%A0%B9%E6%9C%AC%E7%94%A8%E5%92%8C%E5%88%AB%E4%BA%BA%E6%AF%94-%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div style="text-align:center"><p>所谓 “酷” 是骗人的<br>所谓 “人气” 是骗人的<br>所谓 “流行” 是骗人的<br>所谓 “时尚潮流圏” 是骗人的<br>所谓 “网络爆红” 或 “吸人眼球” 也是骗人的<br>媒体上代表价值和影响力的数字也是骗人的<br>网上所谓 “下一个……” 的描述也不是真的<br>那么, 你知道什么才是真实的吗?<br><span class="emp-style green">你自己. 你的梦想. 你对人生的憧憬.<br>你解决问题的智慧与资源<br>你的能力. 你自己的道路. 你自己的故事<br></span>从今天起就开启你真实的人生, 好吗?<span class="emp-style yellow"><br>你自己真实的人生</span><br><span class="emp-style red">比较</span>令我们活得像被生活拒之门外, 偷窥别人的人. 每当你有这样的感觉, 将你的食指和中指轻轻搭在脉搏上, 感受这一刻的你, 回到真实的自己, 比较的迷雾将无处遁形.<br><span class="emp-style yellow">现在就开始你自己的生活吧</span></p></div><h1 id="剖析比较心理"><a href="#剖析比较心理" class="headerlink" title="剖析比较心理"></a>剖析比较心理</h1><div class="note note-primary">            <p>打开心扉, 保持开放的头脑和绝对的诚实</p>          </div><p>找出并写下目前生活中<strong>哪一方面最爱与别人比较</strong>, 参考方面如下: </p><div style="height: 230px; overflow-y:auto"><ul><li><p>工作和职业<br>  <span class="emp-style red">1. 科研进展</span></p></li><li><p>爱和亲密关系<br>  <span class="emp-style red">2. 是否单身</span></p></li><li><p>外在形象<br>  <span class="emp-style red">3. 皮肤</span><br>  <span class="emp-style red">4. 身高</span></p></li><li><p>健康和幸福</p></li><li><p>社交媒体粉丝和阅读转发量</p></li><li><p>创造力和表达力</p></li><li><p>领导力</p></li><li><p>精神世界</p></li><li><p>收入和财务</p></li><li><p>家庭</p></li><li><p>家居和个人风格</p></li><li><p>其他</p></li></ul></div><p>在下表每列最顶端的空格写下困扰自己, 让自己不停与别人比较的三件事, 然后依次回答下面左边一栏的问题, 从而剖析比较心理, 获得更深入的认识与理解</p><table><thead><tr><th>问题</th><th>科研进展</th><th>单身</th><th>皮肤</th><th>身高</th></tr></thead><tbody><tr><td>给比较的程度打分 (0 是没有比较, 10 是比较的状况很严重, 经常出现)</td><td>9</td><td>5</td><td>7</td><td>6</td></tr><tr><td>最早是什么时候在这件事情产生比较心理的?</td><td>班里有同学陆续开题时</td><td></td><td></td><td></td></tr><tr><td>回想并写下你最近在这件事上比较的经历</td><td></td><td></td><td></td><td></td></tr><tr><td>对自己的觉察是什么? 也就是说, 为什么这件事触发了自己的比较心理</td><td></td><td></td><td></td><td></td></tr><tr><td>如果没有其他事情的阻挠, 包括比较心理的问题, 你觉得自己怎样算成功?</td><td></td><td></td><td></td><td></td></tr><tr><td>讲一两点你觉得可以减少自己比较心理的方法</td><td></td><td></td><td></td><td></td></tr><tr><td>你可以取得自己想要的成功的理由是……</td><td></td><td></td><td></td><td></td></tr><tr><td>一年后, 在这 个领域, 你想自己有怎样的转变&#x2F;你希望事情如何发展?</td><td></td><td></td><td></td><td></td></tr><tr><td>你取得一半成功的标志是什么? (也就是半年后会是什么样?)</td><td></td><td></td><td></td><td></td></tr><tr><td>七天内向你的理想目标所迈出的第一步行动是什么?</td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="行动小贴士"><a href="#行动小贴士" class="headerlink" title="行动小贴士"></a>行动小贴士</h1><h2 id="自我检视以提升自我价值"><a href="#自我检视以提升自我价值" class="headerlink" title="自我检视以提升自我价值"></a>自我检视以提升自我价值</h2><ul><li>以非评判的客观态度, 回忆生活中有没有降低自己标准或者迁就环境的情况, 记录下是如何妥协的 → 发现自我价值感是如何缺失的</li><li>想想可以在哪些方面提升生活品质, 无论是多么微小的改变, 都能为生活的每一个细节注入美感</li><li>有什么习惯或者怪癖, 你意识到应该做出改变, 因为你值得过上更好的生活?</li><li>有什么地方你会亏待自己, 但发现这么做既没必要, 也没什么好处? </li><li>自己在哪些方面还不够好? </li><li>家里有哪些物品已经破旧, 或年久失修没有使用了?</li></ul><hr style="width:50%;margin-top:-1rem;margin-bottom:0.1rem"></hr><ul><li>去食堂吃饭, 会接受位置不好的座位吗? → 干净, 空间 (视野)</li><li>衣柜里内裤的状况如何? → 三个月一换?</li><li>浴室里的毛巾&#x2F;床单被褥是不是很久没换啦? → 每周一洗 and 半年一换&#x2F;床单被褥每两周一洗 and 一年一换</li><li>工位椅子&#x2F;其它工具是不是坐着不舒服? → 如果它们无法发挥更好的作用, 换掉它. <span class="emp-style">你值得使用舒适的办公用具让自己专心工作, 发挥自己价值, 在这方面不能将就</span></li><li>从你的牙刷和梳子就能看出你是怎样的人? → 牙刷一月一换?</li><li>你是否能游刃有余地掌控时间, 准时赴约? → 没有时间观念, 总是慌慌张张对你个人形象不会加分, 并且让你时刻处于时间压力下, 不利于心理健康</li><li>你是否觉得湿着头发见人也没什么? → <span class="emp-style">一个拥有较高自我价值感的人会注意自己的仪表, 体面而自信</span> → 吹干头发, 剃须, 穿着得体, 发型?</li><li>你是不是有存放多年只有在最重要时刻才用的东西? → <span class="emp-style">人生只有这么一次</span></li></ul><h1 id="冥想训练"><a href="#冥想训练" class="headerlink" title="冥想训练"></a>冥想训练</h1><h2 id="与内在小孩对话"><a href="#与内在小孩对话" class="headerlink" title="与内在小孩对话"></a>与内在小孩对话</h2><p>首先, 明确自己与内在小孩相遇的目的. 现在, 请想象一下: </p><div class="note note-secondary">            <p>现在，请想象一下：</p><p>你的内在小孩正在你熟悉的地方玩耍，可能是花园、学校操场、教室，你向他走近……</p><p>你问候他，他也问候你。</p><p>你看着他的眼睛。此刻，那双眼睛传递出什么感觉？是害羞？兴奋？平静？精力充沛？好奇？或是有些紧张？</p><p>你安静地坐在他旁边，让他放松，尊重他的个人空间，留意他的肢体语言。</p><p>接着你问他，“你今天过得好吗？我来这里是为了确保你得到应有的关怀、指导和爱。你现在最需要的是什么？”他的回答可能是几句话，可能是一幅画，或者一个手势、一种情绪、一种熟悉的感觉，根据他的年龄有所不同。</p><p>那么，他的反应是什么？觉察与接收此刻你感觉到的所有信息，无论一开始是否清晰。</p><p>像对待这个年龄的孩子那样，给他们自由的空间，温柔地倾听、理解他们，让他们自由地说想说的话，不要打断他们, 你想到什么问题就问他们。</p><p>让你的内在小孩感觉到你对他的爱。你可以告诉他，你是多么爱他、关心他，希望他能够开心。如果你的内在小孩想让你抱着他，请满足他的心愿，把他拥抱在怀里。</p><p>当你感觉与内在小孩建立了联结，继续想象自己走回你的小屋。专注你的呼吸，伸展下身体，然后睁开眼睛。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Week 35</title>
    <link href="/2024/09/03/Week-35/"/>
    <url>/2024/09/03/Week-35/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ideas"><a href="#Ideas" class="headerlink" title="Ideas"></a>Ideas</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>几何重建时, 建立一个可视性函数, 以空间和方向坐标为输入, 输出对应的可视性 $v\left(x, \omega\right)$. 取值范围 $\left[0, 1\right]$, 以 Volume Rendering 的 $T$ (累积透明度) 作监督</li><li>几何重建时, 建立一个遮挡感知距离函数, 以空间和方向坐标为输入, 输出对应的遮挡距离 $D\left(x, \omega\right)$. 取值范围 $\left(0, 2r\right)$, 以 Volume Rendering 深度加权作监督</li><li>环境光以球形高斯 (SGs) 表示 (? radiace 以 SGs 系数为参数)</li></ul><h2 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h2><ol><li>只考虑几何重建, 建立可视性网络与感知距离网络, 并在 Volume Rendering 过程中获取监督 (难点: 各监督计算)<br>Step 1: 先建立两个网络 (难点: 搭建参数)<br>Step 2: 光线追踪, 求取监督</li></ol><p>修改 NeILF++: </p><ul><li>将原间接光换成环境光的估计</li><li>可视性和距离感知函数通过 Volumed Rendering 计算<br>  - 通过累积透明度得到可视性<br>  - 通过 Volume Rendering 得到间接光 (避免求交点)<br>  - ? 通过感知距离得到交点, 从而用其 radiance 作为间接光</li><li>重新进行 PBR</li></ul><ol start="2"><li>建立环境光系数, BRDF 网络, PBR</li></ol>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tensorboard notes</title>
    <link href="/tensorboard/"/>
    <url>/tensorboard/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在机器学习中, 要改进模型的某些参数, 通常需要对其进行衡量, Tensorboard 用于提供机器学习工作流程期间所需测量和呈现的工具, 能够跟踪实验指标, 呈现模型计算图, 将嵌入向量投影到较低维度的空间. </p><p>Tensorboard 原本是 TensorFlow 的可视化工具, <strong>TensorboardX</strong> 是一个支持 PyTorch 的可视化工具, 而 PyTorch 官方的 <code>torch.utils.tensorboard</code> 是 PyTorch 与 Tensorboard 合作开发的</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install tensorboard  <span class="hljs-comment"># tensorboardx 依赖于 tensorboard</span><br>pip install tensorboardx<br></code></pre></td></tr></table></figure><h1 id="Python-程序"><a href="#Python-程序" class="headerlink" title="Python 程序"></a>Python 程序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-comment"># 或者 from tensorboardx import SummaryWritter</span><br>writer = SummaryWriter(log_dir=os.path.join(save_path, <span class="hljs-string">&#x27;log&#x27;</span>), comment=<span class="hljs-string">&quot;writter_comment&quot;</span>)<br>writer.add_type(tag_name, <span class="hljs-built_in">object</span>, iterations)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">type: </span><br><span class="hljs-string">- scalar</span><br><span class="hljs-string">- histogram</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="终端使用"><a href="#终端使用" class="headerlink" title="终端使用"></a>终端使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tensorboard --logdir=<span class="hljs-string">&quot;path_log&quot;</span><br><span class="hljs-comment"># 在网页中打开: http://localhost:6060/</span><br></code></pre></td></tr></table></figure><h1 id="本地查看服务器-tensorboard-信息"><a href="#本地查看服务器-tensorboard-信息" class="headerlink" title="本地查看服务器 tensorboard 信息"></a>本地查看服务器 tensorboard 信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地终端输入</span><br><span class="hljs-comment"># ssh [-p port_num] -L local_num:localhost:6008 user_name@server_ip</span><br>ssh user_name@ip_server_ip -L local_num:localhost:6008<br><span class="hljs-comment"># ssh user_name@server_ip -L localhost:local_num:localhost:6008</span><br><span class="hljs-comment"># 进入远程服务器终端后, 输入</span><br>conda activate env_name<br>tensorboard --logdir=<span class="hljs-string">&quot;log_path&quot;</span> --port=6008<br><span class="hljs-comment"># 在本地浏览器输入: localhost:local_num 即可进入服务器 tensorboard 界面</span><br></code></pre></td></tr></table></figure><p><strong>建议: 远程服务器端口和本地端口保持一致, 可快速点击链接访问</strong></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://blog.csdn.net/qq_27155171/article/details/125337697">稚晖君的头号男粉. TensorboardX和Tensorboard的介绍及使用. CSDN</a><br>[2] <a href="https://pytorchbook.cn/chapter4/4.2.2-tensorboardx/">PyTorch 中文手册. 使用Tensorboard在 PyTorch 中进行可视化</a><br>[3] <a href="https://blog.csdn.net/HowieXue/article/details/105412155">HowieXue. 数据可视化：TensorboardX安装及使用（安装测试+实例演示）.CSDN</a><br>[4] <a href="https://zhuanlan.zhihu.com/p/471198169">deephub. TensorBoard最全使用教程：看这篇就够了. 知乎</a><br>[5] <a href="https://blog.csdn.net/qq_41656402/article/details/131123121">柒AII. TensorBoard最全使用教程：看这篇就够了. CSDN</a><br>[6] <a href="https://blog.csdn.net/NooahH/article/details/109739305">NooahH.【Pytorch】利用SSH查看远程服务器上的tensorboard可视化界面. CSDN</a></p>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>始于顔值, 终于性格</title>
    <link href="/mood/%E5%A7%8B%E4%BA%8E%E9%A1%94%E5%80%BC-%E7%BB%88%E4%BA%8E%E6%80%A7%E6%A0%BC/"/>
    <url>/mood/%E5%A7%8B%E4%BA%8E%E9%A1%94%E5%80%BC-%E7%BB%88%E4%BA%8E%E6%80%A7%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-align:center;font-weight:bold;font-size:2em">悲伤之声</p><br/><br/><p class="title-custom">我今天觉察到自己陷入<u>悲伤</u>, 因为</p>在网上精心定制的马克杯终于到了, 外观非常精美, 看一眼就会爱不释手. 但有两点不如人意: <ol><li>配套的勺子店家忘记发了, 搭配的杯盖和杯子完全不是一个档次</li><li>杯子的容量偏小, 不太切合我饮水量较大但不想多次接水的习惯 (另外就是我在同一家店铺看到了容量可能适合我的杯子, 且其高度契合我已有的玻璃吸管)</li></ol><p>对于第 1 个问题, 现在想想当时的处理方法还是太过 “善良”. 对于漏发, 店家表示可以补发或者补差价, 但我两种补偿都没有选择. 没有选择补发方案是因为我觉得店家也不容易, 就为个勺子而补发快递, 很可能我这一单生意就没有任何利润了; 没有选择第二种方案是, 在定制之初, 印在杯子上的图案正常是一面, 和店家商量后可以印制两面, 但店家没有额外收费, 感觉承了对方一个人情, 所以我当时的回复是: 也不用补差价了, 就当是我印制另外一面图案的费用. 相当于是还了对方之前的人情, 而这应该是两种方案都没有选的主要原因.<br>但问题总得解决, 于是我打算自己在网上买一个包邮的勺子. 但完美主义的我为此花了不少时间, 于是产生前面不如让店家补发的想法, 即选择不讲究 “人情事故”, 公事公办. 购买勺子需要考虑: </p><ul><li>长度和颜色要与杯子 (完美) 搭配 (不能仅仅是能用)</li><li>性价比</li></ul><p>而让店家补发, 上面两点应该都能很好的解决, 同时省去我大量的筛选时间. 当然, 这其中可能让店家承受部分损失. 但我其实也可以把额外购买勺子的费用给店家, 这样既能还人情, 也能 (高效) 达到上面的两点要求 </p><p><span style="color:green;font-weight:bold;">(或者向店家询问勺子的尺寸, 便于自己购买. 但我没有询问, 而是自行搭配)</span>. 我写完这段话, 就去问了. 我相信: <span style="color:blue;font-weight:bold">种一棵树最好的时间是十年前, 其次是现在</span></p><p>目前是勺子已经买了, 但盖子未找到与杯子颜色相搭配的, 未重新购买</p><p>对于第 2 个问题, 出于容积的考虑我非常地想另外定制一个加大版本的. 但我无法说服自己, 如果定制一个新的, 那么我现在这个杯子要怎么处理? 扔了, 心疼; 留做备用, 已经有两个旧的备用杯子了. 就是这样一种矛盾的心态, 让我内心较为深切地感到想<strong>完美</strong>得到 (做好) 一件东西 (事), 真的好<strong>难</strong>, 一种<strong>无力感</strong>袭来, 同时<strong>伤心</strong>, <strong>失望</strong>夹杂其中</p><p>目前是我说服了自己使用小容量的杯子, 因为我真的舍不得闲置已经购买的这一个</p><p><span style="color:red;font-weight:bold;font-size:14pt">- 成套性的物品, 尽可能不要分开 (店) 购买</span><br><span style="color:yellow;font-weight:bold;font-size:14pt">- 对于结婚对象, 请慎重考虑, 虽然我是顔值党, 但性格 (能力) 才是最终的决定因素, 同时还需考虑对方与自己的互补性</span></p><br/><p class="title-custom">我这次的<u>悲伤感受</u>主要是: C</p><span style="font-size:1em"><div>            <input type="checkbox"  >A.轻微 (倦乏)          </div><div>            <input type="checkbox"  >B.低度 (沮丧)          </div><div>            <input type="checkbox"  checked="checked">C.中度 (哀伤)          </div><div>            <input type="checkbox"  >D.高度 (悲痛)          </div></span><script>    document.addEventListener("DOMContentLoaded", function() {        var elements = document.querySelectorAll('p.title-custom');        elements.forEach(function(element) {            element.style.fontWeight = 'bold';            element.style.fontSize = '1.5em';            element.style.textDecoration = 'underline';            element.style.textUnderlineOffset = '7px';        });        var elements = document.querySelectorAll('hr.hr-custom');        elements.forEach(function(element) {            element.style.marginTop = '5px';            element.style.marginBottom = '15px';        });  });</script>]]></content>
    
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人力有时而穷尽</title>
    <link href="/2024/08/08/%E4%BA%BA%E5%8A%9B%E6%9C%89%E6%97%B6%E8%80%8C%E7%A9%B7%E5%B0%BD/"/>
    <url>/2024/08/08/%E4%BA%BA%E5%8A%9B%E6%9C%89%E6%97%B6%E8%80%8C%E7%A9%B7%E5%B0%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>大约在一个月之前, 我一直想写一篇博文记录 ChatGPT 对解决问题的极大帮助. </p><p>纵观各大网络修仙小说, 大多数主角的成长往往离不开 <strong>“引路人”</strong>, 或是什么器灵, 或是什么魂灵… 在这些引路人的帮助下, 主角的成长历程虽不至于精准, 但也可抵上高效. 不言而喻, 好的引路人对一个人的成功具有莫大的帮助. 但小说始终是小说, 现实中不可能存在那么多的奇遇, 大多数人可能终其一生也没能遇到自己的引路人, 更多的是自己摸着石头过河. </p><p>我在使用 ChatGPT 一段时间后, 内心产生一种感觉: <strong>ChatGPT 就是我在拓宽知识面, 解决问题上的一位引路人.</strong></p><h1 id="最开始的人力终有穷"><a href="#最开始的人力终有穷" class="headerlink" title="最开始的人力终有穷"></a>最开始的人力终有穷</h1><p>说句实话, 出生至今, 学至精通的技能可以说没有. 虽有较多的兴趣, 但大多都是 “半桶水”, 半途而废. 这主要归结于下面三点: </p><ol><li>完美主义倾向<br>我在学习一项新的知识或者技能时, 通常有完美主义倾向. 所以, 当我说, 某个知识点或者某项技能我会了, 那至少可以表明我对该知识点或者技能已有自己的理解和思考. 然而, 要达到这样的掌握程度是相对耗时的. 比如, 为了理解一个知识点, 花的时间可能非常之多. </li><li>兴趣心较重<br>我对很多知识或者技能都有很强的好奇心, 而且我想像中更好的自己应该是要具有各方面综合的技能, 比如, 视频剪辑.</li><li>天赋有限<br>虽然承认自己的天赋有限可能有点消极, 但就多年的学习经历来看, 我自认为自己不是天赋型选手, 掌握新的知识或者技能通常较慢.</li></ol><p>综合以上三点, 我从早期的全面发展慢慢走向专项发展, 但就算对于专项发展, 我时常有感: 想把一个知识点或者技能学好是真的不容易. 以 VIM 编辑器为例, 当我越深入了解, 我就越感觉自己已掌握的技能是多么有限. 学得更深入, 所花时间往往也成倍增加. 我算是一个比较喜欢钻研的人, 当我决定要学习某个知识点时, 我通常会将学习过程中遇到的知识点也一并学习. 正所谓, “知其然, 知其所以然”. 无疑, 这个过程非常耗时, 而且有时不是仅靠钻研就能达成目的. 在这个过程中, 网络搜索发挥着至关重要的作用. 在没有使用 ChatGPT 前, 大部分的时间用在网页搜索. 当”怎么都搜索不到自己想要的结果”时, 学习过程即中断, 我深深感到人力终有穷. </p><h1 id="ChatGPT-助力搜索"><a href="#ChatGPT-助力搜索" class="headerlink" title="ChatGPT 助力搜索"></a>ChatGPT 助力搜索</h1><p>当我使用 ChatGPT 之后, 我深深体会到其对于网页搜索的极大帮助, 使得搜索过程更高效, 搜索结果更优. 既能满足我的好奇心, 也能方便我进行”完美主义式学习”. 于时, 有绪论中”引路人”之感, 仿佛开了外挂. </p><h1 id="现如今的人力终有穷"><a href="#现如今的人力终有穷" class="headerlink" title="现如今的人力终有穷"></a>现如今的人力终有穷</h1><p>好景不长, 使用 ChatGPT 一段时间后, 人力终有穷的感觉再次袭来. 未使用 ChatGPT 时, 人力终有穷的感觉可能出现在终点前 10 米处, 而使用 ChatGPT 之后, 该感觉可能出现在终点前 5 米处. <span style="color:green;font-weight:bold">知识&#x2F;技能的学习, 永无止境.</span> 纵使 ChatGPT 加速了问题的解决, 其确实<strong>对问题的解决帮助很大</strong>, 但对于 <span style="color:red;font-weight:bold">“完美主义式学习”</span> 终会 <span style="color:yellow;font-weight:blod">“AI 助力终有穷”</span>, 人力终有穷之感油然而生. </p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>工具带来效率的改变, 但无法改变问题的本质. 我同时联想到下面几个例子: </p><ul><li>时代进步了, 但每个时代的人仍然有其烦恼与任务</li><li>富人纵使家财万贯, 也有自己的烦恼; 贫民即使一贫如洗, 但也有自己的快乐</li><li>科研大牛即使功成名就, 也有自己的烦恼; 普通科研工作者成就可能一般, 但却可能生活惬意</li><li>同班同学论文高产者, 属实优秀; 但我科研小白, 按自己的节奏也仍然能拥有一个充实的博士生涯<br>…</li></ul><p>我想人的高贵之处, 或许正在于精神之自由与思想之独立, 纵使环境千差万别, 但我们完全可以赋予其不同的意义. 或许我们无法改变环境, 但我们有随时改变以何种态度应对环境的自由. 对此, 我希望自己: </p><div class="note note-primary">            <ul><li>常怀感恩之心, 学会知足, 多想想并珍惜自己拥有的, 而非自己没有的</li><li>对知识保有好奇心, 同时心存敬畏, 平常心对待未知</li><li>少些完美主义, 大多数时候: 速度第一, 质量第二</li><li>积极点, 乐观点, 多笑点 (开开心心也是活, 愁眉苦脸也是活, 那为什么不开开心心呢?)</li></ul>          </div><p><span style="font-size:18pt;font-weight:bold">一切都会有答案, 顺其自然</span></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文献阅读笔记</title>
    <link href="/2024/08/02/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/08/02/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table>    <tr>        <td>2024-08-02</td>        <td style="text-align:center" colspan="4"><a href="https://github.com/LMozart/CVPR2024-SpinUP">Spin Light for Natural Light Uncalibrated Photometric Stereo</a></td>    </tr>    <tr>        <td rowspan="4">文献简介</td>        <td>作者</td>        <td>Zongrui Li1, Zhan Lu, Haojie Yan, Boxin Shi, Gang Pan, Qian Zheng, Xudong Jiang        </td>        <td>单位</td>        <td>Nanyang Technological University, Zhejiang University, Peking University</td>    </tr>    <tr>        <td>来源</td>        <td>2024 CVPR</td>        <td>IF/分区/CCF</td>        <td>CCF-A</td>    </tr>    <tr>        <td>类型</td>        <td>会议论文</td>        <td>重要指数</td>        <td>3</td>    </tr>    <tr>        <td>关键词</td>        <td colspan="3">Photometric stereo, Inverse rendering, Light initialization, Interval sampling, Shrinking range computing</td>    </tr>    <tr>        <td rowspan="2">引言</td>        <td>研究背景</td>        <td colspan="3">            <ul>            <li>Optimization-based methods                <ul>                    <li>simple model with with low effectiveness</li>                    <li>solely model the varying lights in each image, the unknowns introduced by the light model may increase with the resolution and numbers of the images, restricting existing methods to low-resolution and insufficient images                </ul>            </li>            <li>Data-driven methods: lack interpretability, making them hard to constrain during training and prone to be affected by the data bias            </li>            </ul>        </td>    </tr>    <tr>        <td>研究问题</td>        <td colspan="3">They acquire images on a <b>rotatable platform</b> under a static environment light, then jointly reconstruct environment light, isotropic reflectance, and shapes</td>    </tr>    <tr>        <td rowspan="2">方法</td>        <td>核心模块</td>        <td colspan="3">            <ul>                <li>Light initialization from boundaries</li>                <li>Shape, material, shadow models</li>                <li>Interval sampling to reduce computational costs</li>                <li>Shrinking range computing to improve convergence</li>            </ul>        </td>    </tr>    <tr>        <td>方法借鉴</td>        <td colspan="3">Get light priors by setup rather than deep learning</td>    </tr>    <tr>        <td rowspan="3">实验</td>        <td>数据集</td>        <td colspan="3">            <ul>                <li>Render the synthetic dataset in Blender</li>                <li>They set up their spin light capture system to collect real data under indoor and outdoor scenes</li>            </ul>        </td>    </tr>    <tr>        <td>对比方法</td>        <td colspan="3">            <ul>                <li>2019_ICCV_Variational uncalibrated photometric stereo under general lighting</li>                <li>2022_CVPR_Universal photometric stereo network using global lighting contexts</li>                <li>2023_CVPR_Scalable, detailed and mask-free universal photometric stereo</li>            </ul>        </td>    </tr>    <tr>        <td>主要结果</td>        <td colspan="3">            <ul>                <li>Synthetic dataset: normal estimation, light estimation</li>                <li>Real dataset: normal estimation</li>        </td>    </tr>    <tr>        <td rowspan="2">思考</td>        <td>创新性</td>        <td colspan="3">Get light priors by a novel setup</td>    </tr>        <td>研究启示</td>        <td colspan="3"></td>    <tr>        <td colspan="2">下一步计划</td>        <td colspan="3"></td>    </tr></table>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>给极致戴上理智的枷锁</title>
    <link href="/2024/08/02/%E7%BB%99%E6%9E%81%E8%87%B4%E6%88%B4%E4%B8%8A%E7%90%86%E6%99%BA%E7%9A%84%E6%9E%B7%E9%94%81/"/>
    <url>/2024/08/02/%E7%BB%99%E6%9E%81%E8%87%B4%E6%88%B4%E4%B8%8A%E7%90%86%E6%99%BA%E7%9A%84%E6%9E%B7%E9%94%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-danger">            <p>不懂从什么开始, 我对电脑的<span style="color:yellow">极简</span>操作有一种近乎疯狂的追求. 为平衡 “收益” 与 “成本”, <span style="color:red;font-weight:bold">我决定: 每个月至多用一天, 更新某一个主题的一个细节.</span> 对于没有及时实现的想法, 将会 “记录在案”, 由时间决定其最终的形式.</p>          </div><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><ul><li>2025-04-14<ul><li>显示屏窗口自定义</li><li>窗口置顶</li></ul></li></ul><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><h1 id="AutoHotKey"><a href="#AutoHotKey" class="headerlink" title="AutoHotKey"></a>AutoHotKey</h1><h2 id="知云文献翻译"><a href="#知云文献翻译" class="headerlink" title="知云文献翻译"></a>知云文献翻译</h2><ul><li>Nomal 模式<ul><li>2024-08-02 u: 执行撤消操作</li></ul></li></ul><h1 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h1><h2 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h2><h2 id="IdeaVim"><a href="#IdeaVim" class="headerlink" title="IdeaVim"></a>IdeaVim</h2><h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><ul><li>2024-08-02<ul><li>科研板块总结两字添加 “文献阅读” 超链接</li><li>将论文阅读笔记模板封装成一个标签</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NumPy notes</title>
    <link href="/2024/07/31/Numpy-notes/"/>
    <url>/2024/07/31/Numpy-notes/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://numpy.org/doc/stable/user/whatisnumpy.html">官方英文</a></li><li><a href="https://numpy.org.cn/user/">中文文档</a></li></ul><h1 id="时间节点"><a href="#时间节点" class="headerlink" title="时间节点"></a>时间节点</h1><ul><li>From 2024-07-31 to ?</li></ul><h1 id="NumPy-介绍"><a href="#NumPy-介绍" class="headerlink" title="NumPy 介绍"></a>NumPy 介绍</h1><ul><li>ndarray: N-dimensional array</li></ul><h1 id="快速入门教程"><a href="#快速入门教程" class="headerlink" title="快速入门教程"></a>快速入门教程</h1><ul><li>花式索引与索引技巧部分较难理解</li></ul><h1 id="NumPy-基础知识"><a href="#NumPy-基础知识" class="headerlink" title="NumPy 基础知识"></a>NumPy 基础知识</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><ul><li>np.array: 将 Python 中 array-like 结构的数值转换为 ndarray</li><li>np.zeros&#x2F;np.ones: 创建全 0&#x2F;1 ndarray</li><li>np.arange&#x2F;np.linspace: 创建等间隔分布的 ndarray</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>数组索引返回的是原始数据的副本而不是切片获取的视图</li><li>在程序中处理可变数量的索引<ul><li>Python slice() 函数指定切片</li><li>使用 Elipsis 指定省略号</li></ul></li></ul><h2 id="Brodcasting"><a href="#Brodcasting" class="headerlink" title="Brodcasting"></a>Brodcasting</h2><ul><li>一般广播规则: 从<strong>最后一个轴</strong>的尺寸开始比较, 依次向前<ul><li>尺寸相等</li><li>其中一个是 1, 取大尺寸</li></ul></li></ul><h2 id="结构化数组"><a href="#结构化数组" class="headerlink" title="结构化数组"></a>结构化数组</h2><ul><li>数据类型由一系列命名字段组织的简单数据类型组成, 类似于 C 语言中的<code>结构</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闻道有先后</title>
    <link href="/2024/07/27/%E9%97%BB%E9%81%93%E6%9C%89%E5%85%88%E5%90%8E/"/>
    <url>/2024/07/27/%E9%97%BB%E9%81%93%E6%9C%89%E5%85%88%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Computer-graphics-and-computer-vision"><a href="#Computer-graphics-and-computer-vision" class="headerlink" title="Computer graphics and computer vision"></a>Computer graphics and computer vision</h1><ul><li><a href="https://apchenstu.github.io/">Anpei Chen (陈安沛)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>科研技能与资源</title>
    <link href="/2024/07/27/%E7%A7%91%E7%A0%94%E6%8A%80%E8%83%BD%E4%B8%8E%E8%B5%84%E6%BA%90/"/>
    <url>/2024/07/27/%E7%A7%91%E7%A0%94%E6%8A%80%E8%83%BD%E4%B8%8E%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h1><ul><li>如何判断 arXiv 上的文章是否已经发表?<ul><li>通过 PDF 文件内的注释</li><li>通过 arXiv 页面的 “Comments” 提示</li><li>通过 arXiv 页面的 “Submission history” 的说明</li><li>通过 arXiv 页面提供的 DOI, 访问 <a href="https://dx.doi.org/">resolve doi</a>&#x2F;<a href="https://scholar.google.com/">Google Scholar</a>&#x2F;<a href="https://search.crossref.org/">CrossRef</a> 查找</li></ul></li></ul><h1 id="文献阅读与写作"><a href="#文献阅读与写作" class="headerlink" title="文献阅读与写作"></a>文献阅读与写作</h1><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ul><li>每天查看最新文章 (研究进展)</li><li>论文的阅读, 可<strong>参考</strong>知乎&#x2F;CSDN 相关解说文章 (成为一种习惯)<ul><li><a href="https://blog.csdn.net/nav/advanced-technology/paper-reading?utm_source=csdn_ai_ada_blog_reply">CSDN 论文阅读专栏</a></li></ul></li><li>BRDF 模型<ul><li>Physically Based Shading at Disney (2012)</li></ul></li><li>(开创性) 方法原理的文章多读, 并要非常熟悉, 甚至能复现代码<ul><li>NeRF</li><li>NeuS</li><li>TensorRF</li><li>3D Gaussian</li><li>Nvdiffrecmc (渲染过程)<ul><li>Shape, Light, and Material Decomposition from Images using Monte Carlo Rendering and Denoising</li><li>Extracting Triangular 3D Models, Materials, and Lighting From Images</li></ul></li></ul></li><li>写得好的文章多读, 并模仿与写作与表述 (尤其图表, 排版)</li><li>读完论文之后写总结收获 → Blog</li></ul>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>年轻人, 你真的很渴望成功吗?</title>
    <link href="/2024/07/17/%E5%B9%B4%E8%BD%BB%E4%BA%BA-%E4%BD%A0%E7%9C%9F%E7%9A%84%E5%BE%88%E6%B8%B4%E6%9C%9B%E6%88%90%E5%8A%9F%E5%90%97/"/>
    <url>/2024/07/17/%E5%B9%B4%E8%BD%BB%E4%BA%BA-%E4%BD%A0%E7%9C%9F%E7%9A%84%E5%BE%88%E6%B8%B4%E6%9C%9B%E6%88%90%E5%8A%9F%E5%90%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><span style="color:red;font-weight:bold">如果你真的很渴望成功, 那么请问: </span></p><ul><li>你所做的每件事都是朝着目标前进吗?</li><li>你的每分每秒都用来使自己变得更优秀了吗?</li><li>你的恶习你努力克服了吗?</li></ul><div class="note note-primary">            <p><strong>所以, 你真的很渴望, 很渴望, 很渴望成功吗???</strong></p>          </div>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computer Graphics 学习资源</title>
    <link href="/2024/07/12/Computer-Graphics-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    <url>/2024/07/12/Computer-Graphics-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="物理渲染"><a href="#物理渲染" class="headerlink" title="物理渲染"></a>物理渲染</h1><h2 id="Physically-Based-Rendering-from-Theory-to-Implementation"><a href="#Physically-Based-Rendering-from-Theory-to-Implementation" class="headerlink" title="Physically Based Rendering from Theory to Implementation"></a>Physically Based Rendering from Theory to Implementation</h2><ul><li>官网: <a href="https://www.pbrt.org/">pbrt.org</a></li><li>在线电子书: <a href="https://pbr-book.org/4ed/contents">目录</a></li></ul><h2 id="物理渲染从理论到实现-第2版"><a href="#物理渲染从理论到实现-第2版" class="headerlink" title="物理渲染从理论到实现 (第2版)"></a>物理渲染从理论到实现 (第2版)</h2><ul><li>李秋霞译, 清华大学出版社, 2016.12</li><li><em>已下载电子书</em></li></ul><h2 id="全局光照技术从离线到实时渲染"><a href="#全局光照技术从离线到实时渲染" class="headerlink" title="全局光照技术从离线到实时渲染"></a>全局光照技术从离线到实时渲染</h2><ul><li>秦春林著, 电子科技大学出版社, 2018.4</li><li><em>已下载电子书</em></li></ul><h1 id="实时渲染"><a href="#实时渲染" class="headerlink" title="实时渲染"></a>实时渲染</h1><h2 id="Real-Time-Rendering-3rd-提炼总结"><a href="#Real-Time-Rendering-3rd-提炼总结" class="headerlink" title="Real-Time Rendering 3rd 提炼总结"></a>Real-Time Rendering 3rd 提炼总结</h2><ul><li>毛星云（浅墨） 著, 2018.3</li><li>CSDN 专栏: <a href="https://blog.csdn.net/poem_qianmo/category_9269285.html">https://blog.csdn.net/poem_qianmo/category_9269285.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 那些事儿</title>
    <link href="/2024/07/06/Windows-%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <url>/2024/07/06/Windows-%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="效率提升"><a href="#效率提升" class="headerlink" title="效率提升"></a>效率提升</h1><h2 id="Win-R-运行框"><a href="#Win-R-运行框" class="headerlink" title="Win + R 运行框"></a>Win + R 运行框</h2><p><strong>输入命令后, 按 <code>Ctrl + Shift + Enter</code> 可管理员身份运行</strong></p><p>规律:</p><ul><li><code>.msc</code>: <strong>M</strong>icrosoft <strong>M</strong>anagement <strong>C</strong>onsole (微软管理控制台) 是系统内置的图形化管理工具模块, 通常用于硬件, 服务, 策略等</li><li><code>.cpl</code>: <strong>C</strong>ontrol <strong>P</strong>anel (控制面板项) 是控制面板中的小程序模块, 用于系统设置</li><li>命令所在位置: <code>C:\Windows\System32\</code>, <code>C:\Windows\SysWOW64\</code></li></ul><p><strong>常用:</strong></p><ul><li>sysdm.cpl: 系统属性 (高级设置, 环境变量)</li><li>msconfig: 系统配置</li><li>taskmgr: 任务管理器</li><li>compmgmt: 计算机管理 (整合多个工具)<ul><li>services.msc: 服务管理</li><li>eventvwr.msc: 事件查看器</li><li>taskschd.msc: 任务计划程序</li><li>diskmgmt.msc: 磁盘管理</li><li>devmgmt.msc: 设备管理器 (硬件)</li><li>wf.msc: 防火墙高级设置</li></ul></li><li>control: 控制面板<ul><li><strong>main.cpl: 鼠标属性</strong></li><li>appwiz.cpl: 程序和功能</li><li>ncpa.cpl: 网络连接</li><li>firewall.cpl: 防火墙</li><li>powercfg.cpl: 电源选项</li><li>inetcpl.cpl: 浏览器设置</li></ul></li><li>mstsc: 运程桌面连接</li><li>winver: Windows 版本信息</li><li>dfrgui: 磁盘碎片整理</li><li>cleanmgr: 磁盘清理</li><li>shell:start&#x2F;recent&#x2F;downloads&#x2F;appsfolder: 开启启动&#x2F;最近访问&#x2F;下载&#x2F;所有应用文件夹</li><li>control folders: 文件夹选项</li><li>mspaint: 画图工具</li><li>logoff&#x2F;shutdown &#x2F;l: 注销当前用户并关闭所有程序</li><li>shutdown &#x2F;s &#x2F;t 0[60]: 立即[60 秒后]关机</li><li>shutdown &#x2F;r [&#x2F;f] &#x2F;t 0: [强制]重启</li><li>shutdown &#x2F;h: 休眠</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="Win-组合键"><a href="#Win-组合键" class="headerlink" title="Win 组合键"></a>Win 组合键</h3><ul><li><strong>Win + A: 打开操作中心</strong></li><li>Win + B: 将焦点移动到托盘区域</li><li>Win + S&#x2F;Q: 搜索</li><li>Win + I: 设置</li><li>Win + P: 进行投影</li><li>Win + K: 连接无线显示器</li><li>Win + L: 锁屏</li><li>Win + E: 资源管理器</li><li><strong>Win + D: 显示桌面</strong></li><li>Win + ,: 临时速览桌面</li><li><strong>Win + V: 剪切板</strong></li><li><strong>Win +M: 最小化所有窗口</strong></li><li>Win + Shift + M: 还原桌面上的最小化窗口</li><li>Win + ;&#x2F;.: 打开表情符号面板</li><li>Win + T: 循环浏览任务栏上的应用</li><li>Win + 方向键: 窗口缩放</li><li>Win + X: Win 键菜单</li><li>Win + Pause: 打开 “系统属性” 对话框</li></ul><h3 id="虚拟桌面"><a href="#虚拟桌面" class="headerlink" title="虚拟桌面"></a>虚拟桌面</h3><ul><li><code>Win + Tab</code>: 打开任务视图, 可新建和切换虚拟桌面</li><li><code>Win + Ctrl + D</code>: 创建新的虚拟桌面, 并切换</li><li><code>Win + Ctrl + F4</code>: 删除当前虚拟桌面, 并切换到左侧桌面 (相关窗口会自动转移到左侧桌面)</li><li><code>Win + Ctrl + Left/Right</code>: 切换到相邻左&#x2F;右侧桌面</li></ul><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li><code>F6</code>: 循环浏览窗口或桌面上的屏幕元素</li></ul><h2 id="常用环境变量"><a href="#常用环境变量" class="headerlink" title="常用环境变量"></a>常用环境变量</h2><p>通过 Windows 环境变量可快速访问系统路径或配置信息, 使得在 <code>Win + R</code> 运行窗口和资源管理器地址栏通过 <code>%var_name%</code> 可打开特定<strong>目录</strong> (变量名称不区分大小写)</p><ul><li><code>userprofile</code> or <code>.</code>: 当前用户主目录, <code>C:\Users\user_name</code></li><li><code>appdata</code>: 应用程序数据目录, 常用于软件配置存储,  <code>C:\Users\user_name\AppData\Roaming</code></li><li><code>localappdata</code>: 本地应用程序数据目录, <code>C:\Users\user_name\AppData\Local</code></li><li><code>temp</code>: 临时文件夹路径, 内容呆手动删除, <code>C:\Users\user_name\AppData\Temp</code></li><li><code>programfiles</code>, <code>programfiles(x86)</code>: 64 位, 32 位程序的默认安装目录, <code>C:\Program Files</code>, <code>C:\Program Files (x86)</code></li><li><code>systemroot</code> or <code>windir</code>: Windows 系统目录, <code>C:\Windows</code></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://blog.csdn.net/qq_42402854/article/details/93162387">Charge8. Win10 CMD命令大全与超好用的快捷键[EB&#x2F;OL]</a><br>[2] <a href="https://cheat-sheet.cn/post/windows-10-cheat-sheet/">Windows 10 快捷键速查表</a></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><h3 id="终端命令-schtasks"><a href="#终端命令-schtasks" class="headerlink" title="终端命令 schtasks"></a>终端命令 <code>schtasks</code></h3><ul><li>立即启动计划的任务: <code>schtasks /rum /tn &lt;taskname&gt;</code></li><li>列出计划在计算机上运行的所有任务: <code>schtasks [/query] [/tn &lt;taskname&gt;]</code></li></ul><h3 id="定时删除特定时间前的文件和文件夹-forfiles"><a href="#定时删除特定时间前的文件和文件夹-forfiles" class="headerlink" title="定时删除特定时间前的文件和文件夹 forfiles"></a>定时删除特定时间前的文件和文件夹 <code>forfiles</code></h3><ul><li>(CMD 下) 查看 <code>forfiles</code> 帮助信息: <code>forfiles /?</code></li><li>(CMD 下) 查看 <code>rmdir</code> 和 <code>del</code> 帮助信息: <code>help cmd</code></li><li>创建 <code>.bat</code> 脚本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs commonlisp">@echo off<br>set del_dir=T:\root\Temp\AUTO_DEL <br>set day_ago=3<br><br>:: 删除三天以前的文件<br>ForFiles /p %del_dir% /s /d -%day_ago% /c &quot;cmd /c if @isdir==TRUE (rmdir /q /s @path) else (del /q @path)&quot; 2&gt;nul<br></code></pre></td></tr></table></figure></li><li>创建定时任务, 使用 <code>SYSTEM</code> 帐户执行, <strong>可实现隐藏 cmd 窗口</strong></li></ul><h2 id="SSH-服务"><a href="#SSH-服务" class="headerlink" title="SSH 服务"></a>SSH 服务</h2><ol><li>首先在服务端电脑上安装 SSH 服务器: <code>设置</code> → <code>应用</code> → <code>可选功能</code> → <code>添加可选功能</code> →  <code>OpenSSH 服务器</code></li><li>配置 SSH 服务器, 配置文件: <code>C:\ProgramData\ssh\sshd_config</code> (更多配置参见 <a href="/ssh/#%E9%85%8D%E7%BD%AE-1">SSH 服务端配置</a>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 可用密钥登陆</span><br>PubkeyAuthentication <span class="hljs-built_in">yes</span><br><span class="hljs-comment"># 对于标准用户</span><br>将客户端生成的公钥内容写入 C:\Users\username\.ssh\authorized_keys 文件<br><span class="hljs-comment"># 对于管理用户</span><br>将客户端生成的公钥内容写入 C:\ProgramData\ssh\administrators_authorized_keys 文件<br></code></pre></td></tr></table></figure></li><li>启动 SSH 服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方法一: Win + R 打开运行窗口 → 输入 services.msc (或者直接在 Windows 搜索框输入 services) → 找到 OpenSSH SSH Server, 右键启动或者重新启动</span><br><span class="hljs-comment"># 方法二: 以管理员身份打开 WindowsTerminal, 运行命令 net [re]start sshd 即可启动 SSH 服务 (停止: net stop sshd)</span><br></code></pre></td></tr></table></figure></li><li>在客户端电脑上安装 SSH <strong>客户端</strong>: 过程类似第一步</li><li>在客户端生成私钥和公钥, 并将公钥内容复制到服务端电脑对应文件中, 参见第 2 步</li><li>打开 <code>WindowsTerminal</code>, 使用命令 <code>ssh user@ip_addr</code>, 根据提示使用密码或者密钥登陆</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/schtasks">Windows Sever schtasks 命令</a><br>[2] <a href="https://www.cnblogs.com/widows/p/13328291.html">第八种格调的男人. Windows 配置定时任务 和任务无法执行原因分析. 博客园</a><br>[3] <a href="https://blog.csdn.net/macwhirr123/article/details/105148443">tyasdxx. Windows forfiles命令删除N天前文件&amp;文件夹. CSDN</a><br>[4] <a href="https://blog.csdn.net/qq_39188306/article/details/88689224">IT-Andy. windows执行计划任务 隐藏弹窗cmd命令解决办法. CSDN</a><br>[5] <a href="https://blog.csdn.net/duke_ding2/article/details/135662761?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-3-135662761-blog-90080815.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-3-135662761-blog-90080815.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=4">蓝黑2020. Windows11开启SSH服务. CSDN</a><br>[6] <a href="https://blog.csdn.net/pariese/article/details/111604340">Mr.亮先生. Windows 10 开启ssh服务. CSDN</a><br>[7] <a href="https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_keymanagement">OpenSSH for Windows 中基于密钥的身份验证. Microsoft.learn</a></p><h1 id="跨电脑文件传输"><a href="#跨电脑文件传输" class="headerlink" title="跨电脑文件传输"></a>跨电脑文件传输</h1><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>师门有一台专门用于开组会的笔记本, 每次开组会或者组会上都要用 U 盘拷贝汇报文件, 感觉不太方便. 早些时候, 我利用 Windows 的 <em>nearby sharing</em> 功能, 每次都要打开&#x2F;关闭, 不仅速度较慢, 而且对传输距离有要求, 最终弃用了. 于是, 想到校园内大家同在一个大的局域网内, 可以利用 <em>Windows FTP</em> 服务. 即将开组会的笔记本作为服务器, 创建一个用户, 小组成员通过该用户向服务器上传文件. </p><h2 id="FTP-服务"><a href="#FTP-服务" class="headerlink" title="FTP 服务"></a>FTP 服务</h2><p><em>2024-06-30 在师门笔记本上配置成功过, 但其中有些问题没有想清楚 (关于防火墙), 最后能成功感觉有点 “玄学”… 所以, 仅将在此过程参考的几个文章标记一下, 方便后期查阅</em></p><ul><li><a href="https://blog.csdn.net/weixin_46081669/article/details/114037504">年轻秃了头. https://blog.csdn.net/weixin_46081669&#x2F;article&#x2F;details&#x2F;114037504. CSDN</a></li><li><a href="Windows%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B"><em>翊墨</em>. https://blog.csdn.net/weixin_46081669&#x2F;article&#x2F;details&#x2F;114037504. CSDN</a></li><li><a href="https://blog.csdn.net/Alex_81D/article/details/135296467">Alex_81D. 超详情的Windows搭建FTP服务器教程-（老奶奶来了也能搭好）.CSDN</a></li></ul><h2 id="服务器-samba"><a href="#服务器-samba" class="headerlink" title="服务器 samba"></a>服务器 samba</h2><h3 id="服务器安装与配置-samba"><a href="#服务器安装与配置-samba" class="headerlink" title="服务器安装与配置 samba"></a>服务器安装与配置 samba</h3><ul><li>安装 <code>samba</code>: <code>sudo apt update &amp;&amp; sudo apt install samba</code></li><li>配置共享目录: <code>sudo vim /etc/samba/smb.conf</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[share_folder_name]<br>   path = /path/to/share<br>   valid <span class="hljs-built_in">users</span> = username<br>   <span class="hljs-built_in">read</span> only = no<br>   <span class="hljs-comment"># browseable = yes</span><br></code></pre></td></tr></table></figure></li><li>设置 samba 用户密码 <code>sudo smbpasswd -a username</code> (username 必须是系统用户)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重置密码</span><br>sudo smbpasswd username<br><span class="hljs-comment"># 删除帐户</span><br>sudo smbpasswd -x username<br><span class="hljs-comment"># 列出所有用户</span><br>sudo pdbedit -L [-v]<br></code></pre></td></tr></table></figure></li><li>重启 samba 服务: <code>sudo systemctl restart smbd</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置语法检查</span><br>testparm [-s]<br><span class="hljs-comment"># 查看状态</span><br>sudo systemctl status smbd<br><span class="hljs-comment"># 开机启动</span><br>sudo systemctl <span class="hljs-built_in">enable</span> smbd<br></code></pre></td></tr></table></figure></li></ul><h3 id="Windows-上-访问-samba-共享"><a href="#Windows-上-访问-samba-共享" class="headerlink" title="Windows 上 访问 samba 共享"></a>Windows 上 访问 samba 共享</h3><ul><li><code>资源管理器</code> → <code>Computer</code> → <code>映射网络驱动器 | 增加一个网络位置</code> → 在<strong>文件夹</strong>输入框填写 <code>\\&lt;hostname&gt;\share_folder_name</code> → 输入配置的 samba 用户名和密码</li></ul><h2 id="客户端-SSHFS"><a href="#客户端-SSHFS" class="headerlink" title="客户端 SSHFS"></a>客户端 SSHFS</h2><ul><li>安装 SSHFS 客户端: <a href="https://github.com/winfsp/winfsp">WinFsp</a> + <a href="https://github.com/winfsp/sshfs-win?tab=readme-ov-file">SSHFS-Win</a></li><li>挂载远程目录: <code>资源管理器</code> → <code>Computer</code> → <code>映射网络驱动器</code> → 在<strong>文件夹</strong>输入框填写 <code>\\sshfs|sshsfs_r\&lt;username&gt;@&lt;host_ip&gt;[!port]\&lt;remote_path&gt;</code></li><li>查看域名的 <strong>ip</strong>: <code>ping/nslookup hostname</code></li></ul><h2 id="客户端网络位置管理"><a href="#客户端网络位置管理" class="headerlink" title="客户端网络位置管理"></a>客户端网络位置管理</h2><ul><li><code>net use</code>: 查看</li><li><code>net use &lt;Remote|map_drive:&gt; /delete</code>: 断开连接&#x2F;挂载 (要在资源管理器中彻底删除图标, 可能要重启资源管理器并结束和 sshfs 有关的任务)</li></ul><h1 id="电脑配置"><a href="#电脑配置" class="headerlink" title="电脑配置"></a>电脑配置</h1><h2 id="Win-10-资源管理器多标签"><a href="#Win-10-资源管理器多标签" class="headerlink" title="Win 10 资源管理器多标签"></a>Win 10 资源管理器多标签</h2><ul><li><a href="https://github.com/indiff/qttabbar">QTTabBar</a></li></ul><h2 id="WindowsTermimal"><a href="#WindowsTermimal" class="headerlink" title="WindowsTermimal"></a>WindowsTermimal</h2><p>快速打开一个 WindowsTerminal 窗口, 并以特定目录为工作目录</p><p><code>右键: 新建快键方式</code> → <code>输入命令: wt.exe -d &quot;path_to_dir&quot;</code> → <code>下一步</code> → <code>命名</code> → <code>完成</code></p><ul><li>移动到一个快速启动的目录 (<code>PATH</code> 变量的一个路径), 可用 <code>Win + R</code> 运行</li><li>可右键属性, 自定义快键方式图标</li></ul><p>关闭输入错误提示声: <code>打开 WindowsTerminal 窗口</code> → <code>设置</code> → <code>Default</code> → <code>Advanced</code> → <code>Bell notification style 取消所有方框</code> → <code>保存</code></p><h2 id="禁用-Win-开头的快捷捷"><a href="#禁用-Win-开头的快捷捷" class="headerlink" title="禁用 Win 开头的快捷捷"></a>禁用 Win 开头的快捷捷</h2><ol><li>打开注册表</li><li>导航到 <code>Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced</code></li><li>右键 <code>Advanced</code>, 新建字符串值 <code>DisabledHotkeys</code></li><li>修改值为对应想禁用的键, 比如禁用 <code>Win + H</code>, 则写入 <code>H</code> 即可</li><li><strong>在任务管理器中重启 Explorer.exe 以生效</strong></li></ol><h2 id="配置锁屏后屏幕关闭时间"><a href="#配置锁屏后屏幕关闭时间" class="headerlink" title="配置锁屏后屏幕关闭时间"></a>配置锁屏后屏幕关闭时间</h2><ol><li>打开注册表编辑器, 导航到 <code>Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power\PowerSettings\7516b95f-f776-4464-8c53-06167f40cc99\8EC4B3A5-6868-48c2-BE75-4F3044BE88A7</code></li><li>将右侧 <code>Atributes</code> 值由 <code>1</code> 改为 <code>2</code></li></ol><p><em>注: 若已修改过, 可直接跳到步骤 <strong>3</strong></em><br>3. 打开控制面权, 依次导航 <code>Hardware and Sound</code> $\rightarrow$ <code>power options</code> $\rightarrow$ <code>change plan settings</code> $\rightarrow$ <code>change advanced power settings</code> $\rightarrow$ <code>Display</code> $\rightarrow$ <code>console lock display off timeout</code>, 然后设置充电和非充电时 (锁屏后) 熄屏时间</p><h2 id="Win-11-使用经典记事本"><a href="#Win-11-使用经典记事本" class="headerlink" title="Win 11 使用经典记事本"></a>Win 11 使用经典记事本</h2><p><strong>修改注册表</strong></p><h2 id="Win-关闭系统图标"><a href="#Win-关闭系统图标" class="headerlink" title="Win 关闭系统图标"></a>Win 关闭系统图标</h2><p><code>控制面板</code> $\rightarrow$ <code>view by Small icons</code> $\rightarrow$ <code>Notification Area Icons</code> $\rightarrow$ <code>Turn system icons on or off</code></p><h2 id="删除-隐藏资源管理器-视频-图片-…"><a href="#删除-隐藏资源管理器-视频-图片-…" class="headerlink" title="删除&#x2F;隐藏资源管理器 视频, 图片, …"></a>删除&#x2F;隐藏资源管理器 视频, 图片, …</h2><p><strong>定位到注册表: <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions</code></strong>, 找到文件夹对应的项, 将 <code>ThisPCPolicy</code> 字符串的值改为 <code>Hide</code></p><h2 id="Win-11-关闭资源管理器左侧的图库按钮"><a href="#Win-11-关闭资源管理器左侧的图库按钮" class="headerlink" title="Win 11 关闭资源管理器左侧的图库按钮"></a>Win 11 关闭资源管理器左侧的图库按钮</h2><p><strong>定位到注册表: <code>HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;E88865EA-0E1C-4E20-9AA6-EDCD0212C87C&#125;</code></strong>, 修改该项下的 <code>System.IsPinnedToNameSpaceTree</code> 值为 <code>0 (隐藏), 1 (显示)</code></p><h2 id="管理-Win-11-开机启动项"><a href="#管理-Win-11-开机启动项" class="headerlink" title="管理 Win 11 开机启动项"></a>管理 Win 11 开机启动项</h2><ul><li>查看自启的应用<ul><li>打开 <code>Windows 设置</code> → 应用 → 启动 (或直接在 <code>搜索框</code> 输入 <code>启动</code></li><li>任务管理器 → 启动</li></ul></li><li>添加自定义启动程序 (<em>上面自启应用的来源</em>)<ul><li>通过特定资源管理器目录将需要启动的软件快捷方式复制到该目录下即可<ol><li>所有用户: <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code> </li><li>特定用户: <code>C:\Users\user_name\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code> 或 <code>Win + R</code> → <code>shell:startup</code></li></ol></li><li>通过注册表添加:<ol><li>所有用户: <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code></li><li>当前用户: <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code></li></ol></li></ul></li></ul><h2 id="资源管理器右键菜单管理"><a href="#资源管理器右键菜单管理" class="headerlink" title="资源管理器右键菜单管理"></a>资源管理器右键菜单管理</h2><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul><li><a href="https://github.com/BluePointLilac/ContextMenuManager">ContextMenuManager</a></li><li><a href="https://blog.csdn.net/KaiKaiaiq/article/details/112347027">RightMenuMGR</a></li></ul><h3 id="Win-11-右键菜单关闭显示更多"><a href="#Win-11-右键菜单关闭显示更多" class="headerlink" title="Win 11 右键菜单关闭显示更多"></a>Win 11 右键菜单关闭<code>显示更多</code></h3><h3 id="右键菜单添加自定义命令"><a href="#右键菜单添加自定义命令" class="headerlink" title="右键菜单添加自定义命令"></a>右键菜单添加自定义命令</h3><ul><li><a href="https://blog.csdn.net/Mrceel/article/details/107459678">参考1</a></li><li><a href="https://blog.csdn.net/weixin_30656145/article/details/97092402#:~:text=%E5%9C%A8Windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E9%A1%B9%201%20%E6%89%93%E5%BC%80%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%8C%E5%B1%95%E5%BC%80%20HKEY_CLASSES_ROOT%20-%3E%20*%20-%3E%20shell,%E6%96%B0%E5%BB%BA%20-%3E%20%E9%A1%B9%20%EF%BC%8C%E8%BE%93%E5%85%A5%E9%A1%B9%E5%90%8D%E7%A7%B0%20Command%20%EF%BC%88%E5%BF%85%E9%A1%BB%E4%B8%BA%E6%AD%A4%E5%90%8D%E7%A7%B0%EF%BC%89%EF%BC%8C%E5%9B%9E%E8%BD%A6%E7%A1%AE%E5%AE%9A%EF%BC%9B%20More%20items">参考2</a></li></ul><h3 id="Win-11-右键菜单新建菜单删除-bmp"><a href="#Win-11-右键菜单新建菜单删除-bmp" class="headerlink" title="Win 11 右键菜单新建菜单删除 .bmp"></a>Win 11 右键菜单新建菜单删除 <code>.bmp</code></h3><ul><li><a href="https://www.cnblogs.com/live41/p/18214635">Clotho. Windows 11删除右键菜单的新建菜单的bmp图像(Bitmap image). 博客园</a></li></ul><h3 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h3><p>[1] <a href="https://blog.csdn.net/smartinzhou/article/details/128038357">smartinzhou. Windows 禁用指定键盘快捷组合键. CSDN</a><br>[2] <a href="https://www.sysgeek.cn/disable-windows-keyboard-shortcut/">Windows如何禁用部分特定或全部键盘快捷键. 系统极客</a><br>[3] <a href="https://jingyan.baidu.com/article/a17d52851297e18099c8f270.html">Win10锁屏之后屏幕自动关闭怎么办. 百度经验</a><br>[4] <a href="https://www.winhelponline.com/blog/restore-old-classic-notepad-windows/">How to Restore Old Classic Notepad in Windows 11</a><br>[<strong>5</strong>] <a href="https://blog.csdn.net/qq_42558430/article/details/106148840"><strong>方冬_肖. Windows 任务计划不运行 &amp;&amp; 任务计划只运行一次 &amp;&amp; 手动运行任务计划正常 &amp;&amp; 任务计划没有按触发器设定自动运行. CSDN</strong></a><br>[6] <a href="http://xiuchufang.com/JC/22116.html">Win 11 系统之家. 关闭Win11右下角图标的方法(不是隐藏)</a><br>[7] <a href="https://blog.csdn.net/xuwenze1991/article/details/87394105">xuwenze1991. Win10 删除&#x2F;隐藏 文件资源管理器 视频、图片、文档、下载、音乐、桌面、3D对象. CSDN</a><br>[8] <a href="https://www.landiannews.com/archives/101273.html">山外的鸭子哥. 修改注册表删除Windows 11资源管理器左侧中的图库按钮. 蓝点网</a><br>[9] <a href="https://blog.csdn.net/qq_43530326/article/details/128142653#:~:text=%E5%A6%82%E6%9E%9C%E8%A6%81%E7%A6%81%E7%94%A8Win11%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%B8%AD%E7%9A%84%E6%98%BE%E7%A4%BA%E6%9B%B4%E5%A4%9A%E9%80%89%E9%A1%B9%EF%BC%8C%E9%82%A3%E4%B9%88%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E5%85%88%E5%B0%9D%E8%AF%95%E6%9B%B4%E6%94%B9%E2%80%9C%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E2%80%9D%E9%80%89%E9%A1%B9%EF%BC%8C%E5%8F%A6%E5%A4%96%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E7%82%B9%E6%98%AF%EF%BC%8C%E6%AD%A4%E6%96%B9%E6%B3%95%E8%BF%98%E4%BC%9A%E5%90%8C%E6%97%B6%E5%B0%86%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E8%BF%98%E5%8E%9F%E5%88%B0%E6%97%A7%E7%9A%84Win10%E6%A0%B7%E5%BC%8F%E3%80%82,%E6%AD%A5%E9%AA%A41%E3%80%81%E6%8C%89Win%2BE%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%8C%E5%8D%95%E5%87%BB%E4%B8%8A%E6%96%B9%E7%9A%84%E2%80%9C%E6%9F%A5%E7%9C%8B%E2%80%9D%E9%80%89%E9%A1%B9%E5%B9%B6%E5%9C%A8%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E4%B8%AD%E7%82%B9%E5%87%BB%E2%80%9C%E9%80%89%E9%A1%B9%E2%80%9D%E6%8C%89%E9%92%AE%E3%80%82">司徒小夜. win11 右键关闭显示更多选项 修改右键菜单. CSDN</a><br>[10] <a href="https://zhuanlan.zhihu.com/p/446430778">泳者. 管理Win10开机启动项. 知乎</a></p><h1 id="TroubleShotting"><a href="#TroubleShotting" class="headerlink" title="TroubleShotting"></a>TroubleShotting</h1><h2 id="System-exception-端口已被占用"><a href="#System-exception-端口已被占用" class="headerlink" title="System exception 端口已被占用"></a>System exception 端口已被占用</h2><p><strong>Step 1:</strong> 打开 cmd<br><strong>Step 2:</strong> 输入 <code>netstat -aon | findstr &quot;1080&quot; </code>查看占用端口 <em>1080</em> 的进程 <strong>PID</strong><br><strong>Step 3:</strong> 输入 <code>tasklist | findstr pid_str</code>  查看 <em>pid_str</em> 所对应的程序<br><strong>Step 4:</strong> 在任务管理器中寻找程序并停用</p><h2 id="Windows-键失灵"><a href="#Windows-键失灵" class="headerlink" title="Windows 键失灵"></a>Windows 键失灵</h2><ul><li>按 <code>Fn + Win</code> 进行切换</li></ul><h2 id="启动-CMD-提示-“The-system-cannot-find-the-path-specified”"><a href="#启动-CMD-提示-“The-system-cannot-find-the-path-specified”" class="headerlink" title="启动 CMD 提示 “The system cannot find the path specified”"></a>启动 CMD 提示 “The system cannot find the path specified”</h2><ul><li>运行 PowerShell 命令, 检查 <code>PATH</code> 环境变量中所有路径是否存在: <code>@($env:path -split &quot;;&quot;).ForEach(&#123; if($_) &#123;$result = &#39;MISSING |&#39;;if(Test-Path -path $_) &#123; $result = &#39;     OK |&#39;&#125;;-join($result, &#39; &#39;, $_); &#125;&#125;)</code></li><li>检查注册表位置 <em><code>Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor</code></em> 和 <code>Computer\HKEY_CURRENT_USER\Software\Microsoft\Command Processor</code> 下的 <strong><code>autorun</code></strong> 中的路径是否正确</li></ul><h2 id="磁盘修复"><a href="#磁盘修复" class="headerlink" title="磁盘修复"></a>磁盘修复</h2><h2 id="资源管理器无法使用预览功能"><a href="#资源管理器无法使用预览功能" class="headerlink" title="资源管理器无法使用预览功能"></a>资源管理器无法使用预览功能</h2><h2 id="Ping-不通-GitHub-com"><a href="#Ping-不通-GitHub-com" class="headerlink" title="Ping 不通 GitHub.com"></a>Ping 不通 GitHub.com</h2><ul><li>以管理员身份运行 <code>cmd</code>, 然后在终端输入 <code>cd C:\Windows\System32\drivers\etc</code> 进入 <code>hosts</code> 文件所在目录</li><li>输入 <code>vim hosts</code> 在文件结尾处添加 (或修改) 下面的几行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Added for GitHub</span><br>140.82.114.3 github.com<br>199.232.69.194 github.global.ssl.fastly.net<br></code></pre></td></tr></table></figure><strong>注:</strong> 对应的 <strong>ip 地址</strong> 可通过 <a href="https://www.ipaddress.com/ip-lookup">IP Lookup</a> 进行查询</li></ul><h2 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://www.technewstoday.com/the-system-cannot-find-the-path-specified/">ABHISHEK SILWAL. 11 Ways to Fix “The System Cannot Find The Path Specified” Error</a><br>[2] <a href="https://www.coder.work/article/7505935">如何修复Windows 10上的 ‘The system cannot find the path specified’ 错误？</a><br>[3] <a href="https://blog.csdn.net/qq_41675812/article/details/114781465">且陶陶º. GitHub.com连接超时问题的解决. CSDN</a><br>[4] <a href="https://www.partitionwizard.com/partitionmagic/the-device-deviceharddisk0dr0-has-a-bad-block.html">Solved: the Device DeviceHarddisk0DR0 has a Bad Block</a><br>[5] <a href="https://www.disktool.cn/content-center/command-prompt-check-disk-6540.html">在Windows中使用磁盘修复命令CHKDSK检查并修复磁盘错误</a><br>[6] <a href="https://blog.csdn.net/Zou_XX/article/details/148345201?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Ctr-1-148345201-blog-135354538.235%5Ev43%5Econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Ctr-1-148345201-blog-135354538.235%5Ev43%5Econtrol&utm_relevant_index=2">真的是小恐龙吗？彻底解决Win11文件资源管理器预览窗格无法预览问题. CSDN</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Step by Step</title>
    <link href="/2024/06/30/Step-by-step/"/>
    <url>/2024/06/30/Step-by-step/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我想我找到了一把做事的万能钥匙: 每次只前进一点, 但保证这一点的 “平稳” 与 “保障” 性</p><p>以写程序为例, 当我有一个想法时, 我早些时候, 通常是参考源代码, “一次性” 实现自己的想法. 这样的做法带来的结果是: 改动之处往往较大, 当程序的运行结果与所想不一致时, 需要验证想法各个部分的正确性. 但单独验证其中一个部分,往往较难, 因为此时程序已经构成一个整体, 给验证增加了难度, 我通常只能 “从头到尾” 读一遍程序, 通常很难找到问题所在, 以致无法确定是想法本身的问题还是程序实现的问题. </p><p>经过一系列的尝试, 我发现在实现想法的过程中, 如果能首先将想法与 “参考想法” 进行比较, 并将参考想法作为 STEP 0, 将自己的想法拆解, 分为若个步骤, 一点一点加至 “参考想法”, 那么在跑通 “参考想法” 的源代码之后, 由于每一步的想法相较上一步的想法变动不是太大, 那么程序的改动也应该不是太大, 从而程序的正确性得到保障, 进而可验证想法的正确性.  </p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>决定你是谁的最强大因素来自你的内心</title>
    <link href="/2024/06/29/%E5%86%B3%E5%AE%9A%E4%BD%A0%E6%98%AF%E8%B0%81%E7%9A%84%E6%9C%80%E5%BC%BA%E5%A4%A7%E5%9B%A0%E7%B4%A0%E6%9D%A5%E8%87%AA%E4%BD%A0%E7%9A%84%E5%86%85%E5%BF%83/"/>
    <url>/2024/06/29/%E5%86%B3%E5%AE%9A%E4%BD%A0%E6%98%AF%E8%B0%81%E7%9A%84%E6%9C%80%E5%BC%BA%E5%A4%A7%E5%9B%A0%E7%B4%A0%E6%9D%A5%E8%87%AA%E4%BD%A0%E7%9A%84%E5%86%85%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-success">            <p>“你千万别这样想,” 克里博士提高声音说, “你不是愚人金 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="黄铁矿, 即看似黄金的物质">[1]</span></a></sup>, 只在特定的光线下才发光. 无论你成为谁, 无论你把自己变成了什么, 那就是你本来的样子. 它一直在你心中. 不是在剑桥, 而是在你心中. 你就是黄金. 回到杨百翰大学, 甚至回到你家乡的那座山, 都不会改变你是谁. 那可能会改变别人对你的看法, 甚至也会改变你对自己的看法——<strong>即使是黄金, 在某些光线下也会显得晦暗——但那只是错觉. 金子一直是金子.</strong>“</p><p style="text-align:right"><i>——你当像鸟飞往你的山</i></p>          </div><p>最近在读<em>你当像鸟飞往你的山</em>, 女主人公塔拉为摆脱原生家庭的影响, 一路披荆斩棘… 读到这一段时, 联想自己的经历, 我很庆幸我拥有一个相对作者好太多的原生家庭, 但求学至今, 我发现自己在<span style="color:red;font-weight:bold">自卑, 不配感</span>方面与作者有相似之处. 原生家庭是塔拉飞往自己大山的障碍, 而求学经历, 尤其是高中三年, 造就了我飞往自己大山的障碍——<strong>自信心的丢失</strong>. <strong>我到底是愚人金还是真金?</strong></p><div class="note note-primary">            <p>我将会回忆自己从小学到现在 20 年左右的求学经历, 通过事实找到愚人金还是真金的答案. 但博士时间较紧张, 也不知道什么时候能写完?</p><p>目前脑中的结论: 我当像鸟飞往我的山, 没有任何人或者事可以定义我, 除了我自己</p>          </div><h1 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h1><ul><li>困难之事逃避, 退缩, 一拖再拖 (没有开始的勇气)</li><li>沉湎于过去, 无法及时止损</li></ul><h1 id="小学"><a href="#小学" class="headerlink" title="小学"></a>小学</h1><p>小学就读于村里的 <em>安置小学</em>, 距家大约 2 公里, 所以不用寄宿. 基本是早上去学校上课, 中午回家吃饭, 午休后再去学校, 傍晚放学再回家. 我们小学一年级之前有个学前班, 相当于现在的幼儿园. 我应该是 2002 年秋季上的学前班, 当年的 11 月我就 6 岁了, 所以当我上一年级的时候已经是 7 岁了. 求学这么多年, 和大多数同学相比, “老大哥” 可能不敢当, 但通常都是别人的 “大哥”. 由此, 我想到以前下半年出生的小孩, 上学有点 “亏”, 因为如果我 2001 年就上学前班, 那我后面应该基本都是 “小弟” 了, 但 2001 年秋季的时候我还没到 5 岁, 于是一等就是一年, 造成入学时已经基本 6 岁了…</p><p>小学应该是我顔值, 尤其是表情的巅峰时期. 顔值很好理解, 那时候还没机会长青春痘… 至于表情的意思, 我这里主要指的是笑容, 当时的笑容是那么自然与纯真. 小时候, 一位亲戚和我妈妈说的一句话令我至今印象深刻: 苗 (我的乳名), 总是眯笑眯笑的. 而现在, 笑容基本已被皱眉接管…</p><p>至于成绩, 从某个节点开始, 我的成绩基本一直都是班里前三? 具体的时间节点, 有点记不太清了, 可能是三年级, 或者更早, 但绝不会晚于三年级. 可以说, 节点之前, 我对学习没有概念 (或者没开窍). 节点之后, 我学习就较自然, 好像也没怎么用功? 结果成绩就很好. 而促使我在节点前后变化的一个主要事件, 我想是有一回我的假期作业基本没做, 结果马上要开学了. 当时应该是说作业没做完, 不让报名, 具体是不是这样记不清了, 总之就是我非常地慌, 很慌. 于是, 就疯狂地补作业, 颇有后面上大学时的考前复习风范, 还真是 “从小看到大”…但一个人的力量是有限的, 主要是离开学非常非常近, 我感觉来不及了, 整个人有点恍惚. 这时候, 我的姐姐和妈妈帮我 “还了部分账”, 终于在开学的时候完成了假期作业. 当时有个情境, 至今想起仍是清晰无比: 傍晚时分, 天刚 “打麻草” (方言, 就是刚有点变黑), 有些闷热. 我, 妈妈, 姐姐在我家 “晒坝” (农村的露天阳台)上, 合力写我的暑期作业. 我当时站着, 一边看着我的妈妈和姐姐帮我写, 一边在柔手指 (应该是当时写累了, 中途休息下), 脸上一幅囧态与忧虑. 我的妈妈则是一边写作业, 一边语重心长地说:”苗, 以后一定要早点写作业, 不然不让报名啊”. </p><h1 id="中学"><a href="#中学" class="headerlink" title="中学"></a>中学</h1><h1 id="高中"><a href="#高中" class="headerlink" title="高中"></a>高中</h1><h1 id="本科"><a href="#本科" class="headerlink" title="本科"></a>本科</h1><h1 id="硕士"><a href="#硕士" class="headerlink" title="硕士"></a>硕士</h1><h1 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h1><h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>黄铁矿, 即看似黄金的物质<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当你想要某种东西时, 整个宇宙会合力助你实现愿望</title>
    <link href="/2024/06/27/%E5%BD%93%E4%BD%A0%E6%83%B3%E8%A6%81%E6%9F%90%E7%A7%8D%E4%B8%9C%E8%A5%BF%E6%97%B6-%E6%95%B4%E4%B8%AA%E5%AE%87%E5%AE%99%E4%BC%9A%E5%90%88%E5%8A%9B%E5%8A%A9%E4%BD%A0%E5%AE%9E%E7%8E%B0%E6%84%BF%E6%9C%9B/"/>
    <url>/2024/06/27/%E5%BD%93%E4%BD%A0%E6%83%B3%E8%A6%81%E6%9F%90%E7%A7%8D%E4%B8%9C%E8%A5%BF%E6%97%B6-%E6%95%B4%E4%B8%AA%E5%AE%87%E5%AE%99%E4%BC%9A%E5%90%88%E5%8A%9B%E5%8A%A9%E4%BD%A0%E5%AE%9E%E7%8E%B0%E6%84%BF%E6%9C%9B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="通过牧羊少年奇幻之旅-追寻自己的天命"><a href="#通过牧羊少年奇幻之旅-追寻自己的天命" class="headerlink" title="通过牧羊少年奇幻之旅 追寻自己的天命"></a><p style="text-align:center;font-weight:bold;font-size:22px">通过<i>牧羊少年奇幻之旅</i> 追寻自己的天命</p></h1><div class="note note-success">            <p>赶驼人边吃椰枣边对男孩说: “我现在活着. 当我吃东西时, 就只管吃; 当我走路时, 就只管走. 如果必须去打仗, 今天死还是明天死对我都一样. 因为<strong>我既不生活在过去, 也不生活在未来, 我只有现在, 它才是我感兴趣的. 如果你能永远停留在现在, 那你将是最幸福的人.</strong> 你会发现沙漠里有生命, 发现天空中有星星, 发现士兵们打仗是因为战争是人类生活的一部分. 生活就是一个节日, 是一场盛大的庆典. 因为<span style="color:red;font-weight:bold">生活永远是, 也仅仅是我们经历的这一刻.</span>“</p>          </div><div class="note note-primary">            <p>不能莽撞行事, 不能失去<strong>耐心</strong>, 耐心是<strong>科研人</strong>首先要具备的品质. 假如做不到这一点, 将看不到前进道路上的预兆. </p>          </div><div class="note note-success">            <p>“主啊, 我不配劳您进我的家, 但您只要说一句话, 我的奴仆即可得救.” <span style="color:red;font-weight:bold"> → 谦卑与信任 → 只要心中有信仰, 奇迹随时都有可能发生</span><br>“做什么并不重要, 世上每个人都在历史上扮演着重要角色, 但通常懵然不知.”</p>          </div><div class="note note-success">            <p>“不能.” 他听到风对他说, “如果我事先告诉你, 你就看不到金字塔了. 它们很壮美, 不是吗?”</p>          </div><div class="note note-success">            <p>“如果我决定留下呢?”</p><p>“你将会是绿洲的顾问. 你会有足够的黄金去购买很多羊和很多骆驼. 你会跟法蒂玛结婚, 而且<span style="color:red;font-weight:bold">第一年</span>你们会生活得很幸福. 你将会热爱沙漠, 将对那五万棵椰枣树中的每一棵都了如指掌. 你会观察到它们如何生长, 如何展示出一个不断变化的世界. 你还会明白越来越多的预兆, 因为沙漠是所有老师中最好的一个.<br><span style="color:red;font-weight:bold">第二年</span>你会记起那一批财宝. 预兆开始不断地提示你这一点, 而你则极力对那些预兆视而不见. 你只运用你的知识去为绿洲和绿洲居民谋福. 部落头领们会因此而感激你. 你的骆驼将为你带来财富和权力.<br><span style="color:red;font-weight:bold">第三年,</span> 预兆会继续向你提示你那财宝和你的天命. 你会整夜整夜地在绿洲踱来踱去, 而法蒂玛将成为一个忧伤的女人, 因为是她使你中断了前进的道路. 但是你还会爱她, 她也爱你. <span style="color:green;font-weight:bold">你会回想起她从未要求你留下, 因为一个沙漠中的女人知道, 应该等待她的男人.</span> 所以, 你不会怪罪她. 但是, <span style="color:blue;font-weight:bold">你会有许多个夜晚在沙漠里和椰枣树间徘徊, 思考着也许当初应该继续前行,</span> 并更加相信自己对法蒂玛的爱. <span style="font-weight:bold">因为促使你留在绿洲的原因, 是你害怕自己再也不会回来.</span> 到这时, 预兆将告诉你, 你的财宝将会永远被埋在地下.<br><span style="color:red;font-weight:bold">第四年,</span> 预兆将会放弃你, 因为你不再理会它们. 部落头领们将会明白这一点, 而你的顾问一职将被解除. 到那时, 你将成为富商. 拥有很多骆驼和货物. 但是, 你的余生都将在沙漠和椰枣树之间游荡, 你明白自己没有完成天命, 那时再想去做, 已经为时晚矣.<br><span style="color:green;font-weight:bold">你将永远不明白, 爱情从来不会阻止一个男人去追寻天命. 如果会阻止, 一定因为那不是真正的爱情, 不是用宇宙语言表达的爱情.”</p>          </div><h1 id="生命的房子"><a href="#生命的房子" class="headerlink" title="生命的房子"></a><p style="text-align:center;font-weight:bold;font-size:22px;color:red">生命的房子</p></h1><ul><li>跑步 (2 马拉松&#x2F;年)</li><li>阅读 (日均 30 min &amp; 15 min 实践)</li><li>冥想 (日均 20 min)</li><li>写作 (日均 30 min)</li><li>纸牌魔术 (2 页纸牌大学&#x2F;15 min&#x2F;天)</li><li>影视剪辑: PS → PR (一节教程&#x2F;周)</li><li>记忆法 (日均 15 min 梳理记忆 &amp; ?节教程&#x2F;周)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Conda 环境配置</title>
    <link href="/conda/"/>
    <url>/conda/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>参考官网<a href="https://www.anaconda.com/docs/getting-started/miniconda/install">指南</a>, <a href="https://repo.anaconda.com/miniconda/">安装文件下载</a></li><li>自定义安装目录: <code>$programs/miniconda3</code></li><li><code>.zshrc</code> 配置中加入语句: <code>source $programs/miniconda3/etc/profile.d/conda.sh</code></li><li><strong>更新</strong>已有 (快速) 安装: <code>bash Miniconda3-verison-Linux-x86_64.sh -b -u -p /path_to_old_dir</code> (<code>b</code> 非交互式安装, <code>u</code> 更新, <code>p</code> 指定安装路径)</li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>统一格式: <code>conda [操作][目标][参数]</code><ul><li>操作: <code>creat/install/update/remove</code></li><li>目标: <code>-n env_name</code>, <code>pkg_name</code></li></ul></li><li>查看版本: <code>conda --version</code></li><li>查看配置信息: <code>conda info</code> 或 <code>conda config --show</code><ul><li>环境保存位置: <code>conda config --show envs_dirs</code></li><li>缓存目录位置: <code>conda config --show pkgs_dirs</code></li><li>包安装频道 (源): <code>conda config --show channels</code></li></ul></li><li>以指定 channel 安装包: <code>conda install -c specific_channel pkg_name</code></li><li>升级包: <code>conda update pkg_name</code><ul><li>更新 conda: <code>conda update conda</code></li></ul></li><li>卸载包: <code>conda uninstall pkg_name</code></li><li>列出已安装包: <code>conda list</code></li><li>搜索包: <code>conda search pkg_name</code></li><li>清理缓存: <code>conda clean --all</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 命令最后加 --dry-run 表示查看可清理数据</span><br><span class="hljs-comment">## 清理包</span><br>conda clean --packages<br><span class="hljs-comment">## 清理临时文件</span><br>conda clean --tarballs<br><span class="hljs-comment">## 清理索引数据</span><br>conda clean --index-cache<br></code></pre></td></tr></table></figure></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="所有-Shell-生效"><a href="#所有-Shell-生效" class="headerlink" title="所有 Shell 生效"></a>所有 Shell 生效</h3><p>更改 (新建) <code>.condarc</code> 文件</p><ul><li>Windows: <code>C:\Users\user_name</code> 下</li><li>Ubuntu: <code>$Home</code> 下</li></ul><h4 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h4><ul><li>删除某项配置: <code>conda config --remove-key key_in_condarc</code></li><li>删除某项配置下的某项: <code>conda config --remove key sub_key</code></li><li>安全追加列表型配置: <code>conda config --add key value</code></li><li>强制指定单值或完全替换列表: <code>conda config --set key value</code></li></ul><h4 id="文件直接写入"><a href="#文件直接写入" class="headerlink" title="文件直接写入"></a>文件直接写入</h4><p>常用配置示例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># basic</span><br><span class="hljs-comment">## 禁用自动激活 base 环境</span><br><span class="hljs-attr">auto_activate_base:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">## 安装包时显示下载频道地址</span><br><span class="hljs-attr">show_channel_urls:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># save</span><br><span class="hljs-comment">## 缓存目录 </span><br><span class="hljs-comment"># pkgs_dirs:</span><br><span class="hljs-comment">#   - /path/to/pkgs_1</span><br><span class="hljs-comment">#   - /path/to/pkgs_2</span><br><span class="hljs-comment"># ## 环境目录</span><br><span class="hljs-comment"># envs_dirs:</span><br><span class="hljs-comment">#   - /path/to/env_1</span><br><span class="hljs-comment">#   - /path/to/env_2</span><br><span class="hljs-comment"># channels</span><br><span class="hljs-comment">## 清华源</span><br><span class="hljs-attr">channels:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="hljs-comment">#  - conda-forge</span><br><span class="hljs-comment">#  - defaults</span><br><span class="hljs-comment">## 频道别名</span><br><span class="hljs-comment"># custom_channels:</span><br><span class="hljs-comment">#   conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="hljs-comment">#   pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="hljs-comment">## 优先级模式</span><br><span class="hljs-comment"># channel_priority: strict</span><br></code></pre></td></tr></table></figure><h3 id="当前-Shell-生效"><a href="#当前-Shell-生效" class="headerlink" title="当前 Shell 生效"></a>当前 Shell 生效</h3><ul><li>ubuntu 定义环境保存位置<ul><li>临时定义: <code>export CONDA_ENVS_DIRS=&quot;/path/to/dir1:/path/to/dir2&quot;</code></li><li>永久定义: 在 <code>.bashrc</code> 或者 <code>.zshrc</code> 中写入 <code>export CONDA_ENVS_DIRS=&quot;/path/to/dir1:/path/to/dir2&quot;</code></li></ul></li><li>ubuntu 定义缓存目录位置, 环境变量为 <code>CONDA_PKGS_DIRS</code>, 操作形式同上</li></ul><h2 id="环境管理与迁移"><a href="#环境管理与迁移" class="headerlink" title="环境管理与迁移"></a><em>环境</em>管理与迁移</h2><ul><li>查看帮助: <code>conda env --help</code></li><li>列出所有环境: <code>conda env list</code></li><li>彻底删除环境: <code>conda remove -n env_name --all</code></li><li>克隆&#x2F;复制环境: <code>conda create -n new_env_name --clone ond_env_name</code></li><li><span style="color:red"><strong>conda</strong> 导出环境配置: <code>conda env export -n env_name -f env.yaml</code> (适用于大多数包用 conda 安装)</span></li><li><span style="color:green"><strong>pip</strong> 导出环境中所有通过 pip 安装的包: <code>pip freeze &gt; requirements.txt</code> (适用于大多数包用 pip 安装)</span></li><li><span style="color:red"><strong>conda</strong> 从配置文件中创建环境: <code>conda env create -f env.yaml [--force]</code></span><ul><li>运行命令前需更改文件 <code>env.yaml</code> 最后一行的 <code>prefix</code> (或直接删除)</li><li>命令同时安装 conda 和 pip 安装过的包, 对于个别 pip 信赖项若提示安装失败, 可删除 <code>env.yaml</code> 的对应行, 重新运行命令, 最后再用 <code>pip install</code> 单独安装</li></ul></li><li><span style="color:red"><strong>conda</strong> 从配置文件中更新环境中的包: <code>conda env update -f env.yaml [-n env_name]</code></span><ul><li>适用于环境已经创建, 需要批量安装&#x2F;更新某些包</li><li><code>--dry-run</code>: 模拟操作, 不实际执行, 用于预览更新内容</li></ul></li><li><span style="color:green"><strong>pip</strong> 从配置文件中安装包: <code>pip install -r requirements.txt</code></span><ul><li>运行命令前需先创建环境 (注意指定 Python 版本) 并激活</li><li>若还有 conda 命令安装的包, 需用 <code>conda install</code> 单独安装</li></ul></li><li><span style="color:yellow">直接复制 <code>envs/env_name</code> 实行环境迁移 (适用于 conda 和 cuda 版本一致)</span></li><li>高效文件迁移命令: <code>scp -r [-q] local_file user@host:/path/to/target</code> 或者 <code>scp -r [-q] user@host:/path/to/copy /path/to/local</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-r:</span> <span class="hljs-string">递归复制整个目录。</span><br><span class="hljs-string">-P</span> <span class="hljs-attr">port:</span> <span class="hljs-string">指定</span> <span class="hljs-string">SSH</span> <span class="hljs-string">连接的端口。</span><br><span class="hljs-string">-i</span> <span class="hljs-attr">identity_file:</span> <span class="hljs-string">指定私钥文件用于身份验证。</span><br><span class="hljs-string">-v:</span> <span class="hljs-string">显示详细的调试信息。</span><br><span class="hljs-string">-q:</span> <span class="hljs-string">禁止显示进度信息和错误信息</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="环境配置文件-yaml"><a href="#环境配置文件-yaml" class="headerlink" title="环境配置文件 (.yaml)"></a>环境配置文件 (.yaml)</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">my_env</span>  <span class="hljs-comment"># 环境名称 (可选, 创建时可被命令行覆盖)</span><br><span class="hljs-attr">channels:</span>  <span class="hljs-comment"># 包下载渠道 (优先级从上到下)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">conda-forge</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">defaults</span><br><span class="hljs-attr">dependencies:</span>  <span class="hljs-comment"># 依赖包列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">python=3.9</span>  <span class="hljs-comment"># 指定 Python 版本</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">numpy=1.21</span>  <span class="hljs-comment"># 指定包版本</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pandas&gt;=1.3</span>  <span class="hljs-comment"># 版本范围约束</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">pip:</span>  <span class="hljs-comment"># 通过pip安装的包 (需缩进)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">torch==1.11.0</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">requests</span><br></code></pre></td></tr></table></figure><h3 id="关键字段"><a href="#关键字段" class="headerlink" title="关键字段"></a>关键字段</h3><ul><li><code>name</code> (可选)<ul><li>指定环境名称, 可通过 <code>conda env create -n env_name</code> 覆盖</li><li>如果省略, 创建环境时需显式指定 <code>-n</code> 参数</li></ul></li><li><code>channels</code> (可选但推荐)<ul><li>定义包的搜索渠道, <strong>优先级按顺序排列</strong></li></ul></li><li><code>dependencies</code> (必需)<ul><li>列出所有依赖包, 支持格式: 精确版本 (<code>包名=版本</code>), 版本约束 (至少 <code>&gt;=</code>, 低于 <code>&lt;</code>, 1.2 系列最新版 <code>1.2.*</code>)</li><li>通过 pip 安装的包: 需嵌套在 <code>- pip:</code> 下</li></ul></li></ul><h3 id="语法注意事项"><a href="#语法注意事项" class="headerlink" title="语法注意事项"></a>语法注意事项</h3><ul><li>注释: <code>#</code></li><li>缩进: 每级使用两个<strong>空格</strong> (且不能使用 <code>Tab</code>)</li><li>续行: 在行尾加 <code>\</code>, 回车后在下一行缩进对齐</li></ul><h2 id="Trouble-shooting"><a href="#Trouble-shooting" class="headerlink" title="Trouble shooting"></a>Trouble shooting</h2><h3 id="imageio"><a href="#imageio" class="headerlink" title="imageio"></a>imageio</h3><blockquote><p>Imageio: ‘libfreeimage-3.16.0-linux64.so’ was not found on your computer; downloading it now. Error while fetching file: &lt;urlopen error timed out&gt;.</p><footer><strong>imageio.plugins.freeimage.download()</strong></footer></blockquote><p>解决办法: </p><ul><li>到 <a href="https://github.com/imageio/imageio-binaries/tree/master">imageio GitHub 库</a> 下载对应的插件</li><li>终端运行 <code>python -c &#39;import imageio; print(imageio.core.util.appdata_dir(&quot;imageio&quot;))&#39;</code> 将得到一个路径, 将下载的插件保存到该路径下对应的子目录中</li></ul><p>参考链接: <a href="https://blog.csdn.net/qq_43778485/article/details/130770654">记得吃早饭a. 使用imageio报错…</a></p><h3 id="GLIBCXX-3-4-29-not-found"><a href="#GLIBCXX-3-4-29-not-found" class="headerlink" title="GLIBCXX_3.4.29 not found"></a>GLIBCXX_3.4.29 not found</h3><ul><li>查看安装的 libstdc++6 版本: <code>sudo find / -name &quot;libstdc++.so.6*&quot; 2&gt; /dev/null</code></li><li>检查支持的 GLIBCXX 版本:<ul><li>系统: <code>strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX</code></li><li>conda: <code>strings $CONDA_PREFIX/lib/libstdc++.so.6 | grep GLIBCXX</code></li></ul></li><li>复制满足要求的 libstdc++6, 并创建软链接或者<strong>降低相关包的版本</strong></li></ul><p>参考链接: <a href="https://blog.csdn.net/weixin_39379635/article/details/129159713">夜溪兮. 如何解决 version GLIBCXX_3.4.29 not found 的问题. CSDN</a></p><h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><p>Python 包管理器, 用于安装和管理不属于 Python 标准库的其它库与依赖</p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><ul><li>配置文件位置<ul><li>Windows: <code>C:\Users\temm\AppData\Roaming\pip.ini</code></li><li>Ubuntu: <code>/public/home/tianzonglin/.config/pip/pip.conf</code></li></ul></li><li>使用清华源<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-comment"># 超时时间</span><br><span class="hljs-attr">timeout</span> = <span class="hljs-number">6000</span><br><span class="hljs-comment"># 使用单一镜像源, 仅在必要时添加 extra-index-url</span><br><span class="hljs-attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple<br><span class="hljs-comment"># 包缓存位置</span><br><span class="hljs-attr">cache-dir</span> = H:\APP_files\pip\cache<br><br><span class="hljs-section">[install]</span><br><span class="hljs-attr">trusted-host</span> = pypi.tuna.tsinghua.edu.cn<br></code></pre></td></tr></table></figure></li><li>终端命令永久配置<ul><li>使用清华源: <code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></li></ul></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>查看配置: <code>pip config list</code></li><li><strong>清理缓存: <code>pip cache purge</code></strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看具体缓存的包</span><br>pip cache list<br><span class="hljs-comment"># 清理特定包</span><br>pip cache remove pkg<br><span class="hljs-comment"># 查看缓存位置和内容 (显示的路径可用于清理 wheel 和 http 缓存)</span><br>pip cache info<br><span class="hljs-comment"># 清理缓存的 wheel 文件 (构建好的包)</span><br>pip cache remove --path /path/to/wheels<br><span class="hljs-comment"># 清理 HTTP 缓存 (下载的原始文件)</span><br>pip cache remove --path /path/to/http<br><span class="hljs-comment"># </span><br><br></code></pre></td></tr></table></figure></li><li>帮助<ul><li>总: <code>pip --help</code></li><li>特定: <code>pip install --help</code></li></ul></li><li>指定镜像加速安装: <code>pip install pkg_name -i source_url</code><ul><li>使用清华源: <code>pip install pkg_name -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li></ul></li><li>升级包: <code>pip install -U/--upgrade pkg_name</code><ul><li>升级 pip: <code>pip install -U pip</code></li></ul></li><li>查看所有已安装的包: <code>pip list [--verbose]</code></li><li>查看某个包的详细信息: <code>pip show pkg_name</code></li><li><strong>搜索包: <code>pip search pkg_name</code></strong></li><li><strong>导出和安装信赖</strong><ul><li>导出: <code>pip freeze &gt; requirements.txt</code></li><li>安装: <code>pip install -r requirements.txt</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSH (Secure Shell) 配置与命令</title>
    <link href="/ssh/"/>
    <url>/ssh/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="密钥配置"><a href="#密钥配置" class="headerlink" title="密钥配置"></a>密钥配置</h2><ul><li>重置密码短语: <code>ssh-keygen -p -f ~/.ssh/id_rsa</code> (<code>id_rsa</code> 根据具体情况替换)</li></ul><h2 id="终端登陆"><a href="#终端登陆" class="headerlink" title="终端登陆"></a>终端登陆</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>一般书写顺序</strong><ol><li>连接选项: <code>-i</code>, <code>-p</code>, <code>-J</code>, <code>-L</code></li><li>交互选项: <code>-t</code> <code>-T</code></li><li>目标主机: <code>user@host</code></li><li>远程命令: <code>exec zsh -l</code></li><li><span class="emp-style"><strong>后台运行: <code>-Nf</code></strong></span></li></ol></li><li>常用参数<ul><li>执行命令: <strong>置于最后</strong>, 特殊字符需要转义<ul><li>双引号内: <code>$</code>, <code>`</code>, <code>&quot;</code>, <code>\</code></li><li>单引号内: 单引号自身</li></ul></li><li>特殊: <code>I</code> (用户名), <code>V</code> (版本信息)</li><li>分配终端: <code>t</code> (分配), <code>T</code> (取消), <code>N</code> (不执行命令), <code>f</code> (后台执行)</li><li>显示与输出: <code>q</code> (安静), <code>v or vv</code> (详细 or 调试), <code>G</code> (配置解析)</li><li>配置: <code>-o &quot;key=value&quot;</code>, 临时覆盖 <a href="#%E9%85%8D%E7%BD%AE"><code>config</code></a> 中的参数<ul><li>当值中含有特殊字符时, 使用 <code>\</code> 转义或者单引号嵌套</li><li>可多个 <code>-o</code> 分开书写组合</li></ul></li><li><strong>跳转机与端口转发: <code>J</code> (跳转机), <code>W</code> (透明转发), <code>L</code> (本地转发), <code>R</code> (远程转发), <code>D</code> (建立 socks5 代理)</strong></li></ul></li></ul><h3 id="特定命令"><a href="#特定命令" class="headerlink" title="特定命令"></a>特定命令</h3><ul><li>登陆到远程主机: <code>ssh user@remote_host_ipORdomain</code></li><li>登陆时指定 <code>bash</code> 配置文件: <code>ssh -t user@remote_host &#39;bash --rcfile /path/to/custom_.bashrc</code></li><li>登陆时指定 <code>zsh</code> 配置文件: <code>ssh -t use@remote_host &#39;exec -l -c &quot;source /path/to/custom_.zshrc; zsh&quot;&#39;</code></li><li><strong>后台建立本地端口转发 (最小开销): <code>ssh -f -N -L 2222:localhost:22 user@host-name</code></strong></li><li><span class="emp-style green">通过跳板机登陆 docker 容器: <code>ssh -J jump-host target_user@target_ip</code></span></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>若没有特殊说明表示在 <code>~/.ssh/config</code> 文件中添加内容</li><li><strong><code>ssh -G user@ip</code>: 显示生效的连接配置 (经过 <code>config</code> 与命令行选项合并后), 但不实际建立连接</strong></li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><code>Host</code> 支持 <code>*</code> 通配符 </li><li>内置变量<ul><li><code>%h</code>: 目标主机 HostName</li><li><code>%n</code>: “原始” 主机 (Host)</li><li><code>%r</code>: 目标主机 User</li><li><code>%p</code>: 目标主机 Port</li></ul></li></ul><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><span class="emp-style blue"><code>config</code> 中的参数与在终端登陆的参数基本是相对应的, <code>config</code> 中是全局定义, 终端登陆是临时, 优先级高于 <code>config</code>, 并可以通过 <code>-o &quot;key=value&quot;</code> 临时替换</span></p><ul><li><code>RemoteCommand</code>: 连接时执行的命令, 对应终端登陆命令的最后部分 (如果有的话)</li><li><code>ProxyCommand</code>: 代理命令, 可结合<a href="#%E8%B7%B3%E6%9D%BF%E6%9C%BA">跳板机</a>实现单次 SSH 连接, 隐藏跳板步骤</li><li><code>RequestTTY</code>: [yes&#x2F;no], 强制分配终端, 与 <code>t|T</code> 对应 </li><li><code>StrictHostKeyChecking</code>: [yes&#x2F;no], 是否严格检查远程主机的公钥</li><li><code>ProxyJump</code>: <a href="#%E8%B7%B3%E6%9D%BF%E6%9C%BA">跳板机</a></li><li><code>LogLevel</code>: [QUIET&#x2F;VERBOSE&#x2F;DEBUG], 日志级别, 与 <code>q/v/vv</code> 对应</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host custom_host_name  <span class="hljs-comment"># 别名</span><br>    HostName host_ip_or_dormain  <span class="hljs-comment"># 主机 IP 或者域名</span><br>    User username  <span class="hljs-comment"># 用户名</span><br>    Port port  <span class="hljs-comment"># 默认 22</span><br>    PreferredAuthentications publickey  <span class="hljs-comment"># 优先使用公钥认证</span><br>    IdentityFile ~/.ssh/id_rsa  <span class="hljs-comment"># 私钥文件路径</span><br>    RemoteCommand bash --rcfile /path/to/custom_bashrc  <span class="hljs-comment"># 登陆时执行命令</span><br>    ProxyJump jump-host  <span class="hljs-comment"># 跳板机</span><br>    ProxyCommand ssh -q jump-host <span class="hljs-string">&quot;ip=<span class="hljs-subst">$(~/Temp/read_ip.sh %n | tr -d &#x27;\n&#x27;)</span>; ssh -W <span class="hljs-variable">$ip</span>:22 localhost&quot;</span>  <span class="hljs-comment"># 仍然跳板机</span><br><br>Host jump-host<br>...<br><br></code></pre></td></tr></table></figure><h2 id="跳板机"><a href="#跳板机" class="headerlink" title="跳板机"></a>跳板机</h2><p>基本目标: 本地电脑通过跳板机 (Bastion Host) 连接 “外网” 电脑<br><strong>注:</strong> 下文所有标识 <code>jump-host</code> 表示跳板机, 若没有在 <code>~/.ssh/config</code> 中定义, 需要显示指定 <code>jump-host</code> 的连接方式, 通常包括用户名, 主机名&#x2F;ip, 端口, 密钥文件</p><ul><li><code>-J</code> or <code>ProxyJump</code> 选项: <code>ssh -J jump-host target_user@target_ip</code></li><li><code>-W</code> + <code>ProxyCommand</code> 组合: <code>ssh -o &quot;ProxyCommand=ssh -W %h:%p jump-host&quot; target_user@target_ip</code></li></ul><p><span class="emp-style green">应用: 通过跳板机动态透明转发, 连接容器</span></p><ul><li>配置与命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/.ssh/config</span><br>Host *-container<br>    User user<br>    ProxyCommand ssh -W $(ssh jump-host <span class="hljs-string">&quot;~/get_ip.sh %n&quot;</span>):%p jump-host<br><span class="hljs-comment"># 终端输入</span><br>ssh test-container<br></code></pre></td></tr></table></figure></li><li>连接步骤<ol><li>解析 <code>test-container</code>, 触发 <code>ProxyCommand</code></li><li>跳板机执行 <code>get_ip.sh</code> 获取容器 IP (如 172.17.0.2)</li><li><code>-W 172.17.0.2:22</code> 建立隧道</li><li>本地 SSH 客户端通过隧道连接容器。</li></ol></li></ul><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>基本目标: 通过端口映射, 本地电脑可以访问 “外网” 电脑 (服务), <span class="emp-style">常接 <code>-Nf</code> (在后台运行)</span></p><ul><li><p><code>-L</code>: 本地端口转发到远程主机, 从而通过本地工具 (浏览器) 访问本地端口访问远程主机的服务, 命令格式 <span class="emp-style red"><code>ssh -L local_port:target_host:target_port jump-host</code></span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在本地电脑上操作</span><br>ssh -L 2222:target-host:22 jump-host<br>ssh -p 2222 target_user@localhost<br></code></pre></td></tr></table></figure></li><li><p><code>-R</code>: 远程主机端口转发到本地, 从而在远程主机的端口访问本地电脑的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在外网电脑上操作</span><br>ssh -R 2222:localhost:22 local_user@local_ip<br><span class="hljs-comment"># 在本地电脑上操作</span><br>ssh -p 2222 target_user@localhost<br></code></pre></td></tr></table></figure></li><li><p><code>-W</code>: <strong>只建立隧道, 不涉及端口, 通常配合 <code>PorxyCommad</code> 命令</strong> (参见前述<a href="#%E8%B7%B3%E6%9D%BF%E6%9C%BA"><em>跳板机</em></a>)</p></li><li><p><code>-D</code>: 动态端口转发 (SOCKS 代理), 在本地端口启动 SOCKS5 代理 (<code>127.0.0.1:port</code>), 使用该代理后, 访问任何地址都会通过 SSH 隧道转发到远程服务器进行访问, 通常用于<strong>科学上网</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在需要科学上网电脑上操作</span><br>ssh -D 20170 local_user@local_ip<br><span class="hljs-comment"># 终端使用代理访问外网</span><br>curl --socks5 127.0.0.1:20170 https://www.google.com<br><span class="hljs-comment"># 或者设置全局代理</span><br><span class="hljs-built_in">export</span> all_proxy=socks5://127.0.0.1:20170<br></code></pre></td></tr></table></figure></li></ul><h2 id="密钥管理-SSH-Agent-身份验证代理"><a href="#密钥管理-SSH-Agent-身份验证代理" class="headerlink" title="密钥管理 SSH-Agent (身份验证代理)"></a>密钥管理 SSH-Agent (身份验证代理)</h2><p>安全便利的管理 SSH 密钥: 私钥存储在内存中而不是在文件系统中; 登陆时自动提供身份验证, 无需每次都输入密钥的短语</p><ul><li>启动&#x2F;停止<ul><li>自动启动: <code>Set-Service -Name ssh-agent -StartupType Automatic</code></li><li>启动: <code>Start-Service ssh-agent</code></li><li>停止: <code>Stop-Service ssh-agent</code></li><li>查看状态: <code>Get-Service ssh-agent</code></li></ul></li><li>添加密钥: <code>ssh-add ~/.ssh/id_rsa</code></li><li>查看已添加密钥: <code>ssh-add -l</code></li><li>删除<ul><li>指定密钥: <code>ssh-add -d ~/.ssh/id_rsa</code></li><li>所有密钥: <code>ssh-add -D</code></li></ul></li></ul><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>若没有特殊说明表示在 <strong>sshd_config</strong> 中更新内容</p><ul><li>Windows: <code>C:\ProgramData\ssh\sshd_config</code></li><li>Ubuntu: <code>/etc/ssh/sshd_config</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许流量转发, 如 ssh -D</span><br>AllowTcpForwarding <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>国华学子当以奉献社会为终生追求</title>
    <link href="/2024/06/23/%E5%9B%BD%E5%8D%8E%E5%AD%A6%E5%AD%90%E5%BD%93%E4%BB%A5%E5%A5%89%E7%8C%AE%E7%A4%BE%E4%BC%9A%E4%B8%BA%E7%BB%88%E7%94%9F%E8%BF%BD%E6%B1%82/"/>
    <url>/2024/06/23/%E5%9B%BD%E5%8D%8E%E5%AD%A6%E5%AD%90%E5%BD%93%E4%BB%A5%E5%A5%89%E7%8C%AE%E7%A4%BE%E4%BC%9A%E4%B8%BA%E7%BB%88%E7%94%9F%E8%BF%BD%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好久没想起或者听到这句话了: <span style="color:red;font-weight:bold">“国华学子当以奉献社会为终生追求”</span>. </p><p>前两天高中母校发了一个问卷星, 征集已毕业学生的善举与贡献, 其中的副标题即为 “国华学子当以奉献社会为终生追求”, 唤起了高中母校在我身上烙上的”国华人”烙印.</p><p>2015 年从母校毕业, 距今已有 9 年. 而面对该问卷, 我却无法给出一个满意的回答, 实仍有负母校三年的教育与毕业后的资助. 倒不是问卷的难度有多大, 而是毕业这些年, 我基本忘了”国华学子当以奉献社会为终生追求”的理念, 而该问卷就是基于该理念而设计. 我是国华人啊! 国华人啊! 国华人啊!</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-f4be53b7" role="button" aria-expanded="false" aria-controls="collapse-f4be53b7">        <div class="fold-arrow">▶</div>国华校友的善举与贡献      </div>      <div class="fold-collapse collapse" id="collapse-f4be53b7">        <div class="fold-content">          <ol><li>你的姓名与届别</li><li>你所追求的哪些理想, 愿望在后来的学习, 工作中实现了?</li><li>请分享 1-2 件自己非常自豪, 为这个社会真正做了一点事的经历 (哪怕很小的事, 都可以)</li><li>请分享几件你身边或者你听说的国华校友的某个善举或者为社会做出的一点贡献, 亦或是 ta 身上的某种品质, 某种追求特别令你感动的事迹</li></ol>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WEEK 24 Come on!</title>
    <link href="/2024/06/16/WEEK-24-Come-on/"/>
    <url>/2024/06/16/WEEK-24-Come-on/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文献阅读"><a href="#文献阅读" class="headerlink" title="文献阅读"></a>文献阅读</h1>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX 常用命令</title>
    <link href="/latex/"/>
    <url>/latex/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h1><h2 id="高亮与颜色"><a href="#高亮与颜色" class="headerlink" title="高亮与颜色"></a>高亮与颜色</h2><p><strong>使用宏包: xcolor</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-params">#</span> 颜色<br><span class="hljs-keyword">\textcolor</span>&#123;red&#125;&#123;colored<span class="hljs-built_in">_</span>text&#125;<br><span class="hljs-keyword">\textcolor</span>&#123;gray&#125;&#123;colored<span class="hljs-built_in">_</span>text&#125;<br><span class="hljs-keyword">\color</span>&#123;blue&#125; colored<span class="hljs-built_in">_</span>text<br><br><span class="hljs-params">#</span> 高亮<br><span class="hljs-keyword">\colorbox</span>&#123;green&#125;&#123;<span class="hljs-keyword">\color</span>&#123;<span class="hljs-keyword">\black</span>&#125; black text with green background&#125;<br><span class="hljs-keyword">\fcolorbox</span>&#123;red&#125;&#123;yellow&#125;&#123;yellow background with red frame&#125;<br></code></pre></td></tr></table></figure><h2 id="数学字体加粗"><a href="#数学字体加粗" class="headerlink" title="数学字体加粗"></a>数学字体加粗</h2><ul><li><code>\textbf</code>: 文本环境加粗, 没有斜体且无法对希腊字母加粗</li><li><code>\mathbf</code>: 效果同 <code>\textbf</code></li><li><code>\boldmath</code>: 加粗且有斜体效果, 依赖 <em>amsmath</em> 宏包</li><li><code>\boldsymbol</code>: 加粗有斜体效果, 并对希腊字母有效, 依赖 <em>amsmath</em> 宏包</li></ul><p><strong>在数学环境中, 推荐使用 宏包 bm 的 <code>\bm</code> 命令</strong> . 对于 <em>xelatex</em> 的情形, 若 <code>\bm</code> 报错, 尝试:</p><ul><li><code>\symbfit</code>: 加粗与斜体</li><li><code>\symbf</code>: 加粗无斜体</li><li><code>\mathbfcal</code>: 加粗的 <code>\mathcal</code> 字体</li></ul><h2 id="特殊字体"><a href="#特殊字体" class="headerlink" title="特殊字体"></a>特殊字体</h2><ul><li>花体: <code>\mathcal&#123;大写字母&#125;</code></li><li>黑板粗体 (数集表示): <code>\mathbb&#123;大写字母&#125;</code></li></ul><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><ul><li><code>\boxed</code></li></ul><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><h2 id="基本符号"><a href="#基本符号" class="headerlink" title="基本符号"></a>基本符号</h2><ul><li>乘号 $\times$: <code>\times</code></li><li>星号 $\ast$: <code>\ast</code></li><li>点乘 $\cdot$: <code>\cdot</code></li><li>带圆圈的点运算 $\odot$: <code>\odot</code></li><li>约等于 $\approx$: <code>\approx</code></li><li>梯度 $\nabla$: <code>\nabla</code></li><li>箭头: 双向 <code>\leftrightarrow</code></li><li>函数映射 $\mapsto$: <code>\mapsto</code></li><li>向下取整 $\lfloor x \rfloor$: <code>\lfloor \rfloor</code></li><li>向上取整 $\lceil x \rceil$: <code>\lceil \rceil</code></li></ul><h2 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br>    sgn<span class="hljs-keyword">\left</span>(x<span class="hljs-keyword">\right</span>)=<span class="hljs-keyword">\left</span><span class="hljs-keyword">\&#123;</span><br>        <span class="hljs-keyword">\begin</span>&#123;array&#125;&#123;ll&#125;  <span class="hljs-comment">% 每一列均左对齐</span><br>            1, <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\quad</span> x&gt;0 <span class="hljs-keyword">\\</span><br>            0, <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\quad</span> x=0 <span class="hljs-keyword">\\</span><br>            -1, <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\quad</span> x&lt;0 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\end</span>&#123;array&#125;<br>    <span class="hljs-keyword">\right</span>.<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br></code></pre></td></tr></table></figure><h2 id="调整公式字体大小"><a href="#调整公式字体大小" class="headerlink" title="调整公式字体大小"></a>调整公式字体大小</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;small&#125;<br><span class="hljs-comment">% normalsize &gt; large &gt; Large &gt; huge &gt; Huge &gt; small &gt; footnotesize &gt; scriptsize &gt; tiny</span><br><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br>...<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br><span class="hljs-keyword">\end</span>&#123;small&#125;<br></code></pre></td></tr></table></figure><h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><ul><li>自定义括号大小: <code>\big, \Big, \bigg, \Bigg</code></li></ul><h1 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h1><ul><li><em>et al.</em><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\DeclareRobustCommand</span>&#123;<span class="hljs-keyword">\etal</span>&#125;&#123;<span class="hljs-keyword">\textit</span>&#123;et al.&#125;&#125;<br></code></pre></td></tr></table></figure></li><li>图片以 Fig. 为引用前缀<figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\figref</span>&#125;[1]&#123;Fig.~<span class="hljs-keyword">\ref</span>&#123;<span class="hljs-params">#1</span>&#125;&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>TexLive</li></ul><h2 id="将-pdf-文件转换为-eps-文件"><a href="#将-pdf-文件转换为-eps-文件" class="headerlink" title="将 .pdf 文件转换为 .eps 文件"></a>将 <code>.pdf</code> 文件转换为 <code>.eps</code> 文件</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">pdftops -eps source.pdf target.eps<br><span class="hljs-comment">% .bat 文件批量转换</span><br><br></code></pre></td></tr></table></figure><h2 id="将-pdf-文件转换为图片"><a href="#将-pdf-文件转换为图片" class="headerlink" title="将 .pdf 文件转换为图片"></a>将 <code>.pdf</code> 文件转换为图片</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">pdftocairo -png -f start<span class="hljs-built_in">_</span>num -l end<span class="hljs-built_in">_</span>num file.pdf<br></code></pre></td></tr></table></figure><h1 id="Excel-转-LaTex"><a href="#Excel-转-LaTex" class="headerlink" title="Excel 转 LaTex"></a>Excel 转 LaTex</h1><ul><li>Excel 安装 <a href="https://ctan.org/tex-archive/support/excel2latex/"><code>Excel2LaTex</code> 插件</a></li><li><a href="https://tableconvert.com/latex-generator"><code>TableConvert</code> 在线转换</a></li><li><a href="https://www.tablesgenerator.com/"><code>Tables Generator</code> 在线生成</a></li></ul><h1 id="changes-宏包添加批注"><a href="#changes-宏包添加批注" class="headerlink" title="changes 宏包添加批注"></a>changes 宏包添加批注</h1><ul><li>导言区引用: <code>\usepackage&#123;changes&#125;</code>, 可选参数<ul><li>commandnameprefix&#x3D;ifneeded</li><li>defaultcolor&#x3D;orange</li><li>authormarkup&#x3D;name</li><li><strong>final: 编译时不显示批注</strong></li></ul></li><li>定义作者: <code>\definechangesauthor[name=&#123;&#125;, corlor=]&#123;author_id&#125;</code></li><li>列出所有修订: <code>\listofchanges</code></li><li>正文批注<ul><li>新增内容: <code>\added[id=, comment=&#123;&#125;]&#123;&#125;</code></li><li>替换内容: <code>\replaced[id=, comment=&#123;&#125;]&#123;new_texts&#125;&#123;old_texts&#125;</code></li><li>高亮内容: <code>\highlight[id=, comment=&#123;&#125;]&#123;&#125;</code></li><li>批注: <code>\comment&#123;comment_text&#125;</code></li></ul></li></ul><h1 id="期刊模板"><a href="#期刊模板" class="headerlink" title="期刊模板"></a>期刊模板</h1><h2 id="Elsevier"><a href="#Elsevier" class="headerlink" title="Elsevier"></a>Elsevier</h2><ul><li><a href="https://blog.csdn.net/qq_31347869/article/details/128161240">不吃饭就会放大招. Elsevier（爱思唯尔）LaTex 模板详细说明. CSDN</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://blog.csdn.net/subtitle_/article/details/129392994">小林up. LaTex使用技巧15：LaTex命令行转换pdf和eps. CSDN</a></li><li><a href="https://blog.csdn.net/jeryjeryjery/article/details/88970357">liuwei1206. Texlive中jpg和pdf转成eps. CSDN</a></li><li><a href="https://pencilq.com/64/">小铅笔 &amp; Jeff. 通过LaTeX发行版直接转换和查看EPS. CSDN</a></li><li><a href="https://www.zhihu.com/question/307970489/answer/2305355098">严二姨. 有什么好用的 LaTeX 表格自动生成工具？知乎</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typesetting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visio 学习积累</title>
    <link href="/2024/06/11/Visio-%E5%AD%A6%E4%B9%A0%E7%A7%AF%E7%B4%AF/"/>
    <url>/2024/06/11/Visio-%E5%AD%A6%E4%B9%A0%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件转-pdf"><a href="#文件转-pdf" class="headerlink" title="文件转 .pdf"></a>文件转 .pdf</h1><ul><li>去除多余的白边 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[强殖装甲凯普. 最简单Visio导出无边框无白边pdf. CSDN](https://blog.csdn.net/qq_38163755/article/details/111690961)">[1]</span></a></sup><ul><li>设计 → 大小 → 适应绘图</li><li>按住 <code>Ctrl</code> → 使用鼠标拖动画布边缘调整画布大小</li></ul></li><li>去除黑边<ul><li>在导出 pdf 时, 点击 <code>选项</code> → 取消勾选 <code>辅助功能文档结构标记</code></li></ul></li></ul><h1 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h1><ul><li>直接复制粘贴: <code>Ctrl + D</code></li><li>常规复制粘贴: <code>Ctrl + C</code> → <code>Ctrl + V</code> (默认在原对象右下角粘贴; 若粘贴前在任意位置点击, 则在点击位置粘贴)</li><li>拖动复制: <code>按住 Ctrl 键</code>, 鼠标左键拖动复制 (若同时按住 <code>Shift</code> 键, 则进行水平或者垂直对齐的复制)</li><li>等距复制: 复制一次之后, 每按一次 <code>F4</code>, 则等距复制一次</li></ul><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><ul><li>微小移动: 选中形状之后, 先按住 <code>Shift</code>, 再按方向键进行移动</li></ul><h1 id="形状改变"><a href="#形状改变" class="headerlink" title="形状改变"></a>形状改变</h1><ul><li>[非]等比例改变: 按住 <code>Shift</code>, 再拖动控制点</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/qq_38163755/article/details/111690961">强殖装甲凯普. 最简单Visio导出无边框无白边pdf. CSDN</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>所谓的科研能力到底要怎么培养?</title>
    <link href="/2024/06/04/%E6%89%80%E8%B0%93%E7%9A%84%E7%A7%91%E7%A0%94%E8%83%BD%E5%8A%9B%E5%88%B0%E5%BA%95%E8%A6%81%E6%80%8E%E4%B9%88%E5%9F%B9%E5%85%BB/"/>
    <url>/2024/06/04/%E6%89%80%E8%B0%93%E7%9A%84%E7%A7%91%E7%A0%94%E8%83%BD%E5%8A%9B%E5%88%B0%E5%BA%95%E8%A6%81%E6%80%8E%E4%B9%88%E5%9F%B9%E5%85%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>最近两个周在写点光源逆向渲染的一个小论文, 发现用 (英) 文字表达自己的想法 “寸步难行”. 其中的原因可能有以下几点: </p><ul><li>对逆向渲染领域的基础知识 (尤其是一些原理和术语)</li><li>…</li></ul><p>这个事让我想到: 到底要怎样训练才能有针对性地培养这种科研写作能力? 或者从更高的角度来思考: 所谓的科研能力有哪些? 又要怎么培养?</p><h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><h2 id="转换科研思路"><a href="#转换科研思路" class="headerlink" title="转换科研思路"></a>转换科研思路</h2><p>以撰写科研文章为例, 承认自己目前确实不擅长甚至不会写, 所以在写作的过程中不以一种苛求或者批判的视角来看待所写内容, 而是抱着一种学习的心态, 只是尽可能地写, 至于写成什么样, 不过多要求, 但需要尽最大努力. </p><h2 id="平常心对待他人的修改意见"><a href="#平常心对待他人的修改意见" class="headerlink" title="平常心对待他人的修改意见"></a>平常心对待他人的修改意见</h2><p>在撰写完成后, 不可避免地会将文章发给导师, 请其给出修改意见, 而后继续修改. 在这之中, 不要因为导师修改意见的多寡而自暴自弃或沾沾自喜, 而是平常心对待修改意见, 合理吸收可取之处, 然后进行修改. </p><h2 id="阅读积累"><a href="#阅读积累" class="headerlink" title="阅读积累"></a>阅读积累</h2><p>所谓书读百遍, 其义自现. 在产出之前, 积累至关重要. 所以我决定这次论文提交后, 务必保证<span style="color:red;font-weight:bold">每天阅读一篇文献</span>, 然后向两篇, 三篇每天迈进. </p><h2 id="写作刻意练习"><a href="#写作刻意练习" class="headerlink" title="写作刻意练习"></a>写作刻意练习</h2><p>对于每天或者每周读的文献, 进行规范总结: 想象自己就是论文的作者, 然后按照 CVPR 论文的格式撰写文章 (一部分)</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>针对如何提升科研写作能力, 本文提出了几个主观且未经检验的方法</p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WEEK 22 Writing For TIRPL</title>
    <link href="/2024/06/02/WEEK-22-Writing-For-TIRPL/"/>
    <url>/2024/06/02/WEEK-22-Writing-For-TIRPL/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Work-related-to-Research"><a href="#Work-related-to-Research" class="headerlink" title="Work related to Research"></a>Work related to Research</h1><ul><li>writing the parts of abstract, introduction, related work, limitations, and conclusion for TIRPL</li></ul><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><ul><li>take 1&#x2F;3 time for site building of blog</li><li>take 1&#x2F;3 time to adjust the physiological and mental state (get rid of emo…)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>慢一点, 再慢点</title>
    <link href="/2024/06/01/%E6%85%A2%E4%B8%80%E7%82%B9-%E5%86%8D%E6%85%A2%E7%82%B9/"/>
    <url>/2024/06/01/%E6%85%A2%E4%B8%80%E7%82%B9-%E5%86%8D%E6%85%A2%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>慢一点, 再慢一点, 咱们就只做一件事: 静心科研, 早日毕业</p><p>只做科研这一件事, 不去想以后毕业了去哪去哪, 也不去想怎么谈对象, <code>至2024年6月1日起, 不再主动加本校女生微信, 科研累了, 只做下面几件事:</code></p><ul><li>睡觉</li><li>阅读, 冥想, 跑步, 写作</li><li>求圣</li><li>练字, 影视剪辑</li></ul><div class="note note-primary">            <p>倒不是对自己多么狠, 一定一定要怎么样, 我只想竭尽全力, 沉下心来努力一把, 看自己能做到什么程度. 这是我自己的人生, 我是主角, 或好或坏, 与旁人无关</p>          </div><p>六一儿童节快乐!</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>至此, 个人博客终于基本完成</title>
    <link href="/2024/05/29/%E8%87%B3%E6%AD%A4-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E5%9F%BA%E6%9C%AC%E5%AE%8C%E6%88%90/"/>
    <url>/2024/05/29/%E8%87%B3%E6%AD%A4-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E5%9F%BA%E6%9C%AC%E5%AE%8C%E6%88%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在不断地折腾下, 我的博客终于基本完成. 若以买房为喻, 即现在已经装修好, 剩下的就是怎么买家具充实屋子. 其中的装修理念主要有下面几点: </p><ul><li>界面的完整性, 涵盖生活与学习等板块</li><li>界面的美观与精简性, 但不失浏览的方便性</li><li>界面小彩蛋!!!</li></ul><p>主要不足之处: 对 <code>.js, .ejs</code> 相关的编程语言不熟, 导致完善时修改了 Fluid 主题文件, 将给后期主题更新带来些许麻烦</p><p>完善过程中, 花了我较多的时间和精力, 感觉与 Fluid 主题: <code>简洁至上, 以简约的设计帮助作者专注于写作</code>的理念相违背, 这便是我: 完美主义兼顔值党的代价. 正所谓, <code>好看的皮囊千篇一律, 有趣的灵魂万里挑一</code>, 所以后期我将专注于写作. 在此, 我立下 <span style="color:red;font-weight:bold">Flag</span>: </p><div class="note note-danger">            <p><strong>至2024-05-29起, 对于博客网页的完善频率<u>每个月不超过1次</u>, 我承诺把时间和精力用在写作上.</strong></p>          </div>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WEEK 21 codes of irsdf and point light</title>
    <link href="/2024/05/26/WEEK-21-codes-of-irsdf-and-point-light/"/>
    <url>/2024/05/26/WEEK-21-codes-of-irsdf-and-point-light/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Work-review"><a href="#Work-review" class="headerlink" title="Work review"></a>Work review</h1><ul><li>irsdf<br>After 60,000 iterations (about 21h), PSNR: 19.39 (have converged)<br>loss: 0.0707, volume_loss: 0.0291, <strong>surface_loss: 0.0393</strong></li></ul><div class="note note-info">            <p><strong>neilfpp</strong></p><ul><li>iteration: 8,000+8,000+80,000</li><li>time: 22h</li><li>loss: 0.0764</li><li>PSNR: 24.6657</li></ul>          </div><ul><li>point light</li></ul><h1 id="Plans"><a href="#Plans" class="headerlink" title="Plans"></a>Plans</h1><ul><li>point light<ul><li>abstract (deadline: May 31)</li><li><em>neilfpp</em> as comparision</li><li>main body (deadline: June 7 ← <strong>June 2</strong>)</li></ul></li><li>codes of irsdf</li><li>recent advances in reverse rendering</li></ul><h1 id="Remarks"><a href="#Remarks" class="headerlink" title="Remarks"></a>Remarks</h1><ul><li>the V100 server</li></ul>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm 配置与技巧</title>
    <link href="/pycharm/"/>
    <url>/pycharm/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用参考文献"><a href="#常用参考文献" class="headerlink" title="常用参考文献"></a>常用参考文献</h1><ul><li><a href="https://www.jetbrains.com/help/pycharm/working-with-source-code.html">PyCharm 官方文档</a></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><ul><li>图标下载<ul><li>大小: 16*16 或 24*24</li><li>网址: <a href="https://icon-icons.com/">Free icons</a></li></ul></li></ul><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="自定义代码折叠"><a href="#自定义代码折叠" class="headerlink" title="自定义代码折叠"></a>自定义代码折叠</h2><ul><li>选中需要折叠的代码 → 菜单栏 <code>代码</code> → <code>包围方式</code> → <code>任选其中一个包围方式 [Ctrl + Alt + T]</code></li></ul><h2 id="文件对比"><a href="#文件对比" class="headerlink" title="文件对比"></a>文件对比</h2><ul><li>激活当前文件 → 菜单栏 <code>视图</code> → <code>比较对象</code> → 选择要对比的文件</li></ul><h2 id="更改项目名称"><a href="#更改项目名称" class="headerlink" title="更改项目名称"></a>更改项目名称</h2><ul><li>不改变文件夹名: <code>右键点击项目根目录</code> → <code>重构</code> → <code>重命名</code> → <code>重命名项目</code></li></ul><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ul><li>Vim 相关: <ul><li>IdeaVim</li><li>AceJump</li><li>IdeaVim-EasyMotion</li><li>Which-Key</li></ul></li><li>美化: <ul><li>One Dark Theme</li><li>Extra ToolWindow Colorful Icons</li><li>Rainbow Brackets Lite (free and open source)</li></ul></li><li>补全: <ul><li>Full Line Code Completion</li><li>Machine Learning Code Completion</li><li>Machine Learning in Search Everywhere</li></ul></li><li>版本控制: Git</li><li>IDE: Backup and Sync</li><li>语言: <ul><li>Ini</li><li>JSON</li><li>Markdown</li><li><strong>Shell Script</strong></li><li>Toml</li><li>YAML</li></ul></li><li><strong>远程开发: Remote Development Gateway</strong></li><li><strong>部署: FTP&#x2F;SFTP&#x2F;WebDAV Connectivity</strong></li><li>远程 SSH 解释器: <ul><li>SSH Remote Run</li><li>Remote Execution Agent</li></ul></li><li>其它工具: <ul><li>.env files</li><li>Configuration Script</li><li>EditorConfig</li><li><strong>File Watchers</strong></li><li><strong>Grazie Lite</strong></li><li>IntelliLang</li><li><em>Jupyter</em></li><li><em>Notebook Files</em></li><li>Package Checker</li><li><strong>Python</strong></li><li><strong>Python Community Edition</strong></li><li><strong>Terminal</strong></li><li><strong>TextMate Bundles</strong></li></ul></li></ul><h1 id="Python-调试服务器"><a href="#Python-调试服务器" class="headerlink" title="Python 调试服务器"></a>Python 调试服务器</h1><ul><li>环境配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 不要加 --upgrade!!!</span><br>pip install pydevd_pycharm~=version<br></code></pre></td></tr></table></figure></li><li>编辑配置文件<ul><li>主机名 (IP)</li><li>端口 (PORT)</li><li>路径映射</li><li>勾选: 输出重定向到控制台</li></ul></li><li>复制命令到 Python 程序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 分号分隔, 方便注释切换</span><br><span class="hljs-keyword">import</span> pydevd_pycharm; pydevd_pycharm.settrace(<span class="hljs-string">&#x27;IP&#x27;</span>, port=PORT, stdoutToServer=<span class="hljs-literal">True</span>, stderrToServer=<span class="hljs-literal">True</span>, suspend=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
      <tag>Custom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10 重装与初始配置</title>
    <link href="/2024/05/23/Win10-%E9%87%8D%E8%A3%85%E4%B8%8E%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/05/23/Win10-%E9%87%8D%E8%A3%85%E4%B8%8E%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Win10-安装"><a href="#Win10-安装" class="headerlink" title="Win10 安装"></a>Win10 安装</h1><ul><li>强烈建议安装<strong>专业版</strong>(使用远程连接功能) </li><li>可先跳过激活, 直接安装</li><li>在选择系统安装位置时, 先删除所有的磁盘分区, 然后选择其中一块磁盘安装, 方便后期对磁盘分区</li><li>用户名建议<strong>务必</strong><span class="label label-danger">使用不带空格的英文名</span>, 同时建议不要登陆 Microsoft 帐户</li></ul><h1 id="Win10-初始化"><a href="#Win10-初始化" class="headerlink" title="Win10 初始化"></a>Win10 初始化</h1><h2 id="专业版激活"><a href="#专业版激活" class="headerlink" title="专业版激活"></a>专业版激活</h2><p><code>设置</code> → <code>更新与安全</code> → <code>激活</code> → <code>更改产品密钥</code></p><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>假设电脑存在两块磁盘, C 盘通常为系统盘, 不进行分区; 下述分区主要针对非系统磁盘</p><ul><li>将磁盘分为两个分区, 分别为 E (APP) 和 F (Files)<ul><li>E 分区为后续软件的安装位置, 根据使用软件的数量设置为总空间的 [1&#x2F;3, <strong>2&#x2F;3</strong>]. 若有选择困难症, 可设为 1&#x2F;2</li><li>F 分区为个人文件存放位置, 在分好 E 区之后, 直接分配剩下的空间即可</li><li><span class="label label-success">若电脑有三块磁盘, 可 E 和 F 区各分配一块磁盘 (并使用空间较大的磁盘当软件盘, 如有必要可改盘符)</span></li><li><span class="emp-style green">Left: 测试分盘顺序 (? 先压缩总的空间), 使得 C 盘或者 E 盘可<em>动态扩容</em> (这对只有一块磁盘的笔记本尤其重要)</span></li></ul></li><li>E 区文件目录参考<ul><li><s>Program Files: 64 位软件安装位置</s></li><li><s>Program Files (x86): 32 位软件安装位置</s></li><li><span class="emp-style red">Programs: 安装路径不能有空格的软件的安装位置</span> (<strong>软件安装目录统一使用这一个即可, 区分 32 或者 64 没有实际意义</strong>)</li><li><s>Portable: 存放免安装的应用软件</s></li><li>APP_files: 存放各个软件可能用 (产生) 的文件</li><li>Packages&#x2F;Software: 存放软件安装包, 安装完软件后可删除, 也可保留方便重安装</li><li>QuickStart: 各个软件的快捷方式, 并以方便自己记忆的<strong>字母</strong>缩写命名(建议不要超过4个字符), 例: 腾讯会议 → txhy</li></ul></li><li>F 区文件目录参考<ul><li>files: 存放常用文件, 比如下设 Photos 目录保存图片</li><li>root: 工作目录, 于我来说为与编程相关的文件保存位置</li><li>Temp: 临时文件存放位置, 可定期删除, 也可下设 AUTO_DEL 目录, 使用 Windows 任务计划程序自动删除</li></ul></li></ul><h2 id="基本个性化"><a href="#基本个性化" class="headerlink" title="基本个性化"></a>基本个性化</h2><ul><li>右键任务栏, 取消大多数不需要的固定或者显示</li><li>设置壁纸: 从网上下载一张喜欢的壁纸, 保存为 <code>F:\files\Photos\wall_paper_name</code>, 然后选择</li><li>颜色: 深色模式, 开启透明效果, 主题色选择灰色</li><li>桌面显示 <code>此电脑</code> 图标(我一般将其改名为 <code>我的电脑</code>)</li></ul><h2 id="Edge-基本配置"><a href="#Edge-基本配置" class="headerlink" title="Edge 基本配置"></a>Edge 基本配置</h2><ul><li>设置主题为深色模式</li><li>设置文件下载位置: <code>E:\App_files\Edge</code></li><li>安装去广告插件: AdGuard AdBlocker</li><li>Edge 详细配置可参考 <a href="/2024/05/05/Microsoft-Edge-%E4%BD%BF%E7%94%A8/">Microsoft Edge 使用技巧</a></li></ul><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>软件管家: 360安全卫士 or 微软电脑管理?</li><li>压缩: 7-zip</li><li>通讯: 微信, QQ</li><li>文本编辑: GVIM</li><li>编程: Miniconda</li></ul><h1 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h1><ul><li><span class="label label-success">Win + R 快速启动任意软件 (与 E 盘下的 QuickStart 相对应)</span><ul><li>最外层放置软件快捷方式 → 快速打开软件</li><li><code>Directory (qdr)</code> 目录下放件夹的快捷方式 → 快速打开目录</li><li><code>Program (qpg)</code> 目录下放自定义脚本的快捷方式 → 快速运行程序</li><li><code>File (qfl)</code> 目录下放文件的快捷方式 → 快速打开文件</li></ul></li><li>GVIM 配置</li><li>Edge 同步与插件安装</li><li>自定义键盘映射: AutoHotKey 使用</li></ul><h1 id="Temm-专属配置"><a href="#Temm-专属配置" class="headerlink" title="Temm 专属配置"></a>Temm 专属配置</h1><ul><li>Programmer Dvorak 键盘而局, 参考 <a href="/2023/07/08/Programmer-Dvorak-Layout-Anywhere/">pdv anywhere</a></li><li>输入法: 微软五笔输入法词库自定义, Rime 输入法</li></ul>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Custom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生苦短, 当尽力只做对自己重要或者感兴趣的事</title>
    <link href="/2024/05/16/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD-%E5%BD%93%E5%B0%BD%E5%8A%9B%E5%8F%AA%E5%81%9A%E5%AF%B9%E8%87%AA%E5%B7%B1%E9%87%8D%E8%A6%81%E6%88%96%E8%80%85%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E4%BA%8B/"/>
    <url>/2024/05/16/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD-%E5%BD%93%E5%B0%BD%E5%8A%9B%E5%8F%AA%E5%81%9A%E5%AF%B9%E8%87%AA%E5%B7%B1%E9%87%8D%E8%A6%81%E6%88%96%E8%80%85%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">这学期开学将近一个月之后, 带同组一位硕士师弟做自己研究方向的一个小问题. 从现在来看, 时常感到: 在最无能为力的时候, 选择给人指导, 实在不明智. </p><p style="text-indent:2em">我自己是一个较真且完美主义的人, 对一件事要么不做, 做就要做到最好. 夸张点说: 对于我认真的事, 结果在我眼里只有 0 分和 100 分. 加之我又是一个宁可天下人负我, 不可我负天下人的老实人. 对于答应别人的事, 往往看得比自己的事重要. 所以, 在指导师弟的过程中, 自我感觉还算尽责, 该给的指导我都给了, 因为我对无人指导自己瞎学一通的体会实在太深了. 但这过程中, 我也深深地感受到自己无法兼顾自己的科研和对师弟的指导, 雪上加霜的是: 师弟研究的问题也不是我想做的科研问题 (说实话, 我觉得这个问题对博士来说没有多大研究的意义), 尽管该问题和我的研究方向相关甚至是我提出的. <b>于是, 在这种把精力放在了自己不感兴趣的事上, 却无法做好对自己重要且感兴趣的事上时, 我内心的熵极度增加, 导致了或多或少的内耗, 抑郁.</b></p><p style="text-indent:2em">就目前的情况来说, 只得继续在这样一种矛盾的状态中寻找一种平衡. 毕竟答应了别人的事, 就要努力做到. 尤其我这位师弟还非常好学, 很有干劲, 能力也很好 (可以说我提到过的点, 他都能完成), 我实在不能抹杀这样一种对科研或者做事的态度. 这种苦我硕士亲身体会过, 对人的负面影响非常大. </p><p style="text-indent:2em">那以后的人生又该怎么办, 从这次或者说是以往的类似经历中, 提炼出下面几点经验: <div class="note note-primary">            <ul><li>不在能力不足或者自己生活一团乱麻时, <strong>轻易</strong>答应帮人或者给人指导</li><li>对于需要花费较长时间或者较多金钱的事, 不要轻易做决择, <strong>三思再三思</strong></li><li>人生苦短, 请尽可能<strong>只做对自己重要或者是自己感兴趣的事</strong></li></ul>          </div></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有那么一刻觉得几毛钱花得特别值</title>
    <link href="/2024/05/15/%E6%9C%89%E9%82%A3%E4%B9%88%E4%B8%80%E5%88%BB%E8%A7%89%E5%BE%97%E5%87%A0%E6%AF%9B%E9%92%B1%E8%8A%B1%E5%BE%97%E7%89%B9%E5%88%AB%E5%80%BC/"/>
    <url>/2024/05/15/%E6%9C%89%E9%82%A3%E4%B9%88%E4%B8%80%E5%88%BB%E8%A7%89%E5%BE%97%E5%87%A0%E6%AF%9B%E9%92%B1%E8%8A%B1%E5%BE%97%E7%89%B9%E5%88%AB%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-primary">            <b>事情或事物之大或许在于其重要性与时效性</b>          </div><p style="text-indent:2em">所感起于长期跑步给我带来的一些"损伤", 我所采取的应对措施.<p><p style="text-indent:2em">由于(可能)不良跑步姿势, 我脚外侧靠近小脚趾的位置通常会隔三差五地磨起水泡, 旧泡未好, 新泡又至, 导致"泡中泡", 两支脚都深受其害. 早些时候, 我不予理会, 而是让脚适应每天的跑步强度. 此做法导致的一个后果是: 如果我有一阵子没脚步, 再重新开始的时候, 脚将会重新被磨一遍, 直到其完全适应"新"的强度为止. </p><p style="text-indent:2em">前不久, 我参加学院的一个六周运动打卡活动, 强度相较之前有所上升, 所以本来处于"平衡态"的脚又被磨一遍. 但这次我基本每天都跑, 所以大都数时候都是带伤跑, 恢复程度赶不上每天的损伤程度, 甚至有点影响每天的跑步体验以及晚上的休息 (伤口处有灼烧感). 此时, 我想到农村的一个偏方: 往伤口处涂抹牙膏. 效果确实有那么一点, 但改善程度不大. 持续了几天, 我担心再这样下去会影响我每天的跑步常规. 于是, 我去昌平校医院咨询了医生. 医生的建议是多注意休息, 暂时不要跑步了, 我当然不同意了. 最后, 医生说可以买个创可贴贴在伤口处会有帮助. 我当时是不相信的, 因为在我的认知里, 创可贴是治割伤的, 从未听说过可以治磨脚引起的伤口. 本着死马当活马医的态度, 我去超市买了两个创可贴, 一共1元. 贴上之后, 效果远超我的想像, 当天跑步的体验感大大提升, 真就是一个"策马奔腾"...</p><p style="text-indent:2em">我由衷感到: 这5毛钱花得太值了! 恨不得再多贴几个, 哈哈哈哈. 事实是, 贴了这两个之后, 加上左脚趾的自愈能力, 左脚的磨伤已经基本好了. 但这时候右脚前期为减轻左脚的损伤, 加大了自身的磨损, 开始出现水泡. 啥也不用说了, 咱再穷也不差这几毛钱. 于是, 我又去超市买了两个创可贴, 将磨伤扼杀在萌芽当中. 考虑到长期性, 咱虽然不差这几毛钱, 但几毛钱也是钱, 于是我网购了40个创可贴(8.39元)做备用. 没错, 我嫌超市的5毛一个太贵了...</p><p style="text-indent:2em">5毛钱, 一个创可贴, 看似微不足道, 实则解决了长期困扰我的跑步磨伤问题, 其重要程度可以说无法衡量. 我是个完美主义, 喜欢在一件事上反复打磨, 将其做到极致. 就跑步磨伤这个问题, 根本解决方案是纠正跑姿, 但长期形成的习惯, 非常难改变. 但通过"创可贴"事件, 我想到可以从小处着手, <b>"未雨绸缪"或者"四两拔千斤".</b> 结合最近看的一本书<<跑步圣经>>, 里面提到跑姿不良引起磨伤的问题. 我想到可以买针对性的跑鞋或者鞋垫, 我最后买的是两双足内翻纠正鞋垫(24.8元), 效果也是出奇的好, 再一次感到物超所值. 然后, 就一发不可收拾, 我发现自己变得比以前娇情了: 我周末一般都进行长跑或者有时候运动有点过量, 第二天通常浑身酸痛, 以往都是不管, 但现在开始主动贴"狗皮膏药", 甚至恨不得把整个小腿贴满, 没办法, 那几毛钱真是太值了, 哈哈哈哈哈哈...</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自愈, 清醒, 自律</title>
    <link href="/2024/05/10/%E8%87%AA%E6%84%88-%E6%B8%85%E9%86%92-%E8%87%AA%E5%BE%8B/"/>
    <url>/2024/05/10/%E8%87%AA%E6%84%88-%E6%B8%85%E9%86%92-%E8%87%AA%E5%BE%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-success">            <p><strong>希望能早日意识到: 自己真的很好, 因为我永远乐观勇敢. 遇到事会消沉难过, 但我真的很会治愈自己.</strong></p>          </div>        <div id="aplayer-wlLIBugF" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"theme":"#3f89c8","music":[{"title":"Trouble I'm","author":"Twinbed","url":"/music_player/play_list/Trouble-I-Am-In/Trouble-I-Am-In.mp3","pic":"/music_player/play_list/Trouble-I-Am-In/Trouble-I-Am-In.jpg","lrc":"/music_player/play_list/Trouble-I-Am-In/Trouble-I-Am-In.lrc"}]};  options.element = document.getElementById("aplayer-wlLIBugF");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script><div class="note note-light">            <p style="text-indent:2em">人只活一次, 你怎么舍得让自己短暂的一生是丑陋的, 你怎么舍得让自己短暂的一生只是在往下坠落. 即便是坠落, 也应该具有落日般的华丽吧. 这个世界上只有两种力量, 一种向上的力量, 向光; 一种向下的力量, 叫重力. 如果我们想让自己永葆美丽, 永葆内心的一种健康, 一种清澈, 一种清新, 一种和谐, 我们就要不断地在自己有生之年永不停歇地往上成长, 不断地成长. 唯有 grow up, 才能够抵御住 grow old 的向下的力量. 有一天我们的机体都会坏掉, 都会不怎么听话. 没关系, 让你的精神向着光, 不断地成长, 不断地越来越真, 越来越善, 越来越美丽. 你会慢慢地活成一束光, 谁若接近你就是接近光. 这是人生在世对自己的一种责任和使命啊. </p><p align="right">by 复旦大学 陈果教授</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown and HTML 语法</title>
    <link href="/2024/05/09/Markdown-HTML-%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/05/09/Markdown-HTML-%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><ul><li>页内标题的引用: <code>[链接文本](#要引用的标题名)</code></li></ul><h1 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h1><ul><li>强制分页: <code>&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;</code> (导出 PDF 生效)</li></ul><h1 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h1><ul><li>段内换行: <code>&lt;br&gt;</code>, </li><li>空格: 非换行 (<code>&amp;nbsp;</code>), 半角 (<code>&amp;ensp</code>)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebDesign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim 使用技巧</title>
    <link href="/vim/"/>
    <url>/vim/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li>buffer 切换<ul><li>bp: 切换到上一个</li><li>b #: 切换到前一个</li><li>ls: 查看 buffer 列表</li><li>b num: 切换到指定编号的 buffer</li></ul></li><li>查看启动用时明细: 终端输入 <code>vim --startuptime ./startup.log</code>, 将在当前目录下生成文件 <code>startup.log</code> 文件</li></ul><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="vim-surround"><a href="#vim-surround" class="headerlink" title="vim-surround"></a>vim-surround</h2><p>A plugin for deleting, changing, and adding “surroundings”</p><ul><li><a href="https://github.com/tpope/vim-surround/tree/master">GitHub 链接</a>, <a href="https://vimawesome.com/plugin/surround-vim">VimAwesome 链接</a></li><li>普通模式下命令: <code>[motions]s/S[text_objects][surroundings]</code><ul><li><strong>当命令用 S 时: 表示将 surroundings 单独放在一行</strong></li><li>motions: y (增加), c (改变), d (删除)</li><li>text_objects: [i&#x2F;a]w, s (current line), t (tag, 可带参数), f (function), surroundings</li><li>surroundings: ) (b), } (B), &gt; (r), ‘, “, <strong>HTML tag</strong> (当使用 (, { 时, 会添加空格环绕)</li></ul></li><li>可视模式 (按下 <code>v/V</code>) 下命令: <code>S[surroundings]</code></li><li>当安装 <a href="#vim-repeat">repeat.vim</a> 后可使用 <code>.</code> 重复执行上一个 surrounding 操作</li><li><a href="https://github.com/tpope/vim-surround/blob/master/doc/surround.txt">详细帮助文档</a></li></ul><h2 id="vim-repeat"><a href="#vim-repeat" class="headerlink" title="vim-repeat"></a>vim-repeat</h2><p>Repeat.vim rempas <code>.</code> in a way that plugins can tag into it <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[vim-repeat](https://github.com/tpope/vim-repeat)">[1]</span></a></sup></p><h2 id="vim-subversive"><a href="#vim-subversive" class="headerlink" title="vim-subversive"></a>vim-subversive</h2><p>Subversive.vim support quickly substitutions <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[vim-subversive](https://github.com/svermeulen/vim-subversive)">[3]</span></a></sup></p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-comment">&quot; Plugin &#x27;svermeulen/vim-subversive&#x27;</span><br><span class="hljs-comment">&quot; let g:subversiveCurrentTextRegister=&#x27;r&#x27;</span><br><span class="hljs-comment">&quot; s for substitute</span><br><span class="hljs-keyword">nmap</span> s <span class="hljs-symbol">&lt;plug&gt;</span>(SubversiveSubstitute)<br><span class="hljs-keyword">nmap</span> ss <span class="hljs-symbol">&lt;plug&gt;</span>(SubversiveSubstituteLine)<br><span class="hljs-keyword">nmap</span> S <span class="hljs-symbol">&lt;plug&gt;</span>(SubversiveSubstituteToEndOfLine)<br></code></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li><code>s</code> + <code>motion</code>: 替换 motion 表示的内容</li><li><code>ss</code>: 替换整行</li><li><code>S</code>: 替换到行尾</li></ul><h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><h2 id="常用表达式"><a href="#常用表达式" class="headerlink" title="常用表达式"></a>常用表达式</h2><ul><li>每一行行首添加两个空格: <code>:%s/^/  /</code></li><li>每一<strong>非空</strong>行行首添加两个空格: <code>:%s/^\(.\)/  \1/</code> 或者 <code>:%s/\S/  &amp;/</code> (<code>&amp;</code> 表示引用查找到的字符串)</li><li>查找到的数字都加 1: <code>:%s/\d\+/\=submatch(0)+1/g</code></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul><li><code>.</code>: 任意单个字符</li><li><code>*</code>: 匹配前一个字符零次或多次。</li><li><code>\+</code>: 匹配前一个字符一次或多次。</li><li><code>\?</code>: 匹配前一个字符零次或一次。</li><li><code>^</code>: 匹配行首</li><li><code>$</code>: 匹配行尾</li><li><code>\( \)</code>: 捕获子组</li><li><code>\1</code>: 引用子组</li><li><code>\|</code>: 逻辑 “或” 操作</li></ul><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><ul><li><code>\S</code>: 任意非空白字符</li><li><code>\s</code>: 任意空白字符</li><li><code>\d</code>: 任意数字</li></ul><h1 id="内容编辑"><a href="#内容编辑" class="headerlink" title="内容编辑"></a>内容编辑</h1><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><ul><li><code>gUiw</code>: 将光标下单词转换为大写</li><li><code>guiw</code>: 将光标下单词转换为小写</li><li><code>g~iw</code>: 将光标下单词大小写互换</li></ul><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><p>对于临时配置, 直接在命令模式下输入命令. 对于永久配置, 需要将命令写入 <code>_vimrc</code> 配置文件当中.</p><h2 id="命令备注"><a href="#命令备注" class="headerlink" title="命令备注"></a>命令备注</h2><ul><li><code>set</code>: 全局设置, 影响所有缓冲区和窗口</li><li><code>setlocal</code>: 本地设置, 公影响当前缓冲区和窗口</li></ul><h2 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h2><p>启用检查: </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-comment">&quot; 开启检查</span><br><span class="hljs-keyword">set</span> spell<br><span class="hljs-comment">&quot; 关闭检查</span><br><span class="hljs-comment">&quot; set nospell</span><br><span class="hljs-comment">&quot; 检查语言设置, cjk 表示中日韩语言, 添加后可不对中文报错</span><br><span class="hljs-keyword">set</span> spelllang=en_us,cjk<br></code></pre></td></tr></table></figure><p>常用命令:</p><ul><li><code>]s</code>: 光标移动到下一个拼写错误处</li><li><code>[s</code>: 光标移动到上一个拼写错误处</li><li><code>zg</code>: 将单词加入词典</li><li><code>zw</code>: 将单词从词典中移除</li><li><code>zug/w</code>: 撤销 <code>g/w</code> 的操作</li><li><code>z=</code>: 拼写建议</li></ul><p>扩展: 通过设置 <code>spellfile</code> 变量加载自定义字典. 若有多个字典, 常用命令前以数字开头表示对相应的字典操作. <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[XU3352. Vim 实用技巧进阶_拼写检查)](https://xu3352.github.io/linux/2019/01/15/practical-vim-skills-chapter-20)">[2]</span></a></sup></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/tpope/vim-repeat">vim-repeat</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://xu3352.github.io/linux/2019/01/15/practical-vim-skills-chapter-20">XU3352. Vim 实用技巧进阶_拼写检查)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/svermeulen/vim-subversive">vim-subversive</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 系统管理</title>
    <link href="/usys/"/>
    <url>/usys/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="网页工具-Cockpit"><a href="#网页工具-Cockpit" class="headerlink" title="网页工具 (Cockpit)"></a>网页工具 (Cockpit)</h1><p>使用 <em>Cockpit</em> 可通过网页来监视和管理 Ubuntu, 安装及开启命令如下: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install cockpit<br>sudo systemctl <span class="hljs-built_in">enable</span> --now cockpit.socket<br></code></pre></td></tr></table></figure><p>打开浏览器, 输入<code>HOST_IP:9090</code>, 使用具有 <em>sudo</em> 权限的帐户登陆, 便可进行管理</p><p>此方法创建的帐户不方便终端操作, 不建议 (原因之一在于终端使用 <code>\bin\sh</code>, 而不是 <code>\bin\bash</code>, 可通过命令进行修改: <code>sudo usermod -s /bin/bash user_name</code>)</p><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li>查看系统版本: <code>lsb_release</code> (Linux Standard Base release)</li><li>定期执行命令, 实时显示结果: <code>wath [opts] commands</code> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Dontla. linux watch命令（定期执行命令，实时显示输出结果）.CSDN](https://blog.csdn.net/Dontla/article/details/133911043)">[1]</span></a></sup><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># opts: -n time (每 time 刷新一次); -d (突出变化); -t (关闭命令顶部的标题)</span><br><span class="hljs-comment"># 实时查看显存占用情况</span><br>watch -n 3 -d nvidia-smi<br></code></pre></td></tr></table></figure></li><li>查看 IP 地址: <code>hostname -I</code></li><li>查看可执行文件对于共享库的依赖: <code>ldd [-v] prg_path</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ldd $(<span class="hljs-built_in">which</span> zsh)<br></code></pre></td></tr></table></figure></li><li>查看网络 scoket 相关信息: <code>netstat/ss -tunap</code> (Listen or Established)</li><li>查看系统服务状态: <code>systemctl status 服务</code> | <code>service 服务 status</code></li><li>查看文件被哪些进程使用: <code>lsof /path/to/file</code> (List Open Files)</li></ul><h2 id="路径与简介"><a href="#路径与简介" class="headerlink" title="路径与简介"></a>路径与简介</h2><ul><li><code>which [-a]</code>: 可<strong>执行文件</strong>的绝对路径, 信赖于 <code>$PATH</code></li><li><code>type [-a]</code>: 显示命令类型 (别名, 内置, 外部)</li><li><code>command -v</code>: 类似 <code>which</code></li><li><code>whatis</code>: 显示命令的简短描述</li><li><code>whereis [-b, -s, -m]</code>: 查找命令的二进制 [b], 源码 [s] 和手册 [m] (所有相关文件)</li><li><code>man</code>: 查看命令的帮助手册 (<code>q</code> 退出)</li></ul><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li><code>cmd --help/-h</code>: 快速使用指南, 比 <code>man</code> 简洁</li><li><code>cmd --version/-V</code>: 版本信息</li><li><code>man cmd</code>: 完整命令手册 (<code>q</code> 退出, <code>/key_word</code> 搜索, <code>Space</code> 翻页, <code>Enter</code> 逐行滚动)<ul><li><em><code>man -k &quot;dsc_str&quot;</code>: 搜索命令 (适用知道功能, 但忘记命令名)</em></li></ul></li><li><code>info cmd</code>: 比 <code>man</code> 更详细的结构化文档</li><li><code>help cmd</code>: <strong>bash</strong> 内置帮助命令</li></ul><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li><code>find [path] [options] [operations]</code> <ul><li><strong>options</strong><ul><li>按文件名查找: <code>-name &quot;str&quot;</code> (支持通配符)</li><li>按文件类型 (文件&#x2F;目录符号) 查找: <code>-type f/d/l</code></li><li>按文件大小: <code>-size +1G</code> (大于 1G 的文件)</li><li>空文件或目录: <code>-empty</code></li></ul></li><li><strong>operations</strong><ul><li>找到后删除: <code>-delete</code></li><li>执行命令: <code>-exec cmd</code></li></ul></li></ul></li></ul><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><div class="note note-success">            <ul><li>结合 <code>less</code> 或 <code>grep</code> 命令控制输出</li><li>结合<code>kill -9 &lt;PID&gt;</code> 杀死进程</li><li><strong>最常用: <code>ps ux</code>, <code>ps aux | less</code></strong></li></ul>          </div><h3 id="ps-静态命令"><a href="#ps-静态命令" class="headerlink" title="ps 静态命令"></a><code>ps</code> 静态命令</h3><ul><li><strong><code>ps aux</code> or <code>ps -ef</code>: 查看所有进程</strong><ul><li><code>ps -ef</code> 可查看父进程号 (<code>PPID</code>)</li><li><code>ps auxww</code> 可查看完整命令 (<code>COMMAND</code>)</li></ul></li><li><code>ps -u user_name</code>: 查看指定用户的进程</li><li><code>ps -p PID</code>: 查看指定进程号的进程</li><li><code>ps aux --sort=-%key</code>: 按指定 <code>key</code> 降序输出 (cpu: CPU, mem: 内存)</li></ul><h3 id="top-动态命令-Windows-任务管理器"><a href="#top-动态命令-Windows-任务管理器" class="headerlink" title="top 动态命令 (Windows 任务管理器)"></a><code>top</code> 动态命令 (<em>Windows 任务管理器</em>)</h3><ul><li>启动选项<ul><li><code>-u user_name</code>: 监控指定用户的进程</li><li><code>-p PID</code>: 监控指定 PID 的进程</li><li><strong><code>-c</code>: 显示完整命令路径</strong></li><li><code>-d time</code>: 刷新间隔秒数</li><li><code>-n times</code>: 刷新指定次数退出</li></ul></li><li>交换快捷键<ul><li><code>h</code>: 帮助信息</li><li><code>空格</code>: 立即刷新</li><li><strong><code>P</code> or <code>M</code>: 按 CPU | 内存使用排序</strong></li><li><strong><code>N</code>: 按 PID 排序</strong></li><li><strong><code>k</code>: 杀死进程 (输入 <code>PID</code> 及信号)</strong></li><li><strong><code>c</code>: 完整命令显示切换</strong></li><li><strong><code>R</code>: 逆序显示</strong></li><li><code>i</code>: 切换显示闲置或者僵尸进程</li><li><code>q</code>: 退出</li><li><code>T</code>: 按运行时间排序</li></ul></li></ul><h3 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a><code>pgrep</code></h3><p><code>pgrep [选项] &lt;进程名或模式&gt;</code>. 快速查找进程 <code>PID</code> (<code>ps + grep</code>), 特别适用于脚本. <a href="#pkill"><code>pkill</code></a> 的<strong>查询版</strong>, 两者选项有交叉</p><ul><li><code>-l</code>: 同时显示进程名</li><li><code>-a</code>: 显示完整命令行 (类似于 <code>ps -f</code> 的效果)</li><li><code>-u user_name</code>: 指定用户</li><li><code>-x</code>: 精确匹配进程名</li><li><code>-f command</code>: 匹配完整命令行</li><li><code>-c</code>: 统计进程数</li></ul><h2 id="终止"><a href="#终止" class="headerlink" title="终止"></a>终止</h2><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a><code>kill</code></h3><p><code>kill [选项][信号] [PID]</code></p><ul><li>信号<ul><li><code>9=SIGKILL</code>: 强制终止</li><li><code>15=SIGTERM</code>: 优雅终止, 默认信号, 允许清理资源后退出</li></ul></li><li>选项<ul><li><code>l</code>: 列出所有信号名称</li></ul></li></ul><h3 id="pkill"><a href="#pkill" class="headerlink" title="pkill"></a><code>pkill</code></h3><p>更灵活, 支持<strong>模糊匹配</strong>与正则表达式</p><ul><li><code>-u user_name</code>: 杀死特定用户的<strong>所有</strong>进程</li><li><code>-x process_name</code>: 匹配精准进程名</li><li><code>-f command</code>: 匹配完整命令行</li><li><code>-n/o process_name</code>: 杀死最新&#x2F;旧的匹配进程</li></ul><h3 id="killall"><a href="#killall" class="headerlink" title="killall"></a><code>killall</code></h3><p>精确匹配, 批量杀死进程</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>若没有特别说明, 表示在 <code>~/.bashrc</code> (bash) 或者 <code>~/.zshrc</code> (zsh) 写入</p><h2 id="历史命令保存"><a href="#历史命令保存" class="headerlink" title="历史命令保存"></a>历史命令保存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 取消保存历史命令的执行时间</span><br><span class="hljs-built_in">export</span> HISTTIMEFORMAT=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># 自定义历史命令路径</span><br><span class="hljs-built_in">export</span> HISTFILE=/path/to/custom_history<br></code></pre></td></tr></table></figure><h2 id="同一个帐号加载不同配置文件"><a href="#同一个帐号加载不同配置文件" class="headerlink" title="同一个帐号加载不同配置文件"></a>同一个帐号加载不同配置文件</h2><p>场景: 多人使用同一个帐户, 允许单独使用每个人自己定义的配置文件 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[王bourne. 多人共用一个Linux用户, 实现Bash配置文件独立. 博客园](https://www.cnblogs.com/wbourne/p/16485712.html)">[2]</span></a></sup></p><p>解决方案: 使用 <code>ssh</code> 登陆时, 执行与配置文件相关的命令 <code>bash --rcfile /path/to/custom_.bashrc</code></p><p>命令: <code>ssh -t user@host bash --rcfile /path/to/custom_.bashrc</code> (<code>-t</code> 表示分配一个终端, 不可缺少)</p><p>扩展: 可把上述命令定义成一个别名 (alias), 简化输入</p><h2 id="docker-容器配置中国标准时间-CST"><a href="#docker-容器配置中国标准时间-CST" class="headerlink" title="docker 容器配置中国标准时间 (CST)"></a>docker 容器配置中国标准时间 (CST)</h2><ul><li>无法使用 <code>timedatectl</code> 命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先决条件: 安装时区数据库</span><br>sudo apt update &amp;&amp; sudo apt install -y tzdata<br><span class="hljs-comment"># 设置时区</span><br>sudo <span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><span class="hljs-comment"># 更新时区</span><br>sudo dpkg-reconfigure -f noninteractive tzdata<br><span class="hljs-comment"># 验证输出为 Asia/Shanghai</span><br><span class="hljs-built_in">cat</span> /etc/timezone<br><span class="hljs-comment"># timedatectl 查看当前时区</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="中文字体支持"><a href="#中文字体支持" class="headerlink" title="中文字体支持"></a>中文字体支持</h2><ul><li>安装 <code>locales</code> 包: <code>sudo apt install locales</code> (可选)</li><li>查看当前语言环境: <code>locale</code></li><li>查看系统支持的语言环境: <code>locale -a</code></li><li><strong>安装 <code>zh_CN.utf8</code> 字符集 (简体中文语言包): <code>sudo apt install language-pack-zh-hans</code></strong></li><li>生成 <code>zh_CN.utf8</code> 语言环境 (可选, 先通过 <code>locale -a</code> 验证) <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更改系统语言环境生成列表</span><br>sudo vim /etc/locale.gen<br><span class="hljs-comment">## 将 zh_CN.UTF-8 UTF-8 注释掉</span><br><span class="hljs-comment">## 终端生成</span><br>sudo locale-gen<br><br><span class="hljs-comment"># 终端直接生成</span><br>sudo locale-gen zh_CN.UTF-8<br><br><span class="hljs-comment"># 生成的语言环境位置</span><br><span class="hljs-built_in">ls</span> /usr/lib/locale/<br></code></pre></td></tr></table></figure></li><li><strong>切换 <code>zh_CN.utf8</code> 语言环境 (<code>locale</code> 验证)</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 用户级配置 (推荐)</span><br>vim ~/.zshrc<br><span class="hljs-built_in">export</span> LANG=zh_CN.UTF-8<br><span class="hljs-built_in">export</span> LANGUAGE=zh_CN:zh<br><span class="hljs-built_in">export</span> LC_ALL=zh_CN.UTF-8<br><span class="hljs-comment">## 立即生效</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br><br><span class="hljs-comment"># 系统级 locale 默认配置文件</span><br>sudo vim /etc/default/locale<br><span class="hljs-comment">## 添加或者修改如下内容</span><br>LANG=zh_CN.UTF-8  <span class="hljs-comment"># 最主要</span><br>LANGUAGE=zh_CN:zh<br>LC_ALL=zh_CN.UTF-8<br><span class="hljs-comment">## 或者在终端通过下面的命令修改</span><br>sudo update-locale LANG=zh_CN.UTF-8 LANGUAGE=zh_CN:zh LC_ALL=zh_CN.UTF-8<br><span class="hljs-comment">## 生效</span><br><span class="hljs-built_in">source</span> /etc/default/locale<br></code></pre></td></tr></table></figure></li></ul><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><h2 id="cron-定时任务"><a href="#cron-定时任务" class="headerlink" title="cron 定时任务"></a><code>cron</code> 定时任务</h2><ul><li><code>crontab -e</code>: 编辑当前用户的 cron 任务, 文件保存在 <code>/var/spool/cron/crontabs/USER_NAME</code> 目录下 (不要直接编辑源文件, 以免格式或权限错误)</li><li><code>crontab -l</code>: 查看当前用户的 cron 任务</li><li>内容格式: 5 个时间段<strong>空格</strong>命令<ul><li>5 个时间段: <code>* * * * *</code><ul><li>分钟 (0-59)</li><li>小时 (0-23)</li><li>日 (1-31)</li><li>月 (1-12)</li><li>星期 (0-7)</li></ul></li><li><code>*</code> 表示<strong>每</strong></li><li><code>*/n</code> (斜杠 + 数字): 每隔 n 个单位执行一次</li><li><code>,</code>: 多个离散值</li><li><code>-</code>: 范围</li><li><code>#</code>: 注释</li></ul></li><li>实例<ul><li><code>0 6 */3 * * find $HOME/Temp/auto_delete -mindepth 1 -mtime +3 -print -exec rm -rf &#123;&#125; \; &gt; $HOME/Temp/auto_delete/delete_$(date +\%Y\%m\%d).log 2&gt;&amp;1</code>: 每隔三天, 早上 6 点删除三天前的文件及目录并将删除的文件与目录路径写入日志文件 (<code>-print</code>) (<code>HOME</code> 变量要么使用绝对路径, 要么在顶部定义 <code>HOME=...</code>)</li></ul></li></ul><h1 id="apt-dpkg-软件包安装与管理"><a href="#apt-dpkg-软件包安装与管理" class="headerlink" title="apt | dpkg 软件包安装与管理"></a>apt | dpkg 软件包安装与管理</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><code>apt update</code>: 更新软件包列表</li><li><code>apt upgrade</code>: 更新已安装的软件包</li><li><code>apt search pkg</code>: 查找包</li><li><code>apt install pkg</code> 或 <code>dpkg -i pkg.deb</code>: 安装包</li><li><code>apt install -f</code>: 修复依赖关系</li><li><code>apt list --installed</code>: 列出所有已安装包</li><li><code>apt-mark showmanual</code>: 仅显示手动安装的包名 (无版本信息)</li><li><code>apt-mark showmauto</code>: 仅显示自动安装的包名 (无版本信息)</li><li><code>apt show pkg</code> 或 <code>dpkg -s pkg</code>: 查看某个包详细信息</li><li><code>dpkg -L pkg</code>: 查看包的所有文件安装路径</li><li><code>dpkg -S command_path</code>: 查看命令属于哪个包</li><li><code>dpkg -C pkg</code>: 查看包内容</li><li><code>apt remove pkg</code> 或 <code>dpkg -r pkg</code>: 卸载</li><li><code>apt purge pkg</code> 或 <code>dpkg -P pkg</code>: 卸载并清除配置</li><li><code>apt autoremove</code>: 清除旧版本包</li></ul><h2 id="命令辨析"><a href="#命令辨析" class="headerlink" title="命令辨析"></a>命令辨析</h2><ul><li><code>dpkg</code> 是直接针对 <code>.deb</code> (本地) 文件进行底层管理, 而 <code>apt install</code> 则是依赖 <code>dpkg</code> 的高层管理工具, 从软件源 (<code>/etc/apt/sources.list</code> &amp;&amp; <code>/etc/apt/sources.list.d/</code>) 安装, <strong>解决依赖关系</strong></li><li><code>apt-get</code>: 稳定, 适合<strong>脚本和自动化任务</strong></li><li><strong><code>apt</code>: 结合了 <code>apt-get</code> 和 <code>apt-cache</code> 的功能, 输出易于阅读, 适合日常终端操作</strong></li></ul><h1 id="AIC-使用"><a href="#AIC-使用" class="headerlink" title="AIC 使用"></a>AIC 使用</h1><h2 id="基础镜像配置"><a href="#基础镜像配置" class="headerlink" title="基础镜像配置"></a>基础镜像配置</h2><ul><li>到 dokerhub 下载 ubuntu 20.04</li><li><strong>zsh, tmux 自定义安装与配置: 环境变量, 动态库</strong></li><li><strong>autojump 源码安装</strong></li><li>中文 (<code>zh_CN.utf8</code>) 环境支持: <code>apt install language-pack-zh-hans</code></li><li>基本软件: <code>zip, git, vim, tree, wget</code></li><li>安装 Minniconda</li><li>安装 CUDA 与 cuDNN</li><li>额外包: <ul><li><code>iputils-ping</code>: <code>ping</code> 网络诊断</li><li><code>binutils</code>: <code>strings</code> 提取二进制文件中的可打印字符串</li><li><code>iproute2</code>: <code>ip addr</code> 查看 IP 地址</li></ul></li></ul><h2 id="容器连接"><a href="#容器连接" class="headerlink" title="容器连接"></a>容器连接</h2><ul><li><strong>以 <code>admin</code> 为跳板机, 本地电脑 “一键” 连接到容器: <code>ssh -J aic_admin user@container_ip</code></strong>. <em>结合 <code>.ps1, .sh</code> 脚本与 <code>ProxyCommand</code> 配置可根据容器名称自动解析容器 IP, 连接到对应容器, 可参考 <a href="/ssh/#%E8%B7%B3%E6%9D%BF%E6%9C%BA">SSH 跳板机</a></em></li><li>以 <code>admin</code> 为跳板机, 将<strong>本地电脑</strong>端口 (<code>local_port</code>) 转发到容器: <code>ssh -L local_port:container_ip:port aic_admin</code><ul><li>当 <code>port</code> 为 22 时, 本地电脑通过 <code>ssh -p local_port@localhostl</code> 直接进入容器</li><li>当 <code>port</code> 为 6006 时, 本地电脑可在浏览器中输入 <code>http://localhost:6006</code> 访问到容器的 <code>http://localhost:6006/</code> 服务, 常用于 <strong>tensorboard</strong></li></ul></li><li>在<strong>容器内部</strong>进行远程端口转发, <code>ssh -R 2222:localhost:22 local_user@local_ip</code>, 本地电脑从转发端口进入容器: <code>ssh -p 2222 container_user@localhost</code></li><li><strong>进入容器同时端口转发</strong>  (使用默认位置的密钥)<ul><li>已配置 <code>config</code> 文件: <code>ssh -J aic_admin -L local_port:localhost:port user@container_ip</code></li><li>仅仅添加<code>公钥</code>: <code>ssh -J user@aic_ip -L local_port:localhost:port user@container_ip</code></li></ul></li></ul><h2 id="访问容器内部的-Web-服务"><a href="#访问容器内部的-Web-服务" class="headerlink" title="访问容器内部的 Web 服务"></a>访问容器内部的 Web 服务</h2><h3 id="核心术语"><a href="#核心术语" class="headerlink" title="核心术语"></a>核心术语</h3><ul><li>绑定地址, 如 <code>--host</code></li><li>URL 路径前缀, 如 <code>--path_prefix</code></li></ul><h3 id="通过平台-SCOKET-服务端口"><a href="#通过平台-SCOKET-服务端口" class="headerlink" title="通过平台 SCOKET 服务端口"></a>通过平台 SCOKET 服务端口</h3><ol><li>创建容器时, 端口填计划部署的数值, 如 <code>8888</code></li><li>容器创建成功后, 记下转发后的端口, 如 <code>10006</code></li><li>在容器内部部署服务, 并绑定地址为 <code>0.0.0.0</code> (通配地址, 监听所有可用网络接口). 成功标志: <code>http://0.0.0.0:8888/</code> (如果是 <code>localhost</code> 或者 <code>127.0.0.1</code> 表示绑定本地地址, 外部通常无法访问)</li><li>在本地电脑网页端通过 <code>http://aic_ip/10006</code> (第 2 步容器创建成功后给出的端口号)</li></ol><h3 id="通过平台-HTTP-服务端口转发"><a href="#通过平台-HTTP-服务端口转发" class="headerlink" title="通过平台 HTTP 服务端口转发"></a>通过平台 HTTP 服务端口转发</h3><ol><li>创建容器时, 端口填计划部署的数值, 如 <code>8888</code></li><li>容器创建成功后, 记下转发后的 URL 路径前缀, 如 <code>/aiforward90719120898234777</code></li><li>在容器内部部署服务, 成功标志: <code>http://0.0.0.0:8888/aiforward907191208982347776/</code> (如果是 <code>localhost</code> 或者 <code>127.0.0.1</code> 表示绑定本地地址, 外部通常无法访问)<ul><li>绑定地址为 <code>0.0.0.0</code> (通配地址, 监听所有可用网络接口). </li><li>URL 路径前缀为 <code>/aiforward90719120898234777</code> (第 2 步容器创建成功后转发的路径前缀)</li></ul></li><li>在本地电脑网页端通过 <code>http://aic_ip/aiforward907191208982347776</code> (第 2 步容器创建成功后给出的完整网址)</li></ol><h3 id="通过-SSH-端口转发功能"><a href="#通过-SSH-端口转发功能" class="headerlink" title="通过 SSH 端口转发功能"></a>通过 SSH 端口转发功能</h3><ul><li>在本地电脑通过 <code>-L</code> 实现<ol><li>将本地电脑的 SSH 公钥 (<code>id_rsa.pub</code>) 追加到 <code>admin</code> 容器 (<code>authorized_keys</code>), 实现免密登陆 </li><li><strong>本地电脑</strong>终端进行端口转发并进入容器: <code>ssh -J user@aic_ip -L local_port:localhost:serve_port user@container_ip</code>, 其中 <code>serve_port</code> 填计划部署的端口号, <code>local_port</code> 填本地计划用来访问的端口号 (可与 <code>serve_port</code> 相同). <strong>如果执行命令后, 能进入到<em>容器</em>, 表示此步操作成功</strong></li><li>在本地电脑浏览器通过 <code>localhost:local_port</code> 访问容器内 <code>serve_port</code> 下的 Web 服务</li></ol></li><li>在容器内通过 <code>-R</code> 实现<ol><li>本地 (Windows) 电脑安装 <code>OpenSSH</code> 服务 (可参考网上教程或 <a href="/2024/07/06/Windows-%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/#SSH-%E6%9C%8D%E5%8A%A1">Windows SSH 服务</a>)</li><li>在<strong>容器</strong>终端进行端口转发并进入本地电脑: <code>ssh -R local_port:localhost:serve_port local_user@local_ip</code>, 其中两个 <code>port</code> 参数同上面 <code>-L</code> 的实现, <code>local_user</code> 和 <code>local_ip</code> 表示登陆到<strong>本地电脑</strong>的<code>用户名</code>和<code>IP 地址</code>. <strong>如果执行命令后, 能进入到<em>本地电脑</em>, 表示此步操作成功</strong></li><li>同 <code>-L</code> 实现的第 iii 步</li></ol></li></ul><h2 id="终端关闭容器"><a href="#终端关闭容器" class="headerlink" title="终端关闭容器"></a>终端关闭容器</h2><ul><li>杀死 <code>sshd</code> 进程: <code>pgrep -f &quot;/usr/sbin/sshd -D&quot; | xargs sudo kill -TERM</code> (模糊匹配, 兼容 VSCode)</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/Dontla/article/details/133911043">Dontla. linux watch命令（定期执行命令，实时显示输出结果）.CSDN</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.cnblogs.com/wbourne/p/16485712.html">王bourne. 多人共用一个Linux用户, 实现Bash配置文件独立. 博客园</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Writing...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机常用软件与个性化配置</title>
    <link href="/2024/05/05/%E6%89%8B%E6%9C%BA%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E4%B8%8E%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/05/05/%E6%89%8B%E6%9C%BA%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E4%B8%8E%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="必备软件"><a href="#必备软件" class="headerlink" title="必备软件"></a>必备软件</h1><ol><li>微信阅读</li><li>宜准跑步</li><li>微信</li><li>哔哩哔哩</li><li>中国银行</li><li>酷狗音乐</li><li>支付宝</li><li>淘宝</li><li>高德地图</li><li>一键锁屏</li><li>铁路12306</li></ol><h1 id="可选软件"><a href="#可选软件" class="headerlink" title="可选软件"></a>可选软件</h1><ul><li>企业微信</li><li>小红书</li></ul><h1 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h1><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><ul><li>深色模式</li><li>桌面图标整理</li></ul><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><ul><li>定时开关机</li><li>通知提醒</li><li>振动模式</li></ul><h2 id="通讯配置"><a href="#通讯配置" class="headerlink" title="通讯配置"></a>通讯配置</h2><ul><li>短信&#x2F;电话拦截</li></ul><h2 id="百度输入法华为版"><a href="#百度输入法华为版" class="headerlink" title="百度输入法华为版"></a>百度输入法华为版</h2><ul><li>界面基本设置 (26 键五笔)</li><li><strong>修改短语同步</strong></li><li><strong>dvp 皮肤</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>不会 Debug 的程序员不是好的程序员</title>
    <link href="/2024/05/05/%E4%B8%8D%E4%BC%9A-Debug-%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8D%E6%98%AF%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    <url>/2024/05/05/%E4%B8%8D%E4%BC%9A-Debug-%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8D%E6%98%AF%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-success">            <p>记 2024 年五一假期间不出校游玩, 也没科研, 而是基本每天写 HTML “日历贡献图”</p>          </div><p style="text-indent:2em">一切起源于: 正向反馈对坚持非常重要. 4 月到 5 月期间, 学院举办了一个关于 6 周运动打卡的活动. 而我在这学期开学后已经基本养成了每天跑步 35 分钟的习惯, 所以该活动对我来说不费吹灰之力, 纯送奖品. 活动参与过程中与预想中的基本一样, 非常简单, 但其中的一个打卡环节从小来说让我最近两个月跑步更有动力, 从大来说促成了我五一假的安排及该日志的诞生.</p><p style="text-indent:2em">由于我每天都是在健身房跑步机上跑步, 并用运动手表记录, 这涉及到和手机数据的一个同步. 同时, 我跑步的时候基本不带手机, 所以我的打卡做法是每隔一周同步一次数据, 然后打卡. 在这其中我发现, <b>当看着自己一周跑步 6 天, 跑步时间, 速度, 距离基本一致, 我感到非常有成就感, 非常开心, 尤其是在周五或者周六的时候会进行长跑, 其中的公里数让我颇为自豪.</b> 打卡这一简单方式, 给我带来的这种感觉或是状态使我更加容易坚持每天按时运动, 同时学会合理调整自己的状态, 即不管当天的状态如何, 我都尽量维持自己的跑步时间, 速度和距离. 最近两个月, 我跑步的时候大都数情况下是非常开心的!</p><p style="text-indent:2em">另外一件与打卡类似的事, 我自己手写了一个月日历表, 统计每天冥想, 跑步和阅读的完成情况, 等到过一阵子 (尤其月末) 再看时, 一种和跑步打卡类似的感觉油然而生, 促使了我每天坚持冥想和阅读 (连续阅读天数达到了 50 天).</p><p style="text-indent:2em">以上两件事都可以看作记录每天的成长点滴, 定期查看, 其中的 (正) 反馈将极大促进后续的坚持.</p><p style="text-indent:2em">记录成长过程的点滴, 我觉得图表是最直观的, 于是我想到用类似 GitHub 个人首页的贡献图来记录自己每天的冥想, 阅读, 跑步等习惯. 想到就做, 通过查找资料知道可以通过 <a href="https://echarts.apache.org/zh/option.html#title">Echarts</a> 绘制, 我最开始的做法是引入 <a href="https://hexo.io/zh-cn/docs/writing">Hexo</a> 现成的 Echarts 插件, 但是可供参考的资料基本没有用插件绘制日历贡献图的, 都是一些比较简单的作图. 对于我的绘图, 一个很重要的功能是其要能随着时间或者数据的变化自动更新, 这涉及到用相关函数或者功能导入作图数据.</p> <p style="text-indent:2em">我记得五一的前几天, 我都是想着利用现有的 Hexo Echarts 插件, 然后结合网上绘制日历贡献图的教程, 但往往无法渲染出图. 由于文档本身是 <b>.md</b>, 但要想能正确地绘图, 通常都需要引入 JavaScript 代码. 不幸的是, 我对此基本没了解过. 所以对于不能出图, 我只能一遍遍检查文档, 使其尽可能和网上的参考一致. 但最后也未能如愿, 因为就算我能保证代码一致, 原理上我是利用插件, 和网上的参考直接利用 Echarts 始终有所不同, 当无法出图时, 我都不知道是哪里出问题了... 我清楚地记得, 5 月 4 号那个晚上都有点 emo 了, 甚至在淘宝上搜索关于 "HTML 网页设计" 等关键字的店铺. 我太想实现这个功能了, 当在自己有限的时间和精力范围内, 自己无法实现时, 便想依靠外力, 毕竟专人做专事. </p><p style="text-indent:2em">第二天的早上, 也就是 5 月 5 号, 假期的最后一天, 尽管前一天晚上已经决定依托外力解决问题, 但还是很不甘心, 打算自己再尝试下. 冷静下来后, 想到有没有什么办法知道为啥不出图, 就类似程序的 <b>debug</b>, 只是这时候是 HTML 或者 JavaScript 语言. 不查不知道, 一查才知道, 对于 Edge 来说, 一个 <a href="/2024/05/05/Microsoft-Edge-使用/"><b>F12</b></a> 就解决问题了, 能调出网页背后的源代码, 并可以看到出错的地方, 简直不要太清晰! 由此我得出这个假期的深刻体会之一, 也就是文章标题: <b>不会调试的程序员不是好的程序号.</b> 同样的, 在解决任何问题时, 若结果不如意, 我觉得知道哪个环节做得不好或者出问题了, 对后续成长是至关重要的. </p><p style="text-indent:2em">我在假期最后一天能得偿所愿的另一个深刻体会: <b>任何问题总有方法解决, 当找到对应的方法或者钥匙时, 问题自然迎刃而解.</b> 在知道网页调试之后, 我最终放弃了使用 Hexo Echarts 现有插件的使用, 而是完全通过 JavaScripts 脚本实现, 与网上的参考对齐, 然后 <a href="/running/"><b>I Make It!</b></a></p><div class="note note-secondary">            <p>文章开始写的日期是 5 月 5 号下午, 当天晚上也写了一部分 (我知道如果当天不写, 后面就都忘记了…), 本想着尽快写完的, 结果直到今天 (5 月 9 号) 才把后面较为关键的体会给补齐, 感觉最开始的好多体会都没有了. 严格意义上说, 这是我博客中的第一篇生活日志, 开了个头, 尽管不是很好, 但希望并相信自己用文字记录生活的能力将不断提升!</p><p align="right">2024-05-09 写于昌平实验室</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Microsoft Edge 使用</title>
    <link href="/2024/05/05/Microsoft-Edge-%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/05/05/Microsoft-Edge-%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><ul><li>页面横向滚动: <code>Shift + 鼠标滚轮</code></li></ul><h1 id="F12-调试-HTML-代码"><a href="#F12-调试-HTML-代码" class="headerlink" title="F12 调试 HTML 代码"></a>F12 调试 HTML 代码</h1><ul><li><a href="https://blog.csdn.net/qq_42159062/article/details/105991720">开发工具使用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
      <category>Windows</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础</title>
    <link href="/pbsc/"/>
    <url>/pbsc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用参考文档"><a href="#常用参考文档" class="headerlink" title="常用参考文档"></a>常用参考文档</h1><ul><li><a href="https://www.runoob.com/python/python-tutorial.html">Python 菜鸟教程</a></li><li><a href="https://docs.python.org/zh-cn/3.12/tutorial/index.html">Python 教程</a></li></ul><h1 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h1><ul><li>保持一致性</li><li>使用常见缩写</li><li>避免过渡缩写</li><li>使用首字母缩写</li><li>保留单词词干</li><li>蛇形命名法</li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>以类型注解的方式解释变量, 参考注释: </p><ul><li>基本类型: int, float, bool, tensor, ndarray</li><li><code>list[int|str]</code>: 元素为 int 或 str 类型的列表</li><li><code>dict[str,int]</code>: 键为 str 类型, 值为 int 类型的字典</li><li><code>tuple[int, str]</code>: 第一个值为 int 类型, 第二个值为 str 类型的元组</li><li><code>tuple[int, ...]</code>: 所有元素为 int 类型的元组</li><li><code>Iterable[int]</code>: 所有元素为 int 类型的可迭代对象</li><li><code>Sequence[T]</code>: 所有元素为 T 类型的序列</li><li><code>Mapping[str,int]</code>: 从 str 类型到 int 类型的映射</li></ul><p>参考:</p><ul><li><a href="https://mypy.readthedocs.io/en/stable/builtin_types.html">mypy document</a></li></ul><h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><h2 id="日志文件记录"><a href="#日志文件记录" class="headerlink" title="日志文件记录"></a>日志文件记录</h2><ul><li>将程序的运行 (标准与错误) 输出显示到终端并保存到文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># $(command) 表示将 command 的输出插入到当前命令中 (命令替换, 相当于 &quot;复合变量&quot; 值的引用)</span><br><span class="hljs-comment"># date +Format 是 date 命令的格式化输出, 用 _ 分隔日期和时间部分</span><br>python exp_runner.py 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/path_to_log/log_<span class="hljs-subst">$(date +&#x27;%H%M_%m%d_%y&#x27;)</span>.txt&quot;</span><br><br></code></pre></td></tr></table></figure></li></ul><h2 id="控制台命令"><a href="#控制台命令" class="headerlink" title="控制台命令"></a>控制台命令</h2><ul><li>查看 numpy 数组不为 0 的元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 返回非零元素的行索引与列索引</span><br>nonzero_indices = np.nonzero(array) <span class="hljs-comment"># 或者 np.where(array != 0) </span><br><span class="hljs-comment"># 获取不为零的元素</span><br>nonzero_elements= array(nonzero_indices)<br></code></pre></td></tr></table></figure></li><li>查看 Tensor 唯一值: <code>torch.unique(tensor)</code></li><li>排序 Tensor: <code>torch.sort(tensor)</code>, 返回排序后的张量及其对应的索引</li><li>检查 Tensor 的布尔值: <code>Tensor.all()/.any()</code></li><li><strong>查看变量的所有属性与方法: <code>dir(var)</code></strong></li><li><strong>查看变量特定属性或方法的说明: <code>help(var.look_item)</code> 或 <code>?var.look_item</code></strong></li></ul><h2 id="程序语句"><a href="#程序语句" class="headerlink" title="程序语句"></a>程序语句</h2><ul><li><code>try-except</code>: 捕获和处理异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 可能引发异常的代码块</span><br>    <span class="hljs-comment"># 可能会抛出异常的语句</span><br><span class="hljs-keyword">except</span> Exception1 <span class="hljs-keyword">as</span> e1:<br>    <span class="hljs-comment"># 处理 Exception1 类型的异常</span><br>    <span class="hljs-comment"># 可以访问异常对象 e1 的信息</span><br><span class="hljs-keyword">except</span> Exception2 <span class="hljs-keyword">as</span> e2:<br>    <span class="hljs-comment"># 处理 Exception2 类型的异常</span><br>    <span class="hljs-comment"># 可以访问异常对象 e2 的信息</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 可选的 else 块，在没有异常时执行</span><br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-comment"># 可选的 finally 块，无论是否发生异常都会执行</span><br></code></pre></td></tr></table></figure><h2 id="函数信息"><a href="#函数信息" class="headerlink" title="函数信息"></a>函数信息</h2><ul><li>获取参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> inspect<br>inspect.signature(fun_name).parameters<br></code></pre></td></tr></table></figure></li></ul><h2 id="对象信息"><a href="#对象信息" class="headerlink" title="对象信息"></a>对象信息</h2><ul><li><code>dir(obj)</code>: 返回对象的所有属性和方法名称列表</li><li><code>vas(obj)</code> 或 <code>obj.__dict__</code>: 查看实例自定义属性与值</li><li><code>hasattr(obj, attr)</code>: 检查属性是否存在</li><li><code>getattr(obj, attr)</code>: 获取属性的值</li><li><strong>检查属性是否可调用 (函数&#x2F;方法)</strong><ul><li><code>callable(obj.attr)</code>: 快速区分可调用对象</li><li><code>inspect.ismethod(obj.attr)</code>: 识别绑定方法</li><li><code>inspect.isfunction(obj.attr)</code>: 识别函数与静态方法</li><li><code>type(obj.attr)</code>: 查看类型</li></ul></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="命令空间"><a href="#命令空间" class="headerlink" title="命令空间"></a>命令空间</h2><p>名字 (变量名) 到对象的映射<strong>字典</strong> (标签系统)</p><ul><li>内置命名空间: Python 启动时 (<code>dir(__builtins__)</code>)</li><li>全局命名空间: 模块被导入时 (<code>globals()</code>)</li><li>局部命名空间：函数&#x2F;方法调用时 (<code>locals()</code>), 仅存在于函数执行期间</li></ul><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><p>当运行 Python 代码时, 解释器会按照下面的步骤执行文件中的代码</p><ol><li>编译阶段: Python 是解释型语言, 代码会先被编译为字节码 (Bytecode), 再交结解释器执行<ul><li>词法分析: 将代码拆分成合法的标记 (变量名, 关键字)</li><li>语法分析: 检查语法是否正确 (缩进, 括号匹配)</li><li>生成字节码: 将代码转换为 <code>.pyc</code> 文件, 存储在 <code>__pycache__</code> 目录中, 方便下次快速加载</li></ul></li><li>执行阶段<ul><li>初始化环境<ul><li>创建 <code>__main__</code> 模块的命名空间 (全局作用域)</li><li>加载内置函数到全局命名空间</li></ul></li><li>逐行执行代码<ul><li>从上到下按顺序执行代码</li><li>函数&#x2F;类定义仅存储, 不执行内部代码 (调用时执行函数体)</li></ul></li></ul></li><li>处理变量 <code>__name__</code><ul><li>当直接运行 <code>.py</code> 文件时, <code>__name__</code> 被设为 <code>__main__</code></li><li>当文件被导入 (<code>import</code>), <code>__name__</code> 是模块名</li></ul></li></ol><h2 id="import-运行机制"><a href="#import-运行机制" class="headerlink" title="import 运行机制"></a><code>import</code> 运行机制</h2><p>当 <code>import</code> 语句时, Python 会按照以下步骤加载模块或包, 并执行相关文件</p><ol><li>检查 <code>sys.modules</code> (已导入模块的字典): 查看模块是否已导入 (避免<strong>脚本内部</strong>重复导入)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">import sys<br><span class="hljs-comment"># 查看已导入的模块</span><br><span class="hljs-built_in">print</span>(sys.modules.keys())<br><span class="hljs-comment"># 强制重新导入</span><br>from importlib import reload<br>reload(package_name)<br><br></code></pre></td></tr></table></figure></li><li>查找模块文件 (如果未导入): 按 <code>sys.path</code> 顺序查找 <code>.py</code> 或 <code>.pyc</code> 文件<ul><li>查找位置: <strong>脚本所在目录 (直接运行) &#x2F; 当前工作目录 (模块方式运行)</strong> → 环境变量 <code>PYTHONPATH</code>指定的路径 → Python 标准库路径 (<code>lib/python</code>) → 第三方库路径 (<code>site-packages</code>)</li><li>查找文件: 模块 (<code>module.pyc</code> → <code>module.py</code>), 包 (<code>__init__.pyc</code> → <code>__init__.py</code>)</li></ul></li><li>编译字节码 (如果未缓存): 将 <code>.py</code> 编译为 <code>.pyc</code><ul><li>存储在 <code>__pycache__</code> 目录</li><li>如果已有 <code>.pyc</code> 且未过期 (比 <code>.py</code> 新), 则直接加载字节码</li></ul></li><li>执行模块代码: 运行模块的全局 (变量, 函数, 类定义)<ul><li><code>if __name__ == __main__</code> 块不会执行 (导入时 <code>__name__</code> 的值为模块名)</li><li>导入包时执行的是 <code>__init__.py</code></li></ul></li><li>创建模块对象: 将模块加入 <code>sys.modules</code>, 并绑定到当前<strong>全局</strong>命名空间<ul><li>模块的全局命名空间会变成一个模块对象, 将其绑定到当前命名空间</li><li>导入类时, 先完整导入模块, 然后从模块对象中获取类, 并绑定到当前命名空间</li></ul></li></ol><h2 id="字节码-pyc"><a href="#字节码-pyc" class="headerlink" title="字节码 (.pyc)"></a>字节码 (<code>.pyc</code>)</h2><ul><li>存储位置: 存放于源文件 (<code>.py</code>) <strong>同级目录</strong>下的 <code>__pycache__</code> 目录下</li><li>命名规则: <code>&#123;模块名&#125;.cpython-&#123;pyhon_version&#125;.pyc</code></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>全局变量: 在函数或类外部定义, 整个模块 (文件内有效), 修改时需先使用 <code>globa var</code> 先声明, 但<strong>可变对象</strong>可直接修改 (贴纸未变)<ul><li>作用范围是整个文件, 能否访问取决于<strong>调用</strong> (而不是定义) 时变量是否定义</li><li>函数内变量在<strong>运行</strong>时才查找, 定义时可以<strong>提前</strong>使用未定义的变量,</li></ul></li><li>局部变量: 在函数或类方法内部定义, 仅在函数&#x2F;方法内部有效, 只能在函数内修改, 退出后销毁</li><li>通过 LEGB 顺序查找变量: <ul><li>Local: 当前函数或方法的局部作用域</li><li>Enclosing: 嵌套函数的非局部作用域 (闭包)</li><li>Global: 模块级别的全局作用域</li><li>Built-in: 内置作用域</li></ul></li><li>修改全局变量: 使用 <code>global var</code> 先声明. 如果不声明, 将创建局部变量, 但可变对象可直接修改</li><li>修改嵌套函数外层中的变量 (非全局): 使用 <code>nolocal var</code> 先声明</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>定义阶段<ul><li>只解析函数的代码 (检查语法), 但不会执行函数内的逻辑, 也不会检查变量是否存在</li><li>函数内可以 “提前” 使用未定义的变量 (只要调用时变量已定义)</li></ul></li><li>参数传递方式: 引用传递 (<strong>共享传参</strong>)<ul><li>理解 <ul><li>在 Python 中变量可理解为贴纸 (标签), 而不是盒子 (C 语言), 变量只是贴在对象上的标签. 传递参数时是复制标签  (<strong>贴纸副本</strong>) (即传递对象的<strong>引用</strong>), 而不是复制对象本身</li><li>Python 所有对象存储在<strong>堆内存</strong>中, <strong>栈</strong>存储变量名和它们的引用 (对象在堆中的地址)</li><li>对象通常在代码执行时动态创建, 对于不可变对象小整数会预先存储, 对于不可变对象每次赋值都会创建对象, 对象在不再被引用时会被自动销毁</li></ul></li><li>可变对象 (列表, 字典, 自定义类实例): 会影响原始对象</li><li>不可变对象 (整数, 字符串, <strong>元组</strong>): 不影响原始对象</li><li><strong>重新赋值: 不会影响原始对象 (标签换贴)</strong></li></ul></li><li><strong>返回值: 引用传递 (贴纸)</strong><ul><li>不可变对象: 对象不可变, 外部接收后会创建新对象, 不影响返回值 (值类似于副本)</li><li>可变对象: 外部修改会影响原对象</li><li><strong>返回多个值时, 返回的是一个元组. 由于元组是不可变对象, 这能<em>保证数据不被修改</em></strong></li><li><strong>返回元组包含可变对象时, 元组本身不可变, 但内部的可变对象可变</strong></li></ul></li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li>输出多个重复字符: <code>print(N*&#39;str&#39;)</code></li><li>手动停止程序运行: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> sys<br>sys.exit(<span class="hljs-string">&quot;stop_message&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>字符串 <code>format</code> 方法 and 格式化字符串 (f-string)<ul><li>保留 pi 小数点后两位: <code>&quot;&#123;:.2f&#125;&quot;.format(pi)</code> 或 <code>f&#39;&#123;pi:.2f&#125;&#39;</code></li><li>动态保留小数点后位数: <code>&quot;&#123;:.&#123;&#125;f&#125;&quot;.format(pi, precision)</code> <code>f&#39;&#123;pi:.&#123;precision&#125;f&#125;&#39;</code></li></ul></li></ul><h1 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>Python 包: 目录下含有 <code>__init__.py</code> 文件, 通常定义 <code>__version__</code>, <code>__all__</code> 变量或直接为空</li><li>隐式命名空间包: 目录中没有 <code>__init__.py</code> 文件, 支持相对导入, 允许被<strong>其他包导入或以模块方式运行</strong></li></ul><h2 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h2><p><strong><code>sys.path</code> 是一个 Python 列表, 包含了 Python 释器在导入模块时搜索的路径顺序. 当在 Python 中执行 <code>import</code> 语句时, 解释器会按照 <code>sys.path</code> 中的路径顺序查找要导入的模块</strong></p><ul><li>导入时的运行机制: 直接导入包, 运行 <code>__init__.py</code> 文件, 导入包的子模块时, 还要运行相关子模块的 <code>__init__.py</code> 或者 <code>.py</code> 文件</li><li>相对导入<ul><li>同目录或者子目录直接导入, 跨目录使用前导点 <code>..</code></li><li>不能直接运行, 必须以模块的方式 (<code>-m</code>) 运行, 此时当前工作目录会被添加到 <code>sys.path</code> 且 <code>__package__</code> 被赋值为<strong>父包名</strong></li></ul></li><li><code>sys.path.append(extra_path)</code></li><li>设定环境变量 <code>export PYTHONPATH=&quot;extra_path:$PYTHONPATH&quot;</code> </li><li>临时调试子目录下的程序 (导入包)<ul><li>修改原文件  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&quot;./..&quot;</span>)<br><span class="hljs-comment"># 或者在原导入包前加 ..</span><br><span class="hljs-keyword">from</span> ..sud_dir_B <span class="hljs-keyword">import</span> fun<br></code></pre></td></tr></table></figure></li><li>不修改原文件<ul><li>以模块方式运行脚本 (自动添加当前目录到 <code>sys.path</code>): <code>python -m sud_dir.main</code> (注意不需要 <em>.py</em> 结尾)</li><li>临时添加包查找路径:<code>PYTHONPATH=&quot;./:$PYTHONPATH&quot; python sub_dir/main.py</code> (注意是<strong>空格</strong>分隔命令)</li></ul></li><li>鲁棒的写法  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">from</span> .utils <span class="hljs-keyword">import</span> func  <span class="hljs-comment"># 内部代码调用 (以模块方式运行)</span><br><span class="hljs-keyword">except</span> ImportError:<br>    <span class="hljs-keyword">from</span> utils <span class="hljs-keyword">import</span> func  <span class="hljs-comment"># idea 内调试模块功能 (直接运行)</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h1><h2 id="映射类型-–-dict"><a href="#映射类型-–-dict" class="headerlink" title="映射类型 – dict"></a>映射类型 – dict</h2><ul><li><code>class dict(**kwargs), dict(mapping, **kwargs), dict(iterable, **kwargs)</code>: 返回一个字典, 基于可选的位置参数和可能为空的关键字参数集来初始化</li><li><code>len(d)</code>: 返回字典 <em>d</em> 中的项数</li><li><code>list(d)</code>: 返回字典 <em>d</em> 中使用的所有键的列表, 相当于 <code>list(d.keys())</code></li><li><code>iter(d)</code>: 返回字典 <em>d</em> 中的键为元素的迭代器, 相当于 <code>iter(d.keys())</code></li><li><code>d.keys()</code>: 返回字典键组成的一个新视图</li><li><code>d.values()</code>: 返回字典值组成的一个新视图</li><li><code>d.items()</code>: 返回字典项 <code>(键, 值)</code> 组成的元组视图</li></ul><div class="note note-warning">            <p><strong>字典视图对象</strong></p><p>由 <code>dict.keys(), dict.values() 和 dict.items()</code> 所返回的对象是 <em>视图对象</em>, 提供字典条目的一个动态视图, 当字典改变时, 视图也会改变. 字典视图可被迭代以产生对应的数据, 并支持成员检测</p>          </div><h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><ul><li><code>isinstance(object, classinfo)</code><ul><li>如果参数 <em>object</em> 是参数 <em>classinfo</em> 的实例或者其子类, 则返回 <code>True</code>, 否则返回 <code>False</code></li><li>如果参数 <em>classinfo</em> 是类型对象元组, 那么 <em>object</em> 是其中任何一个类型的实例就返回 <code>True</code></li></ul></li><li><code>str(object=&#39;&#39;)</code>: 返回 <em>object</em> 的字符串版本, 如果未提供 <em>object</em> 则返回空字符串</li><li><code>var([object])</code>: 返回模块, 类, 实例或其它具有 <code>__dict__</code> 属性的对象的 <code>__dict__</code></li><li><code>sorted(iterable, key=None, reverse=False)</code>: 根据 <em>iterable</em> 中的项返回一个新的已排序<em><strong>列表</strong></em><ul><li>对字典执行 <code>list(d)</code>, 返回字典中所有键的<em>列表</em>, 按插入次序排列; 而操作 <code>sorted(d)</code> 返回字典中所有键的升序排列<em>列表</em></li></ul></li><li><code>getattr(object, name[, default])</code>: 返回对象命名属性的值, 相当于 <code>object.name</code>, 其中 <em>name</em> 必须为字符串; 如果字符串是对象的属性之一, 则返回属性值, 若属性不存在, 则返回 <code>default</code> 值</li><li><code>zip([iterable, ...])</code>: 创建一个聚合了来自每个可迭代对象中元素的<strong>元组</strong>迭代器, 其中第 <em>i</em> 个元组包含来自每个参数序列或可迭代序列对象的第 <em>i</em> 个元素</li><li><code>all(iterable)</code>: 如果 <em>iterable</em> 的所有元素均为真值 (或为空), 则返回 <em>True</em>, 否则返回 <em>False</em></li><li><code>any(iterable)</code>: 如果 <em>iterable</em> 的任一元素为真值, 则返回 <em>True</em>, 如果所有元素为假值或 <em>iterable</em> 为空, 则返回 <em>False</em></li><li><code>map(function, iterable, ...)</code>: 返回一个将 <em>function</em> 应用于 <em>iterable</em> 中每一项并输出其结果的<strong>迭代器</strong></li><li><code>tuple([iterable])</code>: 构造一个元组, 其中的项与 <em>iterable</em> 中的项具有相同的值与顺序<ul><li><em>iterable</em> : 序列, 支持迭代的容器或其他<em>可迭代对象</em></li></ul></li><li><code>super(Class, self)</code>: 返回一个代理对象, 将方法调用委托给 <em>Class</em> 的父类, 其中 <em>self</em> 可理解为 Class 的一个实例对象</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul><li>    <div class="fold">      <div class="fold-title fold-successe collapsed" data-toggle="collapse" href="#collapse-5d5d193e" role="button" aria-expanded="false" aria-controls="collapse-5d5d193e">        <div class="fold-arrow">▶</div>将两个列表转化为字典      </div>      <div class="fold-collapse collapse" id="collapse-5d5d193e">        <div class="fold-content">          <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">key_list = [k1, k2, ...]<br>value_list = [v1, v2, ...]<br>dict_from_list_by_dict = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(key_list, value_list))<br>dict_from_list_by_for = &#123;k: v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(key_list, value_list)&#125;<br>dict_from_list_by_range = &#123;key_list[i]: value_list[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key_list))&#125;<br><span class="hljs-comment"># &#123;k1: v1, k2: V2, ...&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div></li></ul>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid 博客常用配置</title>
    <link href="/2024/04/29/Hexo-Fluid-%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/04/29/Hexo-Fluid-%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="本地文章多文件夹管理"><a href="#本地文章多文件夹管理" class="headerlink" title="本地文章多文件夹管理"></a>本地文章多文件夹管理</h2><p><code>_posts</code> 目录下建立多个文件夹 → <code>_config.yml</code> 文件中配置 <code>permalink</code> 改成 <code>permalink: :year/:month/:day/:name/</code></p><h1 id="live2d-看板娘"><a href="#live2d-看板娘" class="headerlink" title="live2d 看板娘"></a>live2d 看板娘</h1><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><h2 id="模型更新"><a href="#模型更新" class="headerlink" title="模型更新"></a>模型更新</h2><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://andytonglove.github.io/2022/09/08/%E5%8D%9A%E5%AE%A2live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E9%85%8D%E7%BD%AE%2f">Andytonglove. 博客live2d看板娘配置——fluid主题</a><br>[2] <a href="https://yzs020220.github.io/posts/41158/">没有秃头基因的燊. Hexo博客添加live2d看板娘-可换装，增删模型</a></p><h1 id="自定义页添加目录"><a href="#自定义页添加目录" class="headerlink" title="自定义页添加目录"></a>自定义页添加目录</h1><p>对于自定义页的 <em>.md</em> 文件自动添加目录, 添加步骤:</p><ol><li>全局安装 <a href="https://github.com/jonschlinkert/markdown-toc?tab=readme-ov-file"><strong>mardown-toc</strong></a> 包: <code>npm install -g markdown-toc</code></li><li>在需要添加目录的文件的对应位置使用代码: <code>&lt;!-- toc --&gt;</code></li><li>在终端输入命令: <code>mardown-toc -i file_name.md</code></li></ol><h1 id="插入-Echarts-动态图表"><a href="#插入-Echarts-动态图表" class="headerlink" title="插入 Echarts 动态图表"></a>插入 Echarts 动态图表</h1><ul><li><a href="https://github.com/D-Sketon/hexo-tag-echarts-new">GitHub 链接</a></li><li><a href="https://pxxyyz.com/posts/15698/">秃头怪的自娱自乐. Fluid+ECharts</a></li><li><a href="https://glwhappen.github.io/post/js-echarts-csv/">Happen. js读取csv数据，并用Echarts展示</a></li><li><a href="https://echarts.apache.org/zh/option.html#title"><strong>ECHARTS 帮助文档</strong></a></li></ul><h1 id="增加网站运行时间"><a href="#增加网站运行时间" class="headerlink" title="增加网站运行时间"></a>增加网站运行时间</h1><ul><li><a href="https://hexo.fluid-dev.com/posts/fluid-footer-custom/">官方 Fluid</a></li><li><a href="https://blog.gumengyo.top/posts/aabbccdd/">Gumeng’s blog</a></li></ul><h1 id="插入音乐播放界面"><a href="#插入音乐播放界面" class="headerlink" title="插入音乐播放界面"></a>插入音乐播放界面</h1><ul><li><a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a></li><li><a href="https://gumengyo.github.io/posts/eeaa9988/">Gumeng. Fluid主题添加音乐功能</a></li><li><a href="https://blog.csdn.net/weixin_58068682/article/details/116612364">Chak Aciano. Hexo博客技巧：为博客插入音乐. CSDN</a></li></ul><h1 id="增加时间线-Tag-插件"><a href="#增加时间线-Tag-插件" class="headerlink" title="增加时间线 Tag 插件"></a>增加时间线 Tag 插件</h1><ul><li><a href="https://caczhtus.github.io/posts/51050/#%E6%B7%BB%E5%8A%A0-css-%E6%B8%B2%E6%9F%93%E6%96%87%E4%BB%B6">Caczhtus.【Hexo】添加 volantis 主题下的 link 及时间线标签</a></li><li><a href="https://volantis.js.org/v6/tag-plugins/#timeline">Volantis 标签插件</a></li></ul><h1 id="自定义图标"><a href="#自定义图标" class="headerlink" title="自定义图标"></a>自定义图标</h1><ul><li><a href="https://www.iconfont.cn/">iconfont</a></li><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/icon/#%E5%86%85%E7%BD%AE%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87">Fluid 自定义植图标</a></li></ul><h1 id="配置-sitemap-并提交至-Bing-搜索引擎"><a href="#配置-sitemap-并提交至-Bing-搜索引擎" class="headerlink" title="配置 sitemap 并提交至 Bing 搜索引擎"></a>配置 sitemap 并提交至 Bing 搜索引擎</h1><p>Motivation: 加快搜索引擎索引网站内容</p><ul><li><a href="https://blog.csdn.net/yzixin/article/details/133549285">pokerface168. 网站地图sitemap提交至百度、谷歌、Bing搜索引擎的方法. CSDN</a></li><li><a href="https://zhaolong.me/2019/Web-2019-09-18-Hexo-%E9%85%8D%E7%BD%AE-Sitemap-%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AE-Keywords%2f">Zhao Long. Hexo 配置 Sitemap 以及设置 Keywords</a></li></ul><h1 id="零碎参考"><a href="#零碎参考" class="headerlink" title="零碎参考"></a>零碎参考</h1><ul><li><a href="https://prinsss.github.io/get-hexo-posts-by-category-or-tag/">Hexo 获取特定分类或标签下的文章</a></li><li><a href="https://alec-97.github.io/posts/3780537372/">Alec. 添加学习进度条</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>WebDesign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch Notes</title>
    <link href="/torch/"/>
    <url>/torch/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用之前"><a href="#使用之前" class="headerlink" title="使用之前"></a>使用之前</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过<a href="https://pytorch.org/get-started/previous-versions/">官网</a>指南安装, 如 CUDA 11.3 + PyTorch 1.12</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 视觉任务通常不需要安装 torchaudio 包</span><br>conda install pytorch==1.12.0 torchvision==0.13.0 cudatoolkit=11.3 -c pytorch<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 验证 torch 是否正常安装</span><br>ipython  <span class="hljs-comment"># pip install ipython, ipython 比 python 输入更方便</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-built_in">print</span>(torch.rand(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-comment"># 验证是否支持 GPU 加速</span><br><span class="hljs-built_in">print</span>(torch.cuda.is_available())<br></code></pre></td></tr></table></figure><h2 id="运行配置"><a href="#运行配置" class="headerlink" title="运行配置"></a>运行配置</h2><ul><li><code>CUDA_VISIBLE_DEVICES</code>: 环境变量, 控制哪些 GPU 设备可用于 CUDA 程序 (可在程序运行时指定, 或者在程序中使用 <code>os.environ[&#39;CUDA_VISIBLE_DEVICES&#39;])</code> 定义)</li></ul><h1 id="设备-torch-device"><a href="#设备-torch-device" class="headerlink" title="设备 torch.device"></a>设备 <code>torch.device</code></h1><ul><li><code>torch.cuda.device_count()</code>: 获取可用 GPU 数量</li><li><code>torch.cuda.set_device(int/torch.device/str)</code>: 设置默认 GPU</li><li><code>torch.cuda.current_device()</code>: 查看当前设备</li><li><code>device = torch.device(&#39;cuda&#39;)</code>: 默认 GPU (当前设备)</li><li><code>device = torch.device(&#39;cuda:1&#39;)</code>: 指定 GPU (设备 1)</li><li><code>device = torch.device(&#39;cpu&#39;)</code>: CPU 设备</li><li><code>device = torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;)</code>: 自动选择设备</li></ul><p><strong>注: 在 PyTorch 中需要保持所有张量和模型在同一设备上</strong></p><h1 id="模型-优化器保存与加载"><a href="#模型-优化器保存与加载" class="headerlink" title="模型&#x2F;优化器保存与加载"></a>模型&#x2F;优化器保存与加载</h1><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单独保存</span><br>torch.save(target.state_dict(), ckpt_path)<br><span class="hljs-comment"># 合并保存</span><br>checkpoint = &#123;<br>    <span class="hljs-string">&#x27;model&#x27;</span>: net.state_dict(),<br>    <span class="hljs-string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(), <br>    <span class="hljs-string">&#x27;iteration&#x27;</span>: <span class="hljs-number">30000</span><br>&#125;<br>torch.save(checkponit, ckpt_name.pth)<br></code></pre></td></tr></table></figure><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">state_dict = torch.load(ckpt_path)<br>target.load_state_dict(state_dict)<br></code></pre></td></tr></table></figure><p><strong>还原能力:</strong></p><ul><li>参数值, <strong>requires_grad</strong> 属性, <del><strong>参数梯度</strong></del></li><li>优化器的超参数 (学习率, 动量…), 参数的优化状态, 当前迭代步数</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://blog.csdn.net/weixin_40522801/article/details/106563354">宁静致远*. Pytorch：模型的保存与加载. CSDN</a></li><li><a href="https://zhuanlan.zhihu.com/p/82038049">鑫鑫淼淼焱焱. PyTorch | 保存和加载模型. 知乎</a></li></ul><h1 id="优化器-torch-optim-Optimizer"><a href="#优化器-torch-optim-Optimizer" class="headerlink" title="优化器 torch.optim.Optimizer"></a>优化器 <code>torch.optim.Optimizer</code></h1><ul><li><code>param_groups</code>: 返回优化器管理的所有参数组, 为一个字典列表, 每个字典包含<ul><li><code>params</code>: 要优化的参数张量</li><li><code>lr</code>: 学习率</li><li><code>eps</code>: 数值稳定性项</li></ul></li><li><code>state</code>: 返回优化状态, 为一个字典, 包含<ul><li><code>step</code>: 当前迭代次数</li></ul></li></ul><h1 id="torchvision"><a href="#torchvision" class="headerlink" title="torchvision"></a>torchvision</h1><h2 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h2><ul><li><code>save_image(tensor, file_path)</code>: 将 tensor (N, H, W) 保存为图像</li><li>make_grid(tensor, nrow&#x3D;8, padding&#x3D;2, normalize&#x3D;False, range&#x3D;None, sacle_each&#x3D;False, pad_value&#x3D;0): make a grid of images<ul><li>tensor [B, C, H, W]</li><li><a href="https://pytorch.org/vision/stable/generated/torchvision.utils.make_grid.html">torchvision.utils.make_grid</a></li></ul></li></ul><h2 id="io"><a href="#io" class="headerlink" title="io"></a>io</h2><ul><li><code>read_image(file_path)</code>: 读取图片</li></ul><h1 id="The-Basics"><a href="#The-Basics" class="headerlink" title="The Basics"></a>The Basics</h1><h2 id="Tensors"><a href="#Tensors" class="headerlink" title="Tensors"></a>Tensors</h2><p><code>Tensors</code> 是一种特殊的数据结构, 与数组和矩阵非常相似, 在 PyTorch 中, <em>使用 Tensors 表示模型的输入和输出以及模型的参数</em></p><ul><li>Tensors 与 NumPy 中的 <code>ndarrays</code> 类似, 只是 Tensors 可以在 GPU 或其它硬件加速器上运行</li><li>Tensors 可以和 ndarray 共享相同的底层内存, 从而无需复制数据</li><li>Tensors 对自动微分进行了优化</li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><em><strong>shape: 整数元组</strong></em>  –&gt; <code>Tensor.size()</code></li><li>dtype</li><li>device: 存储设备 (默认 cpu)</li><li>dimensions: <code>Tensor.dim()=len(Tensor.shape)</code></li><li>total numbel of elments: <code>Tensor.numel()=torch.numel(tensor)</code></li></ul><h3 id="常见初始化操作"><a href="#常见初始化操作" class="headerlink" title="常见初始化操作"></a>常见初始化操作</h3><ul><li>用 <code>tensor</code> 函数转化 python 序列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br>t_data = torch.tensor(data)<br></code></pre></td></tr></table></figure></li><li>用 <code>from_numpy/tensor</code> 函数转化 NumPy 数组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">np_array = np.array(data)<br>t_np = torch.from_numpy(np_array)<br><span class="hljs-comment"># 不共享内存</span><br>t_np = torch.tensor(np_array)<br><span class="hljs-comment"># 将 tensor 转化为 NumPy 数组</span><br>np_t = tensor_var.numpy()<br></code></pre></td></tr></table></figure></li><li>已知 <code>shape</code>, 利用特殊函数创建<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">shape = (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>t_ones = torch.ones(shape)<br>t_zeros = torch.zeros(shape)<br>t_rand = torch.rand(shape, dtype=torch.<span class="hljs-built_in">float</span>)  <span class="hljs-comment"># 指定数据类型</span><br></code></pre></td></tr></table></figure></li><li>参考已知 Tensors, 利用 <code>*_like</code> 函数创建<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">t_ones = torch.ones_like(t_data)<br>t_zeros = torch.zeros_like(t_data)<br>t_rand = torch.rand_like(t_data, dtype=torch.<span class="hljs-built_in">float</span>)  <span class="hljs-comment"># 指定数据类型</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Tensor-创建函数"><a href="#Tensor-创建函数" class="headerlink" title="Tensor 创建函数"></a>Tensor 创建函数</h3><ul><li>torch.empty(*size, dtype&#x3D;None): 创建未初始化的 Tensor</li><li>torch.zeros(*size, dtype&#x3D;None)</li><li>torch.zeros_like(input, dtype&#x3D;None)</li><li>torch.ones(*size, dtype&#x3D;None)</li><li>torch.randn(*size, dtype&#x3D;None): 随机数据满足标准正太分布</li><li>torch.rand(*size, dtype&#x3D;None): 随机数据满足 (0, 1) 上的均匀分布</li><li>torh.normal(means, std) 离散正态分布</li><li>torch.linspace(start, end, steps): create a one-dimensonal tensor of <code>steps</code> whose value evenly spaced from <code>start</code> to <code>end</code></li><li>torch.arange(start&#x3D;0, end, step&#x3D;1, dtype&#x3D;None, device&#x3D;None, requires_grad&#x3D;False): return a 1-D tensor of size <code>(end - start) // step</code> with values from the <code>[start, end)</code> taken with common difference <code>step</code> beginnig from <code>start</code></li><li>torch.tensor(data, dtype&#x3D;None, device&#x3D;None, requires_grad&#x3D;False): 用数据构造一个张量</li><li>torch.Tensor(data): 用数据构造一个张量</li></ul><p><strong>Note:</strong></p><div class="note note-warning">            <p>torch.tensor() 是一个函数, 使用时对输入进行拷贝 (不是直接引用), 并根据<em>原始数据</em>生成相应的 torch.LongTensor, torch.FloatTensor, torch.DoubleTensor<br>torch.Tensor() 是一个类 (默认张量类型 torch.FloatTensor() 的别名), 使用时会调用 Tensor 类的构造函数 <strong>init</strong>, 生成<em>单精度浮点类型的张量, 也可仅指定 shape, 此时其可以看作 torch.empty() 的一个特例</em></p>          </div><h3 id="Tensor-的数据类型"><a href="#Tensor-的数据类型" class="headerlink" title="Tensor 的数据类型"></a>Tensor 的数据类型</h3><ul><li>torh.FloatTensor() 或 torch.Tenosr(): 32 位浮点数</li><li>torch.DoubleTenosr(): 64 位浮点数</li><li>torch.ShortTensor(): 16 位整型</li><li>torch.IntTensor(): 32 位整型</li><li>torch.LongTensor(): 64 位整型</li></ul><p><strong>数据类型转化:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">tesor = torch.Tensor(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 随机生成 3*5 的 tensor</span><br><span class="hljs-comment"># 转成 long 类型</span><br>newtensor = tensor.long()<br><span class="hljs-comment"># 转成半精度浮点类型 (float16)</span><br>newtensor = tensor.half()<br><span class="hljs-comment"># 转成 int 类型</span><br>newtensor = tensor.<span class="hljs-built_in">int</span>()<br><span class="hljs-comment"># 转成 short 类型</span><br>newtensor = tensor.short()<br><span class="hljs-comment"># 转成 double 类型</span><br>newtensor = tensor.double()<br><span class="hljs-comment"># 转成 float 类型</span><br>newtensor = tensor.<span class="hljs-built_in">float</span>()<br><span class="hljs-comment"># 转成 char 类型</span><br>newtensor = tensor.char()<br><span class="hljs-comment"># 转成 byte 类型</span><br>newtensor = tensor.byte()<br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>Tensor.item(): 从包含<strong>单个元素的张量</strong>中提取该元素的 Python 数值</li><li>Tensor.cpu(): 将张量从 GPU 移动到 CPU, 通常与 <code>.numpy()</code> 一起使用</li><li>Tensor.cuda(device&#x3D;None): 将张量从 CPU 移动到当前 GPU 设备 (默认) 或指定的设备, <code>device</code> 可选值为 <code>int/torch.device</code></li><li>Tensor.tolist(): return the tensor as a (nested) list. For scalars, a standard Python number is returned like <code>Tensor.item()</code> (only work for tensors with one element)</li><li>Tensor.numpy(): 将 Tensor 类型转变为 numpy 类型 (需要张量在 <code>cpu</code> 上)</li><li>Tensor.to(*arg, **kwargs): change an existing tensor’s <code>torch.device</code> and <code>torch.dtype</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">tensor = torch.rand(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>tensor.to(torch.float64)<br>cuda0 = torch.device(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br>tensor.to(cuda0)<br></code></pre></td></tr></table></figure></li></ul><h2 id="操作中参数-dim-的理解"><a href="#操作中参数-dim-的理解" class="headerlink" title="操作中参数 dim 的理解"></a>操作中参数 <code>dim</code> 的理解</h2><p><strong>The way to understand the “axis” in NumPy or “dim” in PyTorch is that it <em>collapses the specified axis. So when it collapses</em> the axis 0 (the row), it becomes just one row (column-wise)</strong></p><h2 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://blog.csdn.net/weixin_42782150/article/details/106862236">Yale曼陀罗. PyTorch学习笔记——Tensor张量的数据类型的转化、Tensor常见的数据类型、快速创建Tensor. CSDN</a><br>[2] <a href="https://mathpretty.com/12065.html">王茂南. 理解 PyTorch 中维度的概念</a><br>[3] <a href="https://towardsdatascience.com/understanding-dimensions-in-pytorch-6edf9972d3be">Boyan Barakov. Understanding dimensions in PyTorch</a></p><h1 id="torch"><a href="#torch" class="headerlink" title="torch"></a>torch</h1><ul><li>torch.mean(input): return the mean value of <strong>all</strong> elements in the <code>input</code> tensor</li><li>torch.tensor(data, *, dtype&#x3D;None, device&#x3D;None, requires_grad&#x3D;False): construct a tensor with <em>no</em> autograd history</li><li>torch.as_tensor(data, dtype&#x3D;None, device&#x3D;None): convert data into a tensor, sharing data and preserving autograd histroy <em>if possible</em><ul><li>torch.from_numpy(ndarray): create a Tensor from a numpy.ndarray, sharing the same memory</li></ul></li><li>torch.log(input): return a new tensor with the natural logirthm of the <em>elements</em> of input, $y_i &#x3D; \ln x_i$<!-- STOP HERE: 2024-04-24/22:32 --></li><li>torch.stack(): 沿着一个新维度对输入张量序列进行连接, 序列中所有的张量具有相同形状</li><li>torh.flatten(input, start_dim&#x3D;0, end_dim&#x3D;-1): reshape the input into a one-dimensional tensor</li><li>torch.split(tensor, split_size_or_sections, dim&#x3D;0): split the tensor into chunks</li><li>torch.index_select(input, dim, index, *, out&#x3D;None): <ul><li><a href="https://blog.csdn.net/qq_50001789/article/details/120315215">视觉萌新. torch.index_select()——数组索引. CSDN</a></li><li><a href="https://pytorch.org/docs/stable/generated/torch.index_select.html">TORCH.INDEX_SELECT</a></li></ul></li><li>torch.cross(input, other, dim&#x3D;None): return the cross product of vectors in dimension <code>dim</code> of <code>input</code> and <code>other</code><ul><li><a href="https://pytorch.org/docs/stable/generated/torch.cross.html">TORCH.CROSS</a></li></ul></li><li>torch.outer(input, vec2): outer product of input and vec2 (可通过坐标生成坐标网格)</li><li>torch.inverse(A) 或者 torch.linalg.inv(A): 返回矩阵 A 的逆</li><li>torch.matmul(A, B) 或者 A @ B: 矩阵相乘<ul><li><a href="https://blog.csdn.net/beauthy/article/details/121103704">柏常青. pytorch中的矩阵乘法：函数mul,mm,mv以及 @运算 和 *运算. CSDN</a></li></ul></li></ul><h2 id="数据加载-utils-data"><a href="#数据加载-utils-data" class="headerlink" title="数据加载 utils.data"></a>数据加载 utils.data</h2><ul><li><code>DataLoader</code>: <code>__len__(), __get_item__()</code></li><li><code>Sampler</code>: <code>__init__(), __iter__()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取 train_data_loader 的某个 batch</span><br>batch = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(train_data_loader))<br>target_batch_index = <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> idx, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_data_loader):<br>    <span class="hljs-keyword">if</span> idx == target_batch_index:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Batch Index:&quot;</span>, idx)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Batch Data:&quot;</span>, batch)<br></code></pre></td></tr></table></figure><h2 id="copy-与-detach"><a href="#copy-与-detach" class="headerlink" title="copy 与 detach"></a>copy 与 detach</h2><p>When we wan to graph some of our tensors. We may have a tensor that requires gradient tracking, but you want a (shallow) copy that does not. This is because <code>matplotlib</code> expects a NumPy array as input, and the implict conversion from a PyTorch tensor to a NumPy array is <strong>not enabled for tensors with <code>requires_grad=True</code></strong>. Making a <code>detached copy</code> lets us move forward.</p><h2 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h2><ul><li><a href="https://blog.csdn.net/qyhaill/article/details/103043637?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-103043637-blog-109841612.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-103043637-blog-109841612.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=3">八块腹肌怎么练. torch.optim.lr_scheduler：调整学习率. CSDN</a></li></ul><h2 id="nn"><a href="#nn" class="headerlink" title="nn"></a>nn</h2><ul><li>CrossEntropyLoss<ul><li><a href="https://blog.csdn.net/qq_36201400/article/details/111335423?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-10-111335423-blog-124689632.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-10-111335423-blog-124689632.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=13">仁义礼智信达. torch.nn.CrossEntropyLoss()用法. CSDN</a></li><li><a href="https://blog.csdn.net/weixin_45414792/article/details/120778065?spm=1001.2101.3001.6650.13&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-13-120778065-blog-124689632.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-13-120778065-blog-124689632.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=16">有点聪明的亚子1. nn.CrossEntropyLoss()交叉熵损失函数. CSDN</a></li></ul></li></ul><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><ul><li>获取所有参数: <code>nn.Module.parameters()</code> → 生成器对象<ul><li>传递给优化器: <code>torch.optim.Adam(model.parameters(), lr=0.001)</code></li><li>过滤参数: <code>torch.optim.Adam([p for p in model.parameters() if p.requires_grad])</code></li></ul></li><li>获取所有参数及其对应名称: <code>nn.Module.named_parameters()</code> → 生成器对象 <code>(name, parameter)</code></li></ul><h2 id="distributed"><a href="#distributed" class="headerlink" title="distributed"></a>distributed</h2><ul><li>基本概念<ul><li><a href="https://zhuanlan.zhihu.com/p/76638962">Pytorch 分布式训练</a></li><li><a href="https://blog.csdn.net/hxxjxw/article/details/119606518">DPP的基本概念</a></li></ul></li><li><code>launch</code>: 分布式训练运行命令<ul><li><a href="https://blog.csdn.net/magic_ll/article/details/122359490">torch.distributed.launch 命令</a></li></ul></li><li><code>init_process_group()</code>: 分布式训练初始化<ul><li><a href="https://blog.csdn.net/weixin_38252409/article/details/134965424">torch.distributed.init_process_group()详细说明</a></li></ul></li></ul><h1 id="Auto-Differentiation-with-torch-autograd"><a href="#Auto-Differentiation-with-torch-autograd" class="headerlink" title="Auto Differentiation with torch.autograd"></a>Auto Differentiation with <code>torch.autograd</code></h1><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><ul><li>是否可以求导: <code>requires_grad</code> <div class="note note-warning">            <p>自定义叶子节点默认为 <code>False</code>, 非叶子节点默认为 <code>True</code>, 神经网络参数默认为 <code>True</code>. 判断哪些节点是 <code>True/False</code> 的一个原则: 从需要求导的叶子节点到 loss 节点之间是一条可求导的通路</p>          </div>两种指定方式: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor(<span class="hljs-number">1.</span>).requires_grad_()<br>x = torch.tensor(<span class="hljs-number">1.</span>, requires_grad=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></li><li>运算名称: <code>grad_fn</code></li><li>是否为叶子节点: <code>is_leaf</code></li><li>导数值: <code>grad</code></li></ul><h2 id="梯度求解两种方式"><a href="#梯度求解两种方式" class="headerlink" title="梯度求解两种方式"></a>梯度求解两种方式</h2><h3 id="backward"><a href="#backward" class="headerlink" title="backward()"></a>backward()</h3><p>只计算满足下面条件 Tensor 的梯度 (grad)</p><ul><li>叶子节点</li><li>requires_grad &#x3D; True</li><li>依赖该 Tensor 的所有 Tensor 的 <code>requires_grad=True</code></li></ul><p>backward() 默认为累加梯度, 当多次求导或进行求解高阶导数时, 需要手动将前一次的梯度清零</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pyhton">x.grad.zero_()<br># 在神经网络中<br>optimizer.zero_grad()<br></code></pre></td></tr></table></figure><h3 id="autograd-grad"><a href="#autograd-grad" class="headerlink" title="autograd.grad()"></a>autograd.grad()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grad = torch.autograd.grad(outputs=y, inputs=x)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 取第一个元素</span><br></code></pre></td></tr></table></figure><h3 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h3><ul><li><code>retain_graph</code>: 当需要计算多个变量的梯度时, 需要设置为 True (调用 autograd.grad&#x2F;backward 后梯度图默认会释放)</li><li><code>create_graph</code>: 当需要利用得到的梯度计算高阶梯度是, 需要设置为 True, 即保留当前梯度的计算方式</li></ul><h2 id="向量求导"><a href="#向量求导" class="headerlink" title="向量求导"></a>向量求导</h2><p><strong>通常情况下, 只能标量对标量, 标量对向量求梯度</strong>. 若是需要向量求梯度, 需要先转化为标量 (而<strong>求和</strong>对分别求导没有影响). 可用代码: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">y.<span class="hljs-built_in">sum</span>().backward()<br>y.backword(torch.ones_like(y))<br><br>grad_x = torch.autograd.grad(outputs=y.<span class="hljs-built_in">sum</span>(), inputs=x)[<span class="hljs-number">0</span>]<br>grad_x = torch.autograd.grad(outputs=y, inputs=x, grad_outputs=torch.ones_like(y))[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>By default, all tensors with <code>requires_grad=True</code> are tracking their computational history and support gradient computation. However, there are some cases when we do not need to do that, for example, when we have thained the model and just want to apply it to some input data, i.e. we only want to <em>forward</em> computations through the network. We can stop tracking computations by surrounding our computiation code with <code>torch.no_grad()</code> block<br>Another way to achieve the same result is to use the <code>detach()</code> method on the tensor<br>There are reasons you might want to disable gradient tracking:</p><ul><li>To mark some parameters in your neural network as <strong>frozen parameters</strong>.</li><li>To <strong>speed up computations</strong> when you are only doing forward pass, because computations on tensors that do not track gardients would be more efficient</li></ul><p>In a forward pass, autograd does two things simultaneously:</p><ul><li>run the requested operation to compute a resulting tensor</li><li>maintain the operation’s <em>gradient function</em> in the DAG (dicected acyclic graph)</li></ul><p>The backward pass kicks off when <code>.backward()</code> is called on the DAG root, <code>autograd</code> then:</p><ul><li>computes the gradients from each <code>.grad_fn</code>,</li><li>accumulates them in the respective tensor’s <code>.grad</code> attribute</li><li>using the chain rule, propagates all the way to the leaf tensors</li></ul><p>For a vector functon, a gradient of function to parameters is given by <strong>Jacobian matrix</strong>. Instead of computing the Jacobian matrix itself, PyTorch allows you to compute <strong>Jacobian Product</strong> $v^T\cdot J$ for a given input column tensor $v$. This achieved by calling <code>backward</code> with $v$ as an argument. The size of $v$ should be the same as the size of the vector function.</p><h2 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/279758736#:~:text=PyTorc">撒旦-cc. 一文解释 PyTorch求导相关 (backward, autograd.grad). 知乎</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 文件操作</title>
    <link href="/ufile/"/>
    <url>/ufile/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h1><ul><li><code>tail -f filename</code>: 查看文件最尾部的内容, 并且不断刷新, <strong>特别适合查阅不断更新的日志文件</strong> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux tail 命令. 菜鸟教程](https://www.runoob.com/linux/linux-comm-tail.html)">[1]</span></a></sup></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># tail 常用参数</span><br>- f: 循环读取 (Ctrl + C 停止显示)<br>- n: 显示尾部行数 (默认10行)<br></code></pre></td></tr></table></figure><h1 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h1><h2 id="tar-gz-文件"><a href="#tar-gz-文件" class="headerlink" title="tar.gz 文件"></a>tar.gz 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通用参数说明</span><br>-v: 显示执行过程<br>-z: 通过 gzip 命令处理文件<br>-f: 指定备份文件<br><br><span class="hljs-comment"># 解压缩, -x 还原文件</span><br>tar -xvzf file.tar.gz<br><br><span class="hljs-comment"># 解压缩 tar.xz 文件</span><br>tar -xvf file.tar.xz<br><br><span class="hljs-comment"># 压缩并打包 -c 建立新的备份文件</span><br>tar -cvzf compact_file.tar.gz source_file<br><br><span class="hljs-comment"># 列出压缩文件内容, -t 列出备份文件内容</span><br>tar -tvzf file.tar.gz<br></code></pre></td></tr></table></figure><h2 id="zip-文件"><a href="#zip-文件" class="headerlink" title="zip 文件"></a>zip 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># zip 压缩参数说明</span><br>r: 递归处理文件和文件夹<br>q: 不显示执行过程<br>v: 显示执行过程<br>d: 从压缩文件中删除指定文件<br><br><span class="hljs-comment"># 把 zip_folder 下所有文件和文件夹打包为当前目录下的 zip_file.zip</span><br>zip -qr zip_file.zip zip_folder<br><br><span class="hljs-comment">## 从压缩文件 zip_file.zip 中删除 delete_file</span><br>zip -dv zip_file.zip delete_file<br><br><br><span class="hljs-comment"># (可能要先安装 unzip)</span><br><span class="hljs-comment"># sudo apt install unzip</span><br><br><span class="hljs-comment"># 解压到当前目录</span><br>unzip file.zip<br><br><span class="hljs-comment"># 查看 zip 压缩包含的文件</span><br>unzip -l file.zip<br></code></pre></td></tr></table></figure><h2 id="7z-文件"><a href="#7z-文件" class="headerlink" title="7z 文件"></a>7z 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 p7zip</span><br>sudo apt update<br>sudo apt install p7zip-full<br><span class="hljs-comment"># 解压文件到当前目录, -o 指定文件解压目录</span><br>7z x file.7z<br><span class="hljs-comment"># 查看解压包内容</span><br>7z l file.7z<br></code></pre></td></tr></table></figure><h1 id="文件复制-2-3"><a href="#文件复制-2-3" class="headerlink" title="文件复制 [2]-[3]"></a>文件复制 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux cp 命令. RUNOOB.COM](https://www.runoob.com/linux/linux-comm-cp.html)">[2]</span></a></sup><sup>-</sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ubuntu cp 命令](https://wenku.csdn.net/answer/c95a332c6633464794f5a97d5f18859c#:~:text=ubuntu%20cp命令%201%20-r：递归复制目录及其子目录和文件。%202%20-i：交互式复制，如果目标文件已经存在，则提示用户是否覆盖。,3%20-f：强制复制，覆盖目标文件而不提示用户。%204%20-v：显示详细的复制过程。%205%20-p：保留源文件的权限、所有权和时间戳%E3%80%82)">[3]</span></a></sup></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 复制多个文件 (夹) 到指定目录 (需要先创建) 下</span><br><span class="hljs-built_in">cp</span> -r souce_dir/ source_file object_dir/<br><span class="hljs-comment"># 不复制文件夹下特定文件到指定目录, 其余复制</span><br><span class="hljs-built_in">cd</span> source_dir<br><span class="hljs-built_in">cp</span> -r `<span class="hljs-built_in">ls</span> grep -v excluded | xargs` object_dir/<br><span class="hljs-comment"># 如果目标文件存在, 强制覆盖</span><br><span class="hljs-built_in">cp</span> -f source_file object_path<br><span class="hljs-comment"># 其它参数</span><br>-v: 显示复制的进度<br>-i: 交互式复制<br></code></pre></td></tr></table></figure><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>强大的命令行下载工具, 支持 HTTP, HTTPS 和 FTP 协议, 支持断点续传, 能够递归下载整个网站</p><p>命令形式: <code>wget [选项] [URL]</code></p><p>选项: </p><ul><li><code>-c</code>: 断点续传, 继续下载部分下载的文件</li><li><code>-b</code>: 后台下载</li><li><code>-q</code>: 安静模式 (不显示输出信息)</li><li><code>-O filename</code>: 指定下载文件的保存名称 </li><li><code>-P directory</code>: 指定下载文件的保存目录</li><li><code>-r</code>: 递归下载</li></ul><h1 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h1><p>在两台服务器之间利用 <code>ssh</code> 传输文件 <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[星海. 两台Linux服务器之间传输文件的四种方法. 知乎](https://zhuanlan.zhihu.com/p/78133776)">[4]</span></a></sup></p><h2 id="scp-secure-copy-命令"><a href="#scp-secure-copy-命令" class="headerlink" title="scp (secure copy) 命令"></a>scp (secure copy) 命令</h2><p><strong>命令格式:</strong> <code>scp 参数 用户名@IP:源文件路径 用户名@IP:目标路径</code> , <strong>-r</strong> 传输文件夹, <strong>-v</strong>, 显示传输详情</p><h2 id="rsync-remote-synchronization-命令"><a href="#rsync-remote-synchronization-命令" class="headerlink" title="rsync (remote synchronization) 命令"></a>rsync (remote synchronization) 命令</h2><p><strong>命令格式同 scp</strong>, <em>但可以多一个 <code>--exclude relative_path</code> 参数, 支持排除目录</em>, 例如命令<br><code>rsync -r --exclude test/exculde user_name@IP:/path/test ./ </code></p><ul><li><code>-v</code>: 同步文件 (详情)</li><li><code>--partial</code>: 断点续传</li><li><code>--progress</code>: 传输进度</li><li><code>-a</code>: 归档模式, 递归复制, 保持符号链接, 权限, 时间戳等</li><li><code>-z</code>: 压缩传输</li></ul><h1 id="链接文件-5-6"><a href="#链接文件-5-6" class="headerlink" title="链接文件 [5]-[6]"></a>链接文件 <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[weixin_34248118. linux查看硬链接对应的所有文件. CSDN](https://blog.csdn.net/weixin_34248118/article/details/89805804?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-89805804-blog-37692587.235^v39^pc_relevant_anti_vip&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-89805804-blog-37692587.235^v39^pc_relevant_anti_vip)">[5]</span></a></sup><sup>-</sup><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[hongweigg. Linux中怎么看出文件是硬连接?. CSDN](https://blog.csdn.net/hongweigg/article/details/37692587)">[6]</span></a></sup></h1><ul><li>链接文件分为硬链接和软链接, 硬链接相当于一个文件两个名称, 而<strong>软链接相当于创建快捷方式</strong>, 创建链接时建议使用<strong>绝对路径</strong></li><li>可使用 <code>ll</code> 命令查看软链接, 其中带有 <strong>l</strong> 标识的为软链接, 并有明确的指向</li><li><strong>文件夹没有硬链接, 只有软链接</strong>, 使用 <code>ll</code> 命令结果的第二列表示<strong>文件</strong>的硬链接数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 为 file_name 建立硬链接</span><br><span class="hljs-built_in">ln</span> file_name ln_name<br><span class="hljs-comment"># 为 file_name 建立软链接</span><br><span class="hljs-built_in">ln</span> -s file_name ln_name<br></code></pre></td></tr></table></figure></li><li>硬链接查看方式: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件的 inode</span><br><span class="hljs-built_in">ls</span> -il dir_name<br><span class="hljs-comment"># 查找所有 inode_index 的文件</span><br>find dir_name -inum inode_index<br></code></pre></td></tr></table></figure></li></ul><h1 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h1><h2 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h2><p><code>ls</code> 默认为 <code>ls =&#39;ls --color=auto&#39;</code>, 可通过 <code>alias ls</code> 查看, 其中 <em>–color&#x3D;auto</em> 表示以不同颜色显示不同类型的文件和目录: 目录为蓝色, 可执行文件为绿色, 常规文件为黑色, 符号链接为浅绿色<br>可通过 <code>ls -hl</code> 查看更为详细的信息, 其中第一列第一个字符若为 <em>-</em> 表示常规文件, <em>d</em> 表示目录, <em>l</em> 表示符号链接, 进一步添加 <code>-a</code> 选项查看隐藏文件 (以*.* 开头), 参数 <code>h</code> 表示使用易读的方式显示</p><h2 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看压缩文件大小</span><br>ll  <span class="hljs-comment"># ls -hl</span><br><span class="hljs-comment"># 查看文件(夹)大小</span><br><span class="hljs-built_in">du</span> -sh file_name<br><span class="hljs-comment"># 查看当前目录下所有子文件(目录)的大小</span><br><span class="hljs-built_in">du</span> -ah --max-depth=1  <span class="hljs-comment"># a 参数表示显示所有文件的大小</span><br><span class="hljs-comment"># 查看当前目录及一级子目录的大小</span><br><span class="hljs-built_in">du</span> -h --max-depth=1<br><span class="hljs-comment"># 查看当前目录的大小</span><br><span class="hljs-built_in">du</span> -sh  <span class="hljs-comment"># du -h --max-depth=0</span><br></code></pre></td></tr></table></figure><p><strong>服务器管理常用命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前目录下所以文件 (夹) 的大小, 并逆序排列</span><br>sudo <span class="hljs-built_in">du</span> -ah --max-depth=1 | <span class="hljs-built_in">sort</span> -rh<br><br><span class="hljs-comment"># 查看当前目录下所以一级和二级子目录的大小, 逆序输出前 20 条记录</span><br>sudo <span class="hljs-built_in">du</span> -h --max-depth=2 | <span class="hljs-built_in">sort</span> -rh | <span class="hljs-built_in">head</span> -n 20<br></code></pre></td></tr></table></figure><h2 id="磁盘空间-7"><a href="#磁盘空间-7" class="headerlink" title="磁盘空间 [7]"></a>磁盘空间 <sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[那记忆微凉. Ubuntu下查看文件、文件夹和磁盘空间的大小. CSDN](https://blog.csdn.net/BigData_Mining/article/details/88998472)">[7]</span></a></sup></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看系统磁盘使用信息</span><br><span class="hljs-built_in">df</span> -h  <span class="hljs-comment"># 文件系统 容量 已用 可用 已用% 挂载点</span><br></code></pre></td></tr></table></figure><h2 id="文件绝对路径-8"><a href="#文件绝对路径-8" class="headerlink" title="文件绝对路径 [8]"></a>文件绝对路径 <sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="[CSDN云计算. Linux 中如何获取文件的绝对路径. CSDN](https://blog.csdn.net/FL63Zv9Zou86950w/article/details/126945089#:~:text=我们可以在%20ls%20命令中使用环境变量PWD来显示文件和目录的绝对路径，如下：%20ls%20-ld%20%24PWD%2F*,使用上述命令，会得到如下输出：%20%24%20ls%20-ld%20%24PWD%20%2F%2a)">[8]</span></a></sup></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">realpath</span> file_dir_name<br><span class="hljs-built_in">realpath</span> -s file_dir_name  <span class="hljs-comment"># 显示符号连接的路径而不是源文件</span><br><span class="hljs-built_in">readlink</span> -f file_dir_name<br>find $(<span class="hljs-built_in">pwd</span>) -name file_dir_name<br>find $(<span class="hljs-built_in">pwd</span>) -name <span class="hljs-string">&quot;*.pdf&quot;</span>  <span class="hljs-comment"># 显示当前目录下所有 pdf 文件的绝对路径</span><br><span class="hljs-built_in">ls</span> -l <span class="hljs-variable">$PWD</span>/file_dir_name<br><span class="hljs-built_in">ls</span> -l <span class="hljs-variable">$PWD</span>/*<br></code></pre></td></tr></table></figure><h2 id="文件权限-chmod"><a href="#文件权限-chmod" class="headerlink" title="文件权限-chmod"></a>文件权限-chmod</h2><p><code>chmod</code> (change mode) 命令 <sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux chmod命令. 菜鸟教程](https://www.runoob.com/linux/linux-comm-chmod.html)">[9]</span></a></sup> 控制用户对文件的权限<br>权限分三级: 文件所有者 (Owner), 用户组 (Group), 其它用户 (Other Users)</p><p><img src="/img/posts/Ubuntu-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/ls-l_output.png" alt="ls -l 输出示意图"></p><p>只有文件所有者和超级用户可以修改文件或目录的权限, 可使用<strong>绝对模式 (八进制数字模式)</strong>, <strong>符号模式</strong>指定文件的权限</p><p><img src="/img/posts/Ubuntu-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/authority.png" alt="权限示意图"></p><p><strong>常用命令</strong></p><ul><li><code>chmod abc file_name</code>: abc 各为一个数字, 分别表示 User, Group 和 Others 的权限, <strong>r:4, w:2, x:1</strong></li><li><code>chmod ucd,gcd,ocd file_name</code>: 其中 c 为 <strong>+, -, &#x3D;</strong>, d 为 <strong>w, r, x</strong>的任意组合 (可为空)</li><li><code>chmod acd</code>: 为 <strong>u, g, o</strong> 三者赋予相同权限 <strong>cd</strong></li><li><code>chmod -R mode dir_name</code>: 为目录及其所有文件与子目录设置统一权限模式 <strong>mode</strong></li></ul><p><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> go+rx folder_name <span class="hljs-comment"># 为 Group 和 Others 添加读和执行权限</span><br><span class="hljs-built_in">chmod</span> a+x file_name  <span class="hljs-comment"># 为所有用户添加执行权限</span><br></code></pre></td></tr></table></figure><h2 id="属性-lsattr"><a href="#属性-lsattr" class="headerlink" title="属性-lsattr"></a>属性-lsattr</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示文件属性</span><br>lsattr file_name<br><span class="hljs-comment"># 显示目录属性</span><br>lsattr -d dir_name<br><span class="hljs-comment"># 显示所有文件和目录的属性</span><br>lsattr -a dir_name<br><span class="hljs-comment"># 增加或减少文件 i(mmutable) 属性 (不可修改, 包括 root)</span><br>chattr +i file_name  <span class="hljs-comment"># 防止文件被修改, 尤其是 /etc 下的文件</span><br>chattr -i file_name<br><span class="hljs-comment"># 使文件只能增加数据, 而不能删除</span><br>chattr +a file_name<br></code></pre></td></tr></table></figure><div class="note note-info">            <h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1>          </div><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.runoob.com/linux/linux-comm-tail.html">Linux tail 命令. 菜鸟教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.runoob.com/linux/linux-comm-cp.html">Linux cp 命令. RUNOOB.COM</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://wenku.csdn.net/answer/c95a332c6633464794f5a97d5f18859c#:~:text=ubuntu%20cp%E5%91%BD%E4%BB%A4%201%20-r%EF%BC%9A%E9%80%92%E5%BD%92%E5%A4%8D%E5%88%B6%E7%9B%AE%E5%BD%95%E5%8F%8A%E5%85%B6%E5%AD%90%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6%E3%80%82%202%20-i%EF%BC%9A%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%A4%8D%E5%88%B6%EF%BC%8C%E5%A6%82%E6%9E%9C%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E8%A6%86%E7%9B%96%E3%80%82,3%20-f%EF%BC%9A%E5%BC%BA%E5%88%B6%E5%A4%8D%E5%88%B6%EF%BC%8C%E8%A6%86%E7%9B%96%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E8%80%8C%E4%B8%8D%E6%8F%90%E7%A4%BA%E7%94%A8%E6%88%B7%E3%80%82%204%20-v%EF%BC%9A%E6%98%BE%E7%A4%BA%E8%AF%A6%E7%BB%86%E7%9A%84%E5%A4%8D%E5%88%B6%E8%BF%87%E7%A8%8B%E3%80%82%205%20-p%EF%BC%9A%E4%BF%9D%E7%95%99%E6%BA%90%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E3%80%81%E6%89%80%E6%9C%89%E6%9D%83%E5%92%8C%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%82">ubuntu cp 命令</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/78133776">星海. 两台Linux服务器之间传输文件的四种方法. 知乎</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_34248118/article/details/89805804?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-89805804-blog-37692587.235%5Ev39%5Epc_relevant_anti_vip&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-89805804-blog-37692587.235%5Ev39%5Epc_relevant_anti_vip">weixin_34248118. linux查看硬链接对应的所有文件. CSDN</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://blog.csdn.net/hongweigg/article/details/37692587">hongweigg. Linux中怎么看出文件是硬连接?. CSDN</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://blog.csdn.net/BigData_Mining/article/details/88998472">那记忆微凉. Ubuntu下查看文件、文件夹和磁盘空间的大小. CSDN</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://blog.csdn.net/FL63Zv9Zou86950w/article/details/126945089#:~:text=%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8%20ls%20%E5%91%BD%E4%BB%A4%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FPWD%E6%9D%A5%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E7%9A%84%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%EF%BC%8C%E5%A6%82%E4%B8%8B%EF%BC%9A%20ls%20-ld%20%24PWD%2F*,%E4%BD%BF%E7%94%A8%E4%B8%8A%E8%BF%B0%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%BC%9A%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BE%93%E5%87%BA%EF%BC%9A%20%24%20ls%20-ld%20%24PWD%20%2F%2a">CSDN云计算. Linux 中如何获取文件的绝对路径. CSDN</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://www.runoob.com/linux/linux-comm-chmod.html">Linux chmod命令. 菜鸟教程</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Back to Hexo Blog</title>
    <link href="/2024/04/07/Back-to-Hexo-Blog/"/>
    <url>/2024/04/07/Back-to-Hexo-Blog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">时隔半年, 决定再次使用 Hexo 写博客, 之前一直用 CSDN, 但强迫症兼完美主义实在无法忍受其广告和弹窗 (尽管已经用了部分 Edge 去广告插件), 遂转向 Hexo, 即使可能会多费些时间</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grocery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Install and Configure ZSH on Ubuntu_20.04</title>
    <link href="/2023/07/22/Install-and-Configure-ZSH-on-Ubuntu-20-04/"/>
    <url>/2023/07/22/Install-and-Configure-ZSH-on-Ubuntu-20-04/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Ubuntu 20.04 安装 ZSH, 并用 oh-my-zsh 进行主题与插件配置</p><h1 id="Install-ZSH-1"><a href="#Install-ZSH-1" class="headerlink" title="Install ZSH [1]"></a>Install ZSH <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Ubuntu 20.04 安装zsh](https://blog.csdn.net/dinofish/article/details/104452908)">[1]</span></a></sup></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看系统已安装的 shell</span><br><span class="hljs-built_in">cat</span> /etc/shells<br><span class="hljs-comment"># 查看当前使用的 shell</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br>sudo apt update<br>sudo apt upgrade  <span class="hljs-comment"># 可选</span><br>sudo apt install zsh<br>chsh -s /bin/zsh  <span class="hljs-comment"># 将 zsh 设置为默认 shell</span><br><span class="hljs-comment"># 注销或者重启后生效</span><br></code></pre></td></tr></table></figure><p>重新进入终端, 会自动进入 zsh 的配置界面, 可直接按 <code>q</code> 退出, 稍后用 <code>oh-my-zsh</code> 配置</p><h1 id="Install-oh-my-zsh"><a href="#Install-oh-my-zsh" class="headerlink" title="Install oh-my-zsh"></a>Install <a href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh</a></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install git  <span class="hljs-comment"># 安装 git</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span>  <span class="hljs-comment"># 该命令本质是先下载 install.sh 文件, 再运行安装</span><br><span class="hljs-comment"># 可以先下载 install.sh 文件到本地, 然后执行 sh install.sh</span><br></code></pre></td></tr></table></figure><p>如果无法安装, 多半因为上网没有使用魔法, 可如下更改 <a href="/img/posts/Install-and-Configure-ZSH-on-Ubuntu-20-04/install.sh">install.sh</a> 文件 (或点击下载), 然后重新安装 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ZSH、oh-my-zsh安装教程及插件和主题推荐](https://zhaoliangcheng.blog.csdn.net/article/details/125106594?spm=1001.2101.3001.6650.18&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-18-125106594-blog-119146233.235^v38^pc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-18-125106594-blog-119146233.235^v38^pc_relevant_sort_base1&utm_relevant_index=19)">[3]</span></a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 找到对应位置进行替换 (本质: 从 gitee 上下载资源)</span><br><span class="hljs-comment"># Default settings</span><br><span class="hljs-comment"># REPO=$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span><br>REPO=<span class="hljs-variable">$&#123;REPO:-llyxz93/ohmyzsh&#125;</span><br><span class="hljs-comment"># REMOTE=$&#123;REMOTE:-https://github.com/$&#123;REPO&#125;.git&#125;</span><br>REMOTE=<span class="hljs-variable">$&#123;REMOTE:-https://gitee.com/<span class="hljs-variable">$&#123;REPO&#125;</span>.git&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Configure-ZSH-by-oh-my-zsh"><a href="#Configure-ZSH-by-oh-my-zsh" class="headerlink" title="Configure ZSH by oh-my-zsh"></a>Configure ZSH by oh-my-zsh</h1><h2 id="系统基本插件"><a href="#系统基本插件" class="headerlink" title="系统基本插件"></a>系统基本插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;ZSH_CUSTOM&#125;</span>  <span class="hljs-comment"># 查看 ZSH_CUSTOM 的路径</span><br></code></pre></td></tr></table></figure><p>配置常用插件: pip, vi-mode, docker, extract, sudo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim .zshrc<br><span class="hljs-comment"># 在 plugins = (git 后添加需要使用的插件)</span><br><span class="hljs-built_in">source</span> .zshrc<br></code></pre></td></tr></table></figure><h2 id="powerlevel10k-theme"><a href="#powerlevel10k-theme" class="headerlink" title="powerlevel10k theme"></a>powerlevel10k theme</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br>vim .zshrc<br><span class="hljs-comment"># 将 ZSH_THEME= 一行改为 ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br><span class="hljs-built_in">exec</span> zsh  <span class="hljs-comment"># 重启 Zsh</span><br></code></pre></td></tr></table></figure><h2 id="安装扩展插件-2"><a href="#安装扩展插件-2" class="headerlink" title="安装扩展插件 [2]"></a>安装扩展插件 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[zsh+ohmyzsh 终端美化](https://blog.csdn.net/qq_44797987/article/details/115290048)">[2]</span></a></sup></h2><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p>记录之前输入过的所有命令, 并自动匹配可能想要输入的命令, 按 $\rightarrow$ 补全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/xiaoqqya/zsh-autosuggestions.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh&#125;</span>/plugins/zsh-autosuggestions<br>vim .zshrc  <span class="hljs-comment"># 启用 zsh-autosuggestions 插件</span><br><span class="hljs-comment"># 在 plugins = (git 后添加 zsh-autosuggestions)</span><br></code></pre></td></tr></table></figure><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><p>语法高亮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/xiaoqqya/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM&#125;</span>/plugins/zsh-syntax-highlighting<br>vim .zshrc  <span class="hljs-comment"># 启用 zsh-syntax-highlighting 插件</span><br><span class="hljs-comment"># 在 plugins = (git 后添加 zsh-syntax-highlighting)</span><br></code></pre></td></tr></table></figure><h3 id="conda-zsh-completion"><a href="#conda-zsh-completion" class="headerlink" title="conda-zsh-completion"></a>conda-zsh-completion</h3><p>conda 命令补全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/xiaoqqya/conda-zsh-completion.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/conda-zsh-completion<br>vim .zshrc  <span class="hljs-comment"># 启用 conda-zsh-completion 插件</span><br><span class="hljs-comment"># 在 plugins = (git 后添加 conda-zsh-completion)</span><br></code></pre></td></tr></table></figure><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><p>快速切换当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 自定义安装</span><br>git <span class="hljs-built_in">clone</span> https://github.com/wting/autojump.git<br><span class="hljs-built_in">cd</span> autojump<br><span class="hljs-comment"># 默认安装到 $HOME/.autojump</span><br>./install.py<br><span class="hljs-comment"># 自动安装</span><br>sudo apt update &amp;&amp; sudo apt install autojump<br></code></pre></td></tr></table></figure><h2 id="将原-bash-的一些配置移植到-zsh"><a href="#将原-bash-的一些配置移植到-zsh" class="headerlink" title="将原 bash 的一些配置移植到 zsh"></a>将原 bash 的一些配置移植到 zsh</h2><p>将 <code>~/.bashrc</code> 中部分自定义词句复制到 <code>~/.zshrc</code> 对应位置处, 可能有</p><ul><li>alias</li><li>conda</li><li>PATH</li></ul><h1 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h1><p>自定义 (或以非 root 用户) 安装 zsh <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Linux 以非root用户安装zsh&配置on my zsh](https://www.cnblogs.com/XiiX/p/14618799.html)">[4]</span></a></sup></p><ol><li>建立 zsh 程序的安装目录: <code>path_to_zsh/zsh</code></li><li>下载最新版本的 zsh: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># XXX 换成最新的版本号</span><br>wget https://sourceforge.net/projects/zsh/files/latest/download/zsh-XXX.tar.xz<br></code></pre></td></tr></table></figure></li><li>…</li></ol><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/dinofish/article/details/104452908">Ubuntu 20.04 安装zsh</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/qq_44797987/article/details/115290048">zsh+ohmyzsh 终端美化</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://zhaoliangcheng.blog.csdn.net/article/details/125106594?spm=1001.2101.3001.6650.18&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-18-125106594-blog-119146233.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-18-125106594-blog-119146233.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=19">ZSH、oh-my-zsh安装教程及插件和主题推荐</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.cnblogs.com/XiiX/p/14618799.html">Linux 以非root用户安装zsh&amp;配置on my zsh</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Programmer Dvorak Layout Anywhere</title>
    <link href="/pdv/"/>
    <url>/pdv/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>&ensp;&ensp;&ensp;&ensp;<strong>只有极少数人使用 <a href="https://www.kaufmann.no/roland/dvorak/">Programmer Dvorak (pdv) Keyboard Layout</a>.</strong> 某些情况下, 临时使用非自己电脑时, 若仍想使用 pdv 布局, 可利用 <a href="https://wyagd001.github.io/zh-cn/docs/index.htm"><strong>AutoHotkey (AHK)</strong></a> 进行键位映射, 模拟 <em>Programmer Dvorak Keyboard Layout</em>. 对此, 提供三种现成解决方案(建议使用第二种):</p><ol><li>直接下载 <a href="/img/posts/Programmer-Dvorak-Layout-Anywhere/pdv.exe">pdv.exe</a> 文件至本地, 双击运行即可</li><li>若不仅想使用 pdv 布局, 还想使用<strong>最基础</strong>的键位映射, 可下载 <a href="/img/posts/Programmer-Dvorak-Layout-Anywhere/pdv_plus.exe">pdv_plus.exe</a> 至本地运行<ul><li><code>LCtrl</code> 与 <code>LAlt</code> 交换, 方便 pdv 的复制与粘贴</li><li><code>Esc</code> 与 <code>CapsLock</code> 交换, VIM 用户专享</li><li><code>RAlt + b/m/h/l/u/i</code> 发送 <code>Up/Down/Left/Right/Home/End</code> 方向键, 最小化手在键盘上的移动</li></ul></li><li>若目标电脑已安装 AHK 软件, <strong>还</strong>可下载 <a href="/img/posts/Programmer-Dvorak-Layout-Anywhere/pdv.ahk">pdv.ahk</a> 文件至本地运行, 并可对其进行自定义</li></ol><h1 id="Source-Codes"><a href="#Source-Codes" class="headerlink" title="Source Codes"></a>Source Codes</h1><h2 id="pdv"><a href="#pdv" class="headerlink" title="pdv"></a>pdv</h2><p><a href="/img/posts/Programmer-Dvorak-Layout-Anywhere/pdv.ahk">pdv.ahk</a> 脚本涉及的主要语法为 AHK 软件的<a href="https://wyagd001.github.io/zh-cn/docs/misc/Remap.htm">重映射按键功能</a>, <a href="/img/posts/Programmer-Dvorak-Layout-Anywhere/pdv.exe">pdv.exe</a> 由其编译而得</p>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>pdv.ahk      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight autohotkey"><figcaption><span>pdv.ahk</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-comment">; pdv.ahk</span><br><br><span class="hljs-comment">; basic</span><br><span class="hljs-title">q::</span>`;<br><span class="hljs-title">w::</span>,<br><span class="hljs-title">e::</span>.<br><span class="hljs-title">r::</span>p<br><span class="hljs-title">t::</span>y<br><span class="hljs-title">y::</span>f<br><span class="hljs-title">u::</span>g<br><span class="hljs-title">i::</span>c<br><span class="hljs-title">o::</span>r<br><span class="hljs-title">p::</span>l<br><span class="hljs-title">[::</span>/<br><br><span class="hljs-title">]::</span>@<br><span class="hljs-title">+]::</span>Send +<span class="hljs-number">6</span><br><br><span class="hljs-comment">; \::\</span><br><span class="hljs-comment">; a::a</span><br><span class="hljs-title">s::</span>o<br><span class="hljs-title">d::</span>e<br><span class="hljs-title">f::</span>u<br><span class="hljs-title">g::</span>i<br><span class="hljs-title">h::</span>d<br><span class="hljs-title">j::</span>h<br><span class="hljs-title">k::</span>t<br><span class="hljs-title">l::</span>n<br>`;::s<br><span class="hljs-title">&#x27;::</span>-<br><span class="hljs-title">z::</span>&#x27;<br><span class="hljs-title">x::</span>q<br><span class="hljs-title">c::</span>j<br><span class="hljs-title">v::</span>k<br><span class="hljs-title">b::</span>x<br><span class="hljs-title">n::</span>b<br><span class="hljs-comment">; m::m</span><br><span class="hljs-title">,::</span>w<br><span class="hljs-title">.::</span>v<br><span class="hljs-title">/::</span>z<br><br><span class="hljs-comment">; number</span><br>`::$<br><span class="hljs-title">+`::</span>~<br><span class="hljs-number">1</span>::&amp;<br><span class="hljs-title">+1::</span>Send +<span class="hljs-number">5</span><br><span class="hljs-number">2</span>::[<br><span class="hljs-title">+2::</span>Send <span class="hljs-number">7</span><br><span class="hljs-number">3</span>::&#123;<br><span class="hljs-title">+3::</span>Send <span class="hljs-number">5</span><br><span class="hljs-number">4</span>::&#125;<br><span class="hljs-title">+4::</span>Send <span class="hljs-number">3</span><br><span class="hljs-number">5</span>::(<br><span class="hljs-title">+5::</span>Send <span class="hljs-number">1</span><br><span class="hljs-number">6</span>::=<br><span class="hljs-title">+6::</span>Send <span class="hljs-number">9</span><br><span class="hljs-number">7</span>::*<br><span class="hljs-title">+7::</span>Send <span class="hljs-number">0</span><br><span class="hljs-number">8</span>::)<br><span class="hljs-title">+8::</span>Send <span class="hljs-number">2</span><br><span class="hljs-number">9</span>::+<br><span class="hljs-title">+9::</span>Send <span class="hljs-number">4</span><br><span class="hljs-number">0</span>::]<br><span class="hljs-title">+0::</span>Send <span class="hljs-number">6</span><br><span class="hljs-title">-::</span>!<br><span class="hljs-title">+-::</span>Send <span class="hljs-number">8</span><br><span class="hljs-title">=::</span>#<br><span class="hljs-title">+=::</span>Send ``<br><br><span class="hljs-title">Numpad1::</span>Numpad7<br><span class="hljs-title">Numpad2::</span>Numpad8<br><span class="hljs-title">Numpad3::</span>Numpad9<br><span class="hljs-title">Numpad7::</span>Numpad1<br><span class="hljs-title">Numpad8::</span>Numpad2<br><span class="hljs-title">Numpad9::</span>Numpad3<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="pdv-plus"><a href="#pdv-plus" class="headerlink" title="pdv_plus"></a>pdv_plus</h2><p><a href="/img/posts/Programmer-Dvorak-Layout-Anywhere/pdv_plus.exe">pdv_plus.exe</a> 为在 <a href="#pdv">pdv.ahk</a> 脚本<span class="label label-warning"><b>最后</b></span>加入下述代码编译而得</p>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-dcdac752" role="button" aria-expanded="false" aria-controls="collapse-dcdac752">        <div class="fold-arrow">▶</div>pdv_plus      </div>      <div class="fold-collapse collapse" id="collapse-dcdac752">        <div class="fold-content">          <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-comment">; pdv_plus</span><br><br><span class="hljs-comment">; LCtrl LAlt Esc CapsLock</span><br><span class="hljs-title">LAlt::</span>LCtrl<br><span class="hljs-title">LCtrl::</span>LAlt<br><span class="hljs-title">Esc::</span>CapsLock<br><span class="hljs-title">CapsLock::</span>Esc<br><br><span class="hljs-comment">; Left Right Down Up</span><br><span class="hljs-comment">; j-h</span><br><span class="hljs-title">RAlt &amp; j::</span>Send,&#123;Left&#125;<br><span class="hljs-comment">; p-l</span><br><span class="hljs-title">RAlt &amp; p::</span>Send,&#123;Right&#125;<br><span class="hljs-comment">; m-m</span><br><span class="hljs-title">RAlt &amp; m::</span>Send,&#123;Down&#125;<br><span class="hljs-comment">; n-b</span><br><span class="hljs-title">RAlt &amp; n::</span>Send,&#123;Up&#125;<br><br><span class="hljs-comment">; Home End</span><br><span class="hljs-comment">; f-u</span><br><span class="hljs-title">RAlt &amp; f::</span>Send,&#123;Home&#125;<br><span class="hljs-comment">; g-i</span><br><span class="hljs-title">RAlt &amp; g::</span>Send,&#123;End&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><ul><li>Windows 完全配置 pdv 键盘布局, 参考 <a href="https://www.kaufmann.no/roland/dvorak/">pdv 主页</a></li><li>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-ab2b2674" role="button" aria-expanded="false" aria-controls="collapse-ab2b2674">        <div class="fold-arrow">▶</div>pdv 键盘布局缩略图      </div>      <div class="fold-collapse collapse" id="collapse-ab2b2674">        <div class="fold-content">          <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/posts/Programmer-Dvorak-Layout-Anywhere/dvp.png" height="100%" alt="PDV 布局图"/></div><div class="group-image-wrap"><img src="/img/posts/Programmer-Dvorak-Layout-Anywhere/dvp_num.png" height="100%" alt="PDV 小键盘区"/></div></div></div>        </div>      </div>    </div></li><li><a href="https://stackia.notion.site/Programmer-Dvorak-a7f334a949f349eea3e7ce748e5a1770">Stackie. 非主流键盘布局: Programmer Dvorak——我的八年使用体会</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AutoHotkey</tag>
      
      <tag>Keyboard</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
