<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Temm&#39;s Zone</title>
  <icon>https://zonglin-tian.github.io/source/img/fluid_theme/conan_b.png</icon>
  <subtitle>志于道 据于德 依于仁 游于艺</subtitle>
  <link href="https://zonglin-tian.github.io/atom.xml" rel="self"/>
  
  <link href="https://zonglin-tian.github.io/"/>
  <updated>2025-09-06T14:58:44.444Z</updated>
  <id>https://zonglin-tian.github.io/</id>
  
  <author>
    <name>Temm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 常用库</title>
    <link href="https://zonglin-tian.github.io/plib/"/>
    <id>https://zonglin-tian.github.io/plib/</id>
    <published>2025-09-06T14:58:44.444Z</published>
    <updated>2025-09-06T14:58:44.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="wandb"><a href="#wandb" class="headerlink" title="wandb"></a>wandb</h1><p><a href="https://wandb.ai/"><strong>wandb (Weight and Biases)</strong></a>: 用于机器学习实验跟踪和可视化的工具和平台, 比 Tensorbard 更方便和智能</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><ul><li>安装: <code>pip install wandb</code></li><li>登陆帐号 (输入 API key): <ul><li>首次: <code>wandb login</code></li><li>重新登陆: <code>wandb login --relogin</code></li></ul></li><li>离线使用: <ul><li>代码中插入: <code>os.environ[&quot;WANDB_MODE&quot;] = &quot;offline&quot;</code></li><li>训练结束后同步: <code>wandb sync /path/to/dir</code></li></ul></li><li>使用代理:<ul><li><code>os.environ[&quot;HTTP_PROXY&quot;] = &quot;http://127.0.0.1:12345&quot;</code></li><li><code>os.environ[&quot;HTTPS_PROXY&quot;] = &quot;http://127.0.0.1:12345&quot;</code></li></ul></li></ul><h2 id="wandb-init"><a href="#wandb-init" class="headerlink" title="wandb.init()"></a>wandb.init()</h2><p>初始化一个实验, 开始记录实验的信息和结果, 常用参数如下:</p><ul><li><code>project</code>: 项目名称</li><li><code>name</code>: 实验名称</li><li><span class="emp-style"><strong><code>dir</code>: 本地存储实验数据和日志的目录路径</strong></span></li><li><code>entity</code>: 团体名称</li><li><code>mode</code>: 数据管理模式<ul><li><code>online</code> (默认): 实验同步</li><li><span class="emp-style"><code>offline</code>: 离线使用</span></li><li><code>disable</code>: 禁用 W&amp;B 的功能 (用于调试)</li></ul></li><li><code>config</code>: 配置参数<ul><li><code>wandb.config.update()</code>: 更新配置参数</li></ul></li><li><code>tag</code>: 标签</li><li><code>note</code>: 实验说明</li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li><code>wandb.log()</code>: 记录实验指标和日志信息</li><li><code>wandb.save()</code>: 保存实验结果和模型文件</li><li><code>wandb.watch()</code>: 监视模型的梯度和参数</li><li><code>wandb.finish()</code>: 结束实验记录</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.wandb.ai/ref/python/sdk/functions/">Python 中常用函数</a></li><li><a href="https://docs.wandb.ai/guides/integrations/pytorch/">PyTorch 集成</a></li></ul><h1 id="imageio"><a href="#imageio" class="headerlink" title="imageio"></a><a href="https://pypi.org/project/imageio/">imageio</a></h1><p>用于易于读写各种图像数据 Python 库</p><ul><li>安装: <code>pip install imageio</code></li><li>导入: <code>import imageio.v3 as iio</code></li><li>读取 (uint8 array): <code>img = iio.imread(path_to_file)</code></li><li>保存: <code>iio.imwrite(path_to_save, img)</code></li></ul><h1 id="pyexr"><a href="#pyexr" class="headerlink" title="pyexr"></a><a href="https://pypi.org/project/pyexr/">pyexr</a></h1><p>一个简单的 Python EXR 输入-输出库, 简化 OpenEXR 的使用</p><ul><li>安装: <code>pip install pyexr</code></li><li>读取 <strong>(数值没有做任何处理)</strong>: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># with</span><br><span class="hljs-keyword">with</span> pyexr.<span class="hljs-built_in">open</span>(file.exr) <span class="hljs-keyword">as</span> file:<br>    img = file.get()  <span class="hljs-comment"># (H, W, 3) np.float32 array</span><br><br><span class="hljs-comment"># read</span><br>img = pyexr.read(file.exr)  <span class="hljs-comment"># (H, W, 3) np.float32 array</span><br></code></pre></td></tr></table></figure></li><li>保存: <code>pyexr.write(out.exr, color_array)</code></li></ul><h1 id="ArgumentParser"><a href="#ArgumentParser" class="headerlink" title="ArgumentParser"></a>ArgumentParser</h1><p><code>ArgumentParser</code> 是 Python 标准库 <code>argparse</code> 中的一个类, 用于解析命令行参数, 并自动生成帮助和使用信息: <code>from argparse import ArgumentParser</code></p><h2 id="add-argument-name-or-flags-kwargs"><a href="#add-argument-name-or-flags-kwargs" class="headerlink" title="add_argument(name_or_flags, **kwargs)"></a><code>add_argument(name_or_flags, **kwargs)</code></h2><p><strong>添加命令行参数</strong></p><ul><li><code>name_or_flags</code>: 参数名 (<code>filename</code>) 或选项标志 (<code>-f</code>, <code>--file</code>)<ul><li>定位参数 (<code>&quot;input&quot;</code>): 按顺序提供 (<code>file.txt</code>)</li><li>可选参数 (<code>&quot;--input&quot;</code>, <code>&quot;-i&quot;</code>): 通过标志指定 (<code>--input file.txt</code>)<ul><li>短选项 (<code>-</code>): 高频使用的简单参数</li><li>长选项 (<code>--</code>): 需要明确语义的复杂参数</li></ul></li></ul></li><li>关键字参数 (<code>kwargs</code>)<ul><li><code>type</code>: 参数类型 (<code>int</code>, <code>str</code>)</li><li><code>help</code>: 帮助信息</li><li><code>default</code>: 默认值</li><li><code>action</code>: 特殊行为 (<code>store_true, append</code>)<ul><li><code>store_true</code>: 指定参数, 值为 <code>True</code>, 否则为 <code>False</code></li></ul></li><li><code>choices</code>: 限制参数范围</li><li><code>dest</code>: 解析后属性的名称 (默认取第一个长选项或短选项的名称去掉 <code>-</code>)</li><li><code>required</code>: 是否必填 (针对可选参数)</li></ul></li></ul><h2 id="parse-args"><a href="#parse-args" class="headerlink" title="parse_args()"></a><code>parse_args()</code></h2><p><strong>解析命令行参数 (从 <code>sys.argv</code> 读取), 返回命名空间对象 (<code>Namespace</code>)</strong></p><ul><li><code>parse_args(list(str))</code>: 从列表解析 (而非命令行), 列表格式必须模拟命令行, 可直接控制输入参数, 通常用于测试场景, </li><li><code>parse_known_args()</code>: 忽略未知参数, 解析已知参数, 返回 <code>(args, unknown_args)</code> 元组</li><li><code>Namespace</code> 对象 (<code>argparse</code> 模块中定义的一个类)<ul><li>将解析后的命令行参数存储为对象的动态属性, 通过 <code>args.attribute_name</code> 的方式访问</li><li>属性名与参数名一致, 自动转换短横线为<strong>下划线</strong>), 未指定且无默认值的参数, 属性值为 <code>None</code></li><li>类似于字典, 可通过 <code>vars(args)</code> 转换为字典 (或通过 <code>args.__dict__</code> 查看存储的字典形式)<ul><li><code>Namespace(**dict_name)</code>: 将字典解包为 <code>Namespace</code> 对象</li></ul></li><li><code>hasattr(args, pram_name)</code>: 检查参数是否存在</li><li><code>delattr(args, pram_name)</code>: 删除参数</li><li><code>setattr(args, param_name, value)</code> 或 <code>args.param_name = value</code>: 更新参数 <code>param_name</code> 的值为 <code>value</code></li></ul></li></ul><h2 id="Others-1"><a href="#Others-1" class="headerlink" title="Others"></a>Others</h2><ul><li><code>add_argument_group(str)</code>: 在帮助信息中创建分组的参数显示 (逻辑分组, 不影响解析逻辑)</li><li><code>print_help()</code>: 打印帮助信息 (<code>-h</code>)</li></ul><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><ul><li><a href="https://pythonjishu.com/pandas-dataframe-to_excel/">Pandas 将数据写入 Excel</a></li><li>获取 <em>DataFrame</em> 的所有列名: <code>list(data_frame)</code> (sorted 返回有序)</li></ul><h1 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h1><ul><li><a href="https://blog.csdn.net/beautiful77moon/article/details/88877519#:~:text=%E5%9C%A8python%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20datetime%20%E6%9D%A5%E5%A4%84%E7%90%86%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%98%AF%E8%A6%81%E7%8E%B0%E5%AF%BC%E5%85%A5datetime%E5%BA%93%201%20%3E%3E%3E%20%20print%20(datetime.datetime.today()),(datetime.datetime.now())%204%202019%20-03-%2028%2020%3A%2034%3A%2011.377443">获取当前日期&#x2F;时间</a></li><li><a href="https://blog.csdn.net/Gabriel100yi/article/details/135251097#:~:text=%E8%A6%81%E8%AE%A1%E7%AE%97%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E6%98%AF%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20date%20%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E3%80%82%20%E5%85%B7%E4%BD%93%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B%EF%BC%9A%20%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E7%9A%84%E5%B9%B4%E4%BB%BD%EF%BC%9A%E4%BD%BF%E7%94%A8%20year%20%E5%B1%9E%E6%80%A7%E3%80%82%20%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E7%9A%84%E6%9C%88%E4%BB%BD%EF%BC%9A%E4%BD%BF%E7%94%A8,%E4%BD%BF%E7%94%A8%20date%20%E7%B1%BB%E7%9A%84%20timetuple()%20%E6%96%B9%E6%B3%95%E5%B0%86%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%97%B6%E9%97%B4%E5%85%83%E7%BB%84%E3%80%82%20%E4%BD%BF%E7%94%A8%E6%97%B6%E9%97%B4%E5%85%83%E7%BB%84%E4%B8%AD%E7%9A%84%20tm_yday%20%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9%E3%80%82">计算指定日期是一年中的第几天</a></li><li><a href="https://blog.csdn.net/weixin_40012554/article/details/108759160">计算日期差</a></li></ul><h1 id="shutil"><a href="#shutil" class="headerlink" title="shutil"></a>shutil</h1><ul><li><code>shutil.copytree(src, dst, dirs_exist_ok=False)</code>: 递归复制目录</li><li><code>shutil.copy2(src, dst)</code>: 复制文件 (保留元数据)</li><li><code>shutil.rmtree(dir_path)</code>: 递归删除<strong>目录</strong>及其内容 (删除非空目录)</li></ul><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><h2 id="os-path-–-路径操作"><a href="#os-path-–-路径操作" class="headerlink" title="os.path – 路径操作"></a>os.path – 路径操作</h2><ul><li><code>os.path.split(*path*)</code>: 将路径 <em>path</em> 拆分为一对, 即 <code>(head, tail)</code>, 其中 <em>tail</em> 是路径的最后一部分, 而 <em>head</em> 以除最后一部分外的所有内容, tail 部分不会包含斜杠, head 末尾的斜杠会被去掉<ul><li>如果 path 以斜杠结尾, 则 tail 为空</li><li><code>os.path.join(head, tail) == path</code></li><li><code>head == os.path.dirname(path)</code></li><li><code>tail == os.path.basename(path)</code></li></ul></li><li><code>os.path.dirname(path)</code>: 返回路径 path 的目录名称</li><li><code>os.path.basename(path)</code>: 返回路径 path 的基本名称</li><li><code>os.path.join(path, *paths)</code>: 智能地拼接一个或多个路径部分, 返回值是 <em>path</em> 和 <em>paths</em> 的所有成员的拼接, 其中每个非空部分后面都紧跟一个目录分隔符, 最后一个部分除外<ul><li>如果最后一个部分为空, 则结果将以分隔符结尾</li><li>如果某个部分为绝对路径, 则之前的所有部分会被 <strong>丢弃</strong>, 然后从绝对路径部分重新开始继续拼接</li></ul></li><li><code>os.path.splitex(path)</code>: 将路径名称拆分为 <code>(root, ext)</code> 对, 使得 <code>root + ext = path</code>, 并且扩展名为空或以句点打头并最多只包含一个句点</li><li><code>os.path.splitdrive(path)</code>: 将路径拆分为一对, 即 <code>(drive, tail)</code>, 使得 <code>drive + tial == path</code>, 其中 <em>drive</em> 是持载点或空字符串<ul><li>如果路径 path 包含盘符, 则 drive 将包含冒号之前的所有内容包括冒号本身</li></ul></li><li><code>os.path.exists(path)</code>: 如果 <em>path</em> 指向一个已存在的路径或已打开的文件描述符, 返回 <code>True</code></li><li><code>os.path.isdir(path)</code>: 判断 path 是否为目录</li><li><code>os.path.isfile(path)</code>: 判断 path 是否为文件</li></ul><h2 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h2><ul><li><code>os.getenv(name)</code>: 获取系统环境变量值</li><li><code>os.listdir(path)</code>: 返回路径下的所有文件与目录名 </li><li><code>os.remove(file_path)</code>: 删除<strong>文件</strong> (不能是目录)</li><li><code>os.rmdir(dir_path)</code>: 删除<strong>空</strong>目录<ul><li><code>os.rmdirs(dir_path)</code>: <strong>递归</strong>删除<strong>空</strong>目录</li></ul></li></ul><h1 id="tqdm"><a href="#tqdm" class="headerlink" title="tqdm"></a>tqdm</h1><p>Python 进度条: <code>from tqdm import tqdm</code></p><ul><li><code>desc</code>: 进度条描述</li><li><code>initial</code>: 进度条的起始值 (默认为 0) (不是偏移量, 只是显示值的起点)</li></ul><p><strong>参考:</strong></p><ul><li><a href="https://www.zhihu.com/question/420057177/answer/2268739686">python的tqdm可以调整进度条的颜色吗. 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/163613814">周兵. python进度条库tqdm详解. 知乎</a></li></ul>]]></content>
    
    
    <summary type="html">Python 常用库使用笔记</summary>
    
    
    
    <category term="Coding" scheme="https://zonglin-tian.github.io/categories/Coding/"/>
    
    
    <category term="Python" scheme="https://zonglin-tian.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>系统代理</title>
    <link href="https://zonglin-tian.github.io/vpn/"/>
    <id>https://zonglin-tian.github.io/vpn/</id>
    <published>2025-09-04T15:31:13.000Z</published>
    <updated>2025-09-06T03:44:38.467Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><ul><li>三种环境变量:<ul><li><code>all_proxy/ALL_PROXY</code></li><li><code>http_proxy/HTTP_PROXY</code></li><li><code>https_proxy/HTTPS_PROXY</code></li></ul></li><li>两种代理:<ul><li><code>http://IP:PORT</code>: HTTP&#x2F;HTTPS 协议, HTTP 解析数据 <strong>(仅限 Web 流量)</strong></li><li><code>socks5[h]://IP:PORT</code>: TCP&#x2F;UDP 协议, 不解析数据 <strong>(最通用)</strong></li></ul></li><li>验证代理是否生效:<ul><li><code>curl https://www.google.com</code></li><li><code>curl https://api.ipify.org</code> (IP 查询)</li></ul></li></ul><h1 id="终端使用代理"><a href="#终端使用代理" class="headerlink" title="终端使用代理"></a>终端使用代理</h1><ul><li>Windows<figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ps1"><span class="hljs-variable">$env:https_proxy</span>=<span class="hljs-string">&quot;socks5://127.0.0.1:20170&quot;</span><br><span class="hljs-variable">$env:http_proxy</span>=<span class="hljs-string">&quot;socks5://127.0.0.1:20170&quot;</span><br><span class="hljs-variable">$env:all_proxy</span>=<span class="hljs-string">&quot;Socks5://127.0.0.1:20170&quot;</span><br><span class="hljs-comment"># 取消</span><br><span class="hljs-variable">$env:http_proxy</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-variable">$env:https_proxy</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-variable">$env:all_proxy</span>=<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li>Ubuntu<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:20171&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:20171&quot;</span><br><span class="hljs-built_in">export</span> all_proxy=<span class="hljs-string">&quot;http://127.0.0.1:20171&quot;</span><br><span class="hljs-comment"># 取消</span><br><span class="hljs-built_in">unset</span> http_proxy https_proxy all_proxy<br></code></pre></td></tr></table></figure></li><li><strong>需要登陆信息: <code>//username:passwd@proxy_ip:port</code></strong></li></ul><h1 id="V2Ray-客户端"><a href="#V2Ray-客户端" class="headerlink" title="V2Ray 客户端"></a>V2Ray 客户端</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><ul><li>安装: <code>winget install --id v2rayA.v2rayA</code><ul><li>查看安装的包: <code>winget list --id v2rayA.v2rayA</code></li><li>位置: <code>C:\Program Files\v2rayA\v2raya.exe</code></li><li>配置文件与数据: <code>C:\ProgramData\v2rayA\</code> </li><li>V2Ray 核心文件: <code>C:\Program Files\v2rayA\bin\v2ray\</code></li></ul></li><li>卸载: <code>winget uninstall --id v2rayA.v2rayA</code> (配置文件需手动清理)</li><li>查看&#x2F;重启&#x2F;启动&#x2F;停止服务: <code>Get/Restart/Start/Stop-Service v2rayA</code></li><li>GUI 入口: <code>localhost:2017</code></li></ul><h3 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h3><ul><li>浏览器: 代理插件</li><li>终端: 配置环境变量</li><li>Windows 全局代理</li></ul>]]></content>
    
    
    <summary type="html">科学上网</summary>
    
    
    
    <category term="Software" scheme="https://zonglin-tian.github.io/categories/Software/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 磁盘管理</title>
    <link href="https://zonglin-tian.github.io/udisk/"/>
    <id>https://zonglin-tian.github.io/udisk/</id>
    <published>2025-07-10T11:10:48.000Z</published>
    <updated>2025-07-11T03:38:25.667Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ul><li><code>fdisk -l</code>: 查看分区情况<ul><li><code>fdisk -l /dev/sda</code>: 查看磁盘 sda 的分区</li></ul></li><li><code>df -h</code>: 查看分区使用与挂载情况 (<code>lsblk</code>)</li></ul><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><p><code>fdisk</code> (format disk) 磁盘分区管理的命令行工具, 适用于 MBR (MS-DOS) 和 GPT 分区表, 可以创建, 删除, 调整分区, 并修改分区类型: <code>sudo fdisk [选项] &lt;磁盘设备&gt;</code></p><ul><li><code>-l</code>: 列出所有磁盘分区表 (不进入交互模式)</li><li><code>fdik &lt;磁盘设备&gt;</code>: 进入交互模式<ul><li>常用: <strong>n 创建分区 → 根据情况输入 (大多数时候按回车选默认值) → p 打印分区, 确认无误 → w 保存设置</strong></li><li><strong>m 展示帮助</strong></li><li>F 展示磁盘剩余未分区空间</li><li>n 增加一个新分区</li><li>d 删除分区</li><li>p 打印分区情况</li><li>t修改分区类型 (Linux&#x3D;83, swap&#x3D;82, NTFS&#x3D;7)</li><li>w 保存并退出</li><li>q 不保存退出</li></ul></li><li><code>partprobe</code>: 使修改生效</li></ul><h1 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><code>umount [挂载点或设备路径]</code>: 卸载已挂载的文件系统<ul><li><code>-f</code>: 强制卸载 </li><li><code>-v</code>: 显示详细操作信息</li></ul></li><li><code>mount [选项] [设备] [挂载点]</code>: 将存储设备挂载到文件系统的某个目录 (<strong>挂载点</strong>), 从而访问其中的数据<ul><li><code>设备</code>: 磁盘分区 (<code>/dev/sda1</code>), UUID, LABEL 或网络存储</li><li><code>挂载点</code>: 一个已经存在的目录</li><li><strong><code>findmnt</code>&#x2F;<code>mount</code>: 显示所有挂载点</strong></li><li><code>-t &lt;文件类型系统&gt;</code>: 指定文件系统类型</li><li><code>-o &lt;挂载选项&gt;</code>: 指定挂载选项</li><li><strong><code>-a</code>: 挂载 <code>/etc/fstab</code> 中所有未挂载的设备 (测试 <code>fstab</code> 配置是否正确)</strong></li><li><code>-v</code>: 显示详细挂载信息</li><li><code>-l</code>: 显示已挂载设备的 LABEL</li><li><code>-r</code>: 以只读模式挂载</li><li><code>-w</code>: 以读写模式挂载 (<strong>默认</strong>)</li></ul></li><li><code>sudo blkid</code>: 查看 UUID 和 LABEL (blok id)</li></ul><h2 id="etc-fstab-文件"><a href="#etc-fstab-文件" class="headerlink" title="&#x2F;etc&#x2F;fstab 文件"></a>&#x2F;etc&#x2F;fstab 文件</h2><p><code>/etc/fstab</code> (File System Table) 用于定义系统启动时自动挂载的文件系统和存储设备, 包含了系统需要挂载的所有分区, 网络共享和特殊文件系统的信息</p><p>文件由若干行组成, 每行定义一个挂载点, 字段之间使用单个制表符 (Tab) 分隔, <code>#</code> 表示注释, <strong>每行必须包含 6 个字段: <code>&lt;设备标识&gt; &lt;挂载点&gt; &lt;文件系统类型&gt; &lt;挂载选项&gt; &lt;dump 备份标志&gt; &lt;fsck 检查顺序&gt;</code></strong></p><ul><li>设备标识: 设备路径 (<code>/dev/sda1</code>), <code>UUID=</code> (<strong>更可靠</strong>), <code>LABEL=</code></li><li>挂载点: 文件系统用于挂载的目录路径 (<code>/</code>, <code>/home</code>, <code>/mnt/data</code>)</li><li>文件系统类型: <code>ext4</code> (Linux 常用), <code>xfs</code>, <code>btrfs</code>, <code>vfat</code> (FAT32), <code>ntfs</code> (Windows NTFS), <code>swap</code> (交换分区), <code>nfs</code> (网络文件系统), <code>tmpfs</code> (临时文件系统)</li><li>挂载选项: 多个选项用逗号分隔<ul><li><code>defaults</code>: (rw, suid, dev, exec, auto, nouser, async)</li><li><code>ro/rw</code>: 只读&#x2F;读写</li><li><code>noauto</code>: 启动时不自动挂载</li><li><code>user</code>: 允许普通用户挂载</li><li><strong><code>nofail</code>: 设备不存在时不报错</strong></li><li><code>exec/noexec</code>: 允许&#x2F;禁止执行二进制文件</li><li><code>suid/nosuid</code>: 允许&#x2F;禁止 SUID 和 SGID 位</li><li><code>_netdev</code>: 网络设备, 等待网络就绪后再挂载</li></ul></li><li>dump 备份标志: 0 (不备份), 1 (备份)</li><li>fsck 检查顺序: 0 (不检查), 1 (优先检查, <strong>根分区应为 1</strong>), 2 (次要检查)</li></ul><h1 id="home-重挂载或扩容"><a href="#home-重挂载或扩容" class="headerlink" title="home 重挂载或扩容"></a>home 重挂载或扩容</h1><p><strong>前提: 被扩容设备必须是 “起始” 分区</strong><br><strong>备份设备: 被扩容设备或者另外的设备</strong></p><ol><li>备份 <code>/home</code> 的数据到备份设备</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /media/home<br>sudo mount /back_up_device /media/home<br>sudo rsync -azXS --progress --partial /home/ /media/home/<br></code></pre></td></tr></table></figure><ol start="2"><li><code>/home</code> 重新挂载</li></ol><ul><li>卸载<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo umount /home<br><span class="hljs-comment"># 显示占用进程的 PID 和用户</span><br><span class="hljs-comment"># sudo fuser -vm /home</span><br><span class="hljs-comment"># 发送 SIGKILL 终止所有占用进程</span><br><span class="hljs-comment"># 强制解除占用</span><br>sudo umount -f /home<br></code></pre></td></tr></table></figure></li><li>挂载: 以防无法正常重启<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/fstab<br><span class="hljs-comment"># 将 /home 挂载到 /back_up_device</span><br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>删除原 <code>/home</code> 挂载分区 (<code>/dev/sda2</code>)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fdisk /dev/sda<br><span class="hljs-comment"># d → 2 → w</span><br></code></pre></td></tr></table></figure><ol start="4"><li>被扩容配备扩容 (<code>/dev/sda1</code>)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fdisk /dev/sda<br><span class="hljs-comment"># 通过 p 查看 sda1 的起始扇区并记住</span><br><span class="hljs-comment"># d → 1 → n → 1 → ... → w</span><br><span class="hljs-comment"># 务必保证起始扇区一致</span><br><span class="hljs-comment"># 检查文件系统</span><br>sudo e2fsck -f /dev/sda1<br><span class="hljs-comment"># 调整 ext4 文件系统大小</span><br>sudo resize2fs /dev/sda1<br></code></pre></td></tr></table></figure><ol start="5"><li>重新挂载 <code>/home</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/fstab<br><span class="hljs-comment"># 将 /home 挂载到 /dev/sda1</span><br>sudo mount -a<br><span class="hljs-comment"># 若有必要, 复制备份的 /home 数据</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Ubuntu 磁盘管理常用命令</summary>
    
    
    
    <category term="Ubuntu" scheme="https://zonglin-tian.github.io/categories/Ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式与通配符</title>
    <link href="https://zonglin-tian.github.io/regex/"/>
    <id>https://zonglin-tian.github.io/regex/</id>
    <published>2025-07-02T13:01:42.000Z</published>
    <updated>2025-08-11T00:55:48.428Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Shell-引号解析"><a href="#Shell-引号解析" class="headerlink" title="Shell 引号解析"></a>Shell 引号解析</h1><p><strong>理解:</strong></p><ul><li>单引号: 完全不管, 原样输出<ul><li><strong>固定</strong>正则表达式</li></ul></li><li>双引号: 稍微加工, 变量替换, 扩展 <code>$</code>, <code>`</code>, <strong><code>\</code> 转义字符 (<code>$`&quot;\</code>)</strong>, <code>$()</code> , 保护特殊字符 (<code>空格*?单引号</code>)<ul><li>含<strong>变量</strong>的正则表达式</li></ul></li><li>不加引号 (<strong>Shell 截胡</strong>): 过度加工, 替换变量, 拆分空格, 将特殊字符 (<code>*?</code>) 当成通配符匹配文件<ul><li><code>[[ &quot;string&quot; =~ regex  ]]</code> 右侧的 <code>regex</code> 不能加引号, 否则正则符号 (<code>.*</code>) 会变成普通字符</li><li>通配符, 重定向, 管道符</li></ul></li></ul><p><strong>口决:</strong></p><ul><li>有变量? 用双引号</li><li><strong>没变量? 用单引号</strong></li><li><code>[[ =~ ]]</code> 条件测试? 变量别加引号</li><li><strong>永远别完全不加引号</strong></li></ul><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><strong>正则表达式 (Regular Expressions)</strong> 用于<strong>文本内容匹配</strong> (如搜索, 替换字符串), 常见于 <code>grep</code>, <code>sed</code>, <code>awk</code>, <code>vim</code> 等命令</p><ul><li>普通字符: 字母, 数字, 符号匹配本身</li><li><strong>元字符</strong>: 具有特殊含义, 用于构造匹配规则</li></ul><h2 id="基础正则-BRE"><a href="#基础正则-BRE" class="headerlink" title="基础正则 (BRE)"></a>基础正则 (BRE)</h2><ul><li><code>\</code>: 转义符, 匹配特殊字符本身 (<code>&#123;</code>, <code>&#125;</code>, <code>+</code>)</li><li><code>.</code>: 任意单个字符 (除换行符)</li><li>字符集与字符范围<ul><li><code>[]</code>: 匹配括号内任意一个字符 (<code>[0-9]</code>, <code>[a-zA-Z]</code>)</li><li><code>[^]</code> (否定字符集): 匹配不在括号内的字符</li><li>当 <code>-</code> 出现在开头或结尾, <code>^</code> 出现在中间时, 为普通字符</li><li><code>\d</code>: 匹配数字 (<code>\d+</code> 连续数字)</li><li><code>\w</code>: 匹配单词字符 (字母, 数字, 下划线)</li></ul></li><li>边界符<ul><li><code>^</code>: 匹配字符串开始</li><li><code>$</code>: 匹配字符串结束</li></ul></li><li>量词 (重复符号): 用于指定前一个字符或分组重复出现的次数<ul><li><code>?</code>: 前一个字符 0 次或 1 次</li><li><code>*</code>: 前一个字符 0 次或多次 (不包括换行)<ul><li><strong><code>.*</code>: 匹配任意数量字符 (包括零个)</strong></li><li><code>^a.*z$</code>: 匹配以 a 开头, 以 z 结尾的任意字符串 (中间可以是任意字符)</li></ul></li><li><code>+</code>: 前一个字符 1 次或多次</li><li><code>&#123;n,m&#125;</code>: 前一个字符 n 到 m 次<ul><li><code>&#123;n&#125;</code>: 恰好 n 次</li><li><code>&#123;n,&#125;</code>: 至少 n 次</li></ul></li></ul></li><li><code>(pattern)</code>: 捕获分组</li><li><code>(a|b)</code>: 匹配 <code>a</code> 或 <code>b</code></li></ul><h2 id="扩展正则-ERE"><a href="#扩展正则-ERE" class="headerlink" title="扩展正则 (ERE)"></a>扩展正则 (ERE)</h2><ul><li>元字符无需转义, 易读</li></ul><h2 id="Perl-风格正则-PCRE"><a href="#Perl-风格正则-PCRE" class="headerlink" title="Perl 风格正则 (PCRE)"></a>Perl 风格正则 (PCRE)</h2><ul><li>由 Perl 语言发展而来, 功能最强大, 元字符无需转义</li><li>支持命令:<ul><li><code>grep -P</code></li></ul></li><li><code>\d</code>: 匹配数字</li><li><code>\D</code>: 非数字</li><li><code>\s</code>: 空白字符</li><li><code>\S</code>: 非空白字符</li><li><code>\w</code>: 单词字符 (字母, 数字, 下划线)</li><li><code>\W</code>: 非单词字符 (标点符号, 空格)</li><li><code>\b</code>: 匹配单词边界 (<code>grep -P &quot;\bcat\b&quot;</code> → <code>cat</code>)</li><li>逻辑: <code>|</code> (或)</li></ul><h2 id="支持命令"><a href="#支持命令" class="headerlink" title="支持命令"></a>支持命令</h2><ul><li><code>grep</code>: 文本搜索, 默认使用基础正则<ul><li><code>grep -E</code> 或 <code>egrep</code>: 启用扩展正则</li></ul></li><li><code>sed</code>: 流编辑器, 文本替换&#x2F;处理, 默认使用基础正则<ul><li><code>sed -E</code>: 启用扩展正则</li></ul></li><li><code>awk</code>: 文本处理&#x2F;字段提取, 默认使用<strong>扩展正则</strong></li><li><code>find</code>: 文件查找<ul><li><code>-regex</code>: 使用<strong>扩展正则</strong></li><li><code>-name</code>: 使用<strong>通配符</strong></li></ul></li><li><code>vim</code>: 文本编辑器<ul><li><code>\m</code>: 基础正则</li><li><code>\v</code>: 扩展正则</li></ul></li><li><code>less</code>: 分页查看, 默认使用基础正则</li></ul><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p><strong>通配符 (Wildcards)</strong> 主要用于快速匹配<em><strong>文件名</strong></em>或<em><strong>目录名</strong></em>的特殊字符</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>区分大小写</li><li><code>*</code> 不匹配以 <code>.</code> 开头的隐藏文件 (需显式指定 <code>.*</code>)</li><li>通配符<strong>不需要加单引号</strong>, 加单引号表示禁用通配符, 即为普通字符</li><li>特殊字符需通过 <code>\</code> 转义: <code>^</code>, <code>~</code></li></ul><h2 id="基础通配符"><a href="#基础通配符" class="headerlink" title="基础通配符"></a>基础通配符</h2><ul><li><code>*</code>: 任意数量 (包括零个) 的任意字符<ul><li><code>*.txt</code>: 所有 <code>.txt</code> 文件</li></ul></li><li><code>?</code>: 单个任意字符<ul><li><code>file?.log</code>: <code>file1.log</code>, <code>file2.log</code></li></ul></li><li><code>[]</code>: 括号内任意<strong>一个</strong>字符或范围<ul><li><code>[0-9]</code>, <code>[a-z]</code>, <code>[abc]</code></li><li>扩展: <code>[^/!]</code> (取反)</li></ul></li><li><code>&#123;&#125;</code>: <strong>生成组合</strong> (非匹配, 用于展开)<ul><li><code>&#123;start..end&#125;</code>, <code>&#123;a,b,c&#125;</code> <strong>(不含空格)</strong></li></ul></li></ul><h2 id="zsh-扩展通配符"><a href="#zsh-扩展通配符" class="headerlink" title="zsh 扩展通配符"></a>zsh 扩展通配符</h2><ul><li>检查当前与通配符相关的设置: <code>setopt | grep glob</code> (若输出 <code>extendedglob</code> 表示已启用)</li><li>手动启用: <code>setopt extendedglob</code> (永久启用需写入 <code>~/.zshrc</code> 中)</li><li><code>^</code>: 排除模式 (取反)</li><li><code>~</code>: 排除特定模式<ul><li><code>*.txt~backup*</code>: 匹配 <code>.txt</code> 文件但排除含 <code>backup</code> 的文件</li></ul></li><li><code>(x|y)</code>: 匹配 <code>x</code> 或 <code>y</code></li></ul>]]></content>
    
    
    <summary type="html">常用正则表达式与通配符</summary>
    
    
    
    <category term="Ubuntu" scheme="https://zonglin-tian.github.io/categories/Ubuntu/"/>
    
    
    <category term="Writing..." scheme="https://zonglin-tian.github.io/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>常用文件格式</title>
    <link href="https://zonglin-tian.github.io/format/"/>
    <id>https://zonglin-tian.github.io/format/</id>
    <published>2025-06-21T02:37:02.000Z</published>
    <updated>2025-06-21T03:17:20.696Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p><code>JSON</code> (JavaScript Object Notation): 轻量级数据交换格式, 具有简洁, 易读的文本结构 (<code>.json</code>)</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ul><li>键值对: 数据以 <code>key: value</code>的形式存储, 键必须是<strong>双引号包裹的字符串</strong></li><li>值的数据类型<ul><li>字符串: <code>&quot;name&quot;: &quot;Temm&quot;</code></li><li>数字: <code>&quot;Age&quot;: 3</code></li><li>布尔值: <code>&quot;is_student&quot;: true</code></li><li>空值: <code>&quot;address&quot;: null</code></li><li>对象 (嵌套): <code>&quot;university&quot;: &#123;&quot;name&quot;: &quot;BNU&quot;&#125;</code></li><li>数组: <code>&quot;scores&quot;: [90, 85, 77]</code></li></ul></li></ul><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><ul><li>根元素必须是对象 <code>&#123;&#125;</code> 或数组 <code>[]</code></li><li>引号必须用双引号: 单引号或无引号无效</li><li>逗号分隔: 键值对之间用逗号分隔, 但<strong>末尾不能有逗号</strong></li><li>无注释: 不支持标准注释 <code>//</code>, <code>/**/</code> </li><li>在线校验: <a href="https://jsonlint.com/">JSONLint</a></li></ul><h2 id="衍生格式"><a href="#衍生格式" class="headerlink" title="衍生格式"></a>衍生格式</h2><h3 id="JSONC-JSON-with-Comments"><a href="#JSONC-JSON-with-Comments" class="headerlink" title="JSONC (JSON with Comments)"></a>JSONC (JSON with Comments)</h3><ul><li>扩展名: <code>.jsonc</code></li><li>特点:<ul><li>支持 <code>//</code> 单行注释和 <code>/**/</code> 多行注释</li><li>保留 JSON 的严格数据结构, 仅增加注释功能</li></ul></li></ul><h3 id="JSON5-更人性化的-JSON"><a href="#JSON5-更人性化的-JSON" class="headerlink" title="JSON5 (更人性化的 JSON)"></a>JSON5 (更人性化的 JSON)</h3><ul><li>扩展名: <code>.json5</code></li><li>特点:<ul><li>支持注释, 尾随逗号, 单引号字符串, 无引号键名, 十六进制数字等</li><li>目标是更易手写和维护</li><li><a href="https://json5.org/">官方库</a></li></ul></li></ul><h3 id="JSONL-JSON-Lines"><a href="#JSONL-JSON-Lines" class="headerlink" title="JSONL (JSON Lines)"></a>JSONL (JSON Lines)</h3><ul><li>扩展名: <code>.jsonl</code></li><li>特点: <ul><li>每行是一个独立的 JSON 对象, 适合流式处理或日志文件</li><li><strong>无需根数组或对象包裹</strong></li></ul></li></ul><h1 id="YAML-yml-yaml"><a href="#YAML-yml-yaml" class="headerlink" title="YAML (.yml&#x2F;.yaml)"></a>YAML (.yml&#x2F;.yaml)</h1><h1 id="INI-ini"><a href="#INI-ini" class="headerlink" title="INI (.ini)"></a>INI (.ini)</h1><h1 id="CSV-csv"><a href="#CSV-csv" class="headerlink" title="CSV (.csv)"></a>CSV (.csv)</h1>]]></content>
    
    
    <summary type="html">常用文件格式结构与语法</summary>
    
    
    
    <category term="Others" scheme="https://zonglin-tian.github.io/categories/Others/"/>
    
    
    <category term="Writing..." scheme="https://zonglin-tian.github.io/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>Debugging...</title>
    <link href="https://zonglin-tian.github.io/debug/"/>
    <id>https://zonglin-tian.github.io/debug/</id>
    <published>2025-06-12T05:14:55.000Z</published>
    <updated>2025-06-23T03:27:48.017Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="绪"><a href="#绪" class="headerlink" title="绪"></a>绪</h1><div class="note note-warning">            <p>Troubleshooting any problem without the error log is like driving with your eyes closed. (在没有错误日志的情况下诊断任何问题无异于闭眼开车)</p>          </div><h1 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h1><ul><li>解决办法:<ul><li>数据归一化</li><li>限制数据范围: <code>torch.clamp()</code></li><li>降低学习率或添加梯度裁剪 (<code>torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=specified_value)</code>)</li></ul></li><li>调试命令: <strong><code>torch.isnan()</code>, <code>torch.where()</code></strong><ul><li>自动检测反向传播过程中梯度是否存在 <code>NaN</code> 或 <code>inf</code>, 当检测到异常时会打印出该异常的原始前向传播操作并抛出 <em>RuntimeError</em><ul><li><strong>局部 (精细调试): <code>with torch.autograd.detect_anomaly(check_nan=True):</code></strong></li><li>全局: <code>torch.autograd.set_detect_anomaly(check_nan=True)</code></li></ul></li><li>检查是否含有 <code>NaN</code>: <code>torch.isnan(tensor).any()</code></li><li>统计 <code>NaN</code> 的数量: <code>torch.isnan(tensor).sum().item()</code></li><li>定位 <code>NaN</code> 的位置: <code>torch.where(torch.isnan(tensor))</code></li><li>替换 <code>NaN</code> 为特定值: <code>torch.nan_to_num(tensor, nan=specified_value)</code></li><li>过滤非 <code>NaN</code> 值: <code>valid_values = tensor[~torch.isnan(tensor)]</code></li><li>检查梯度中的 <code>NaN</code>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> model.named_parameters():<br>    <span class="hljs-keyword">if</span> param.grad <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> torch.isnan(param.grad).<span class="hljs-built_in">any</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;梯度 NaN 出现在参数: <span class="hljs-subst">&#123;name&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">写代码 5 分钟, 调 BUG 两小时</summary>
    
    
    
    <category term="Coding" scheme="https://zonglin-tian.github.io/categories/Coding/"/>
    
    
    <category term="Writing..." scheme="https://zonglin-tian.github.io/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 用户管理</title>
    <link href="https://zonglin-tian.github.io/uuser/"/>
    <id>https://zonglin-tian.github.io/uuser/</id>
    <published>2025-06-06T06:47:25.000Z</published>
    <updated>2025-10-27T22:47:05.374Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="高频命令"><a href="#高频命令" class="headerlink" title="高频命令"></a>高频命令</h1><ul><li>创建用户: <code>adduser new_user_name</code></li><li>修改用户密码: <code>passwd user_name</code></li><li>删除用户并移除其工作目录: <code>deluser --remove-home user_name</code></li><li>切换用户并加载其环境变量: <code>su - user_name</code></li><li>查看用户所属组: <code>id user_name</code> or <code>groups user_name</code></li><li>编辑 <code>sudo</code> 文件: <code>sudo visudo</code></li><li>将用户添加到 <code>sudo</code> 组: <code>usermod -aG sudo user_name</code></li></ul><h1 id="查看登陆信息"><a href="#查看登陆信息" class="headerlink" title="查看登陆信息"></a>查看登陆信息</h1><ul><li>查看登陆用户 (详细程度 ↑): <code>whoami</code> (当前用户) → <code>users</code> (用户名列表) → <code>who</code> (登陆时间 &amp; 来源 IP) → <strong><code>w</code></strong> (空闲时间 &amp; 当前进程) → <code>last</code> (登陆历史)  </li><li><strong>查看用户信息 (id 与组): <code>id [options] [user_name]</code></strong><ul><li>用户 ID (UID): <code>-u</code> </li><li>主组 ID (GID): <code>-g</code></li><li>所有附加组 ID: <code>-G</code> (相当于 <code>groups [user_name]</code>)</li><li>显示名称 (配合 <code>-u/g/G</code> 使用): <code>-n</code></li></ul></li><li>查看所有用户: <code>grep -P &quot;bash|zsh&quot; /etc/passwd [| cut -d: -f1]</code></li></ul><h1 id="切换用户-su"><a href="#切换用户-su" class="headerlink" title="切换用户 (su)"></a>切换用户 (su)</h1><p><code>su [options] [-] user_name [parameters]</code></p><ul><li><strong>命令前 <code>sudo</code> 可使用管理员密码切换</strong></li><li><code>-</code> 或 <code>-l</code>: 加载相应的环境变量 (<strong>推荐</strong>), 后面不加用户名表示切换到 <em>root</em></li><li><code>-c cmd</code>: 以特定用户身份执行命令</li><li><code>-s SHELL</code>: 指定 <em>shell</em></li><li><code>-g group_name</code>: 指定主组</li><li><code>-p</code>: 不重置环境变量 (不推荐)</li></ul><p><strong>注:</strong> 优先使用 <code>sudo</code> 执行命令, 而不是切换到相应用户</p><h1 id="创建用户-adduser"><a href="#创建用户-adduser" class="headerlink" title="创建用户 (adduser)"></a>创建用户 (adduser)</h1><ul><li>创建: <code>adduser new_user_name</code></li><li>测试:<ul><li>切换到新用户, 确保帐户正常: <code>su -u new_user_name</code></li><li>验证当前用户: <code>whoami</code></li><li>系统中是否存在: <code>id new_user_name</code></li><li>退出新用户: <code>exit</code></li></ul></li></ul><h1 id="修改用户-usermod"><a href="#修改用户-usermod" class="headerlink" title="修改用户 (usermod)"></a>修改用户 (usermod)</h1><ul><li>更改 shell: <code>usermod -s /bin/zsh user_name</code></li><li>修改密码: <code>passwd [user_name]</code></li><li>sudo 权限<ul><li>添加到 sudo 组: <code>usermod -aG sudo user_name</code></li><li>从 sudo 组中删除: <code>deluser user_name sudo</code></li></ul></li><li>修改主组 (不改变原来的附加组): <code>usermod -g New_Main_Group -G Original_Groups user_name</code></li></ul><h1 id="删除用户-deluser"><a href="#删除用户-deluser" class="headerlink" title="删除用户 (deluser)"></a>删除用户 (deluser)</h1><ul><li>查找用户的文件 (可在删除前后查看与验证)<ul><li>用户名: <code>find / -user user_name -ls</code></li><li>id: <code>find / -uid user_id -ls</code></li></ul></li><li>删除用户并移除其工作目录: <code>deluser --remove-home user_name</code><ul><li>仅删除用户: <code>deluser user_name</code></li></ul></li><li>查找文件系统中与任何用户都没有关联的文件: <code>find / -nouser -ls</code></li></ul><h1 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h1><ul><li><strong>新建组</strong>: <code>sudo addgroup grp_name</code></li><li>查看组[用户]信息: <ul><li><code>cat /etc/group[passwd]</code></li><li><code>getent group[passwd] [key]</code></li></ul></li><li>修改组名: <code>sudo groupmod -n new_grp_name grp_name</code></li><li><span class="emp-style red">临时组切换:</span><ul><li>启动一个 shell, 组持续到退出该 shell: <code>newgrp grp_name</code> ← (<code>exit</code>)</li><li>直接以临时组执行单条命令: <code>sg grp_name &quot;commands&quot;</code></li></ul></li><li><span class="emp-style green">高级管理命令: <code>sudo gpasswd [options] grp_name</code></span><ul><li>设置组密码: <code>sudo gpasswd grp_name</code></li><li>删除组密码 (仅组成员可访问): <code>-r </code> (限制普通用户切换组 <code>-R</code>) ← <strong><code>/etc/gshadow</code> 文件中组密码字段为 <code>!</code> 或空</strong></li><li>添加&#x2F;移除用户: <code>-a/d user_name</code></li><li><strong>批量设置组成员 (逗号分隔):</strong> <code>-M user_lists</code> (覆盖原有成员) 或<strong>直接修改 <code>/etc/group</code> 文件</strong></li><li>设置组管理员列表 (无须 <code>sudo</code>): <code>-A user_lists</code> (覆盖原管理员列表)</li></ul></li><li><strong>配置文件验证与修复:</strong><ul><li><code>pwck</code> (Password Check): <code>/etc/passwd</code>, <code>/etc/shadow</code></li><li><code>grpck</code> (Group Check): <code>/etc/group</code>, <code>/etc/gshadow</code></li></ul></li></ul><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><ul><li><code>/etc/passwd</code>, <code>/etc/shadow</code>, <code>etc/group</code>: 创建新用户时, 增加相应条目, 字段间用冒号分隔<ul><li><code>/etc/passwd</code>: 帐户信息, 用户登陆名:x(密码):用户ID:组ID:用户信息:用户目录:用户登陆 shell</li><li><code>/etc/group</code>: 组信息, 组名:x(密码):组ID:用户列表 <em>(默认情况下, 每个用户都被添加到自己的组中)</em></li></ul></li><li><code>/etc/adduser.conf</code>, <code>/etc/login.defs</code>: <code>adduser</code> 创建新用户时的默认选项</li><li><code>/etc/skel/</code>: 创建新用户时, 此<strong>文件夹</strong>下的所有文件将被复制到新用户家目录下, 通常包括登陆和应用程序启动脚本</li></ul><h1 id="sudo-权限管理"><a href="#sudo-权限管理" class="headerlink" title="sudo 权限管理"></a>sudo 权限管理</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>使用 sudo 切换用户 (加载环境变量): <code>sudo -iu user_name</code><ul><li>指定用户 (不加载指定用户<em>大部分</em>环境变量): <code>-u</code></li><li>指定组: <code>-g</code></li><li>执行命令 [可选]: <code>cmd</code></li><li><strong>加载环境变量: <code>-i</code></strong></li></ul></li><li>验证刷新缓存 (延长 sudo 会话&#x2F;检查权限): <code>sudo -v</code></li><li>查看当前用户在 sudo 权限下可以执行的命令 (<strong>sudoers</strong> 文件中生效的行): <code>sudo -l</code></li><li>清除当前用户的 sudo 认证缓存 (配置立即生效): <code>sudo -k</code></li><li><strong>usermod 添加用户到 sudo 组: <code>usermod -aG sudo user_name</code>, 验证步骤</strong><ul><li>是否添加成功: <code>groups user_name</code></li><li>切换到用户: <code>su - user_name</code> </li><li>输入密码后能成功执行, 配置正确: <code>sudo apt update</code></li></ul></li><li>使用 <code>vim</code> 编辑配置文件: <ul><li>临时生效: <code>sudo EDITOR=vim visudo</code></li><li>永久生效 (<code>.zshrc</code>): <code>export EDITOR=/usr/bin/vim</code></li><li>永久生效 (<code>/etc/sudoers</code>): <code>Defaults editor=/usr/bin/vim</code></li></ul></li></ul><h2 id="编辑-etc-sudoers-sudoers-d"><a href="#编辑-etc-sudoers-sudoers-d" class="headerlink" title="编辑 &#x2F;etc&#x2F;sudoers[sudoers.d&#x2F;]"></a>编辑 &#x2F;etc&#x2F;sudoers[sudoers.d&#x2F;]</h2><div class="note note-warning">            <ul><li>所有者为 <code>root:root</code>, 文件权限为 <code>440</code>, 目录权限为 <code>755</code>(<code>chown</code>, <code>chmod</code>)</li><li><span class="emp-style red">不要直接编辑 <strong>&#x2F;etc&#x2F;sudoers</strong> 文件, 语法错误可能导致所有 sudo 访问被锁定</span></li><li><span class="emp-style green">使用 <code>visudo</code> 命令编辑:</span><ul><li>语法检查: <code>visudo -c</code></li><li><strong>编辑 <code>/etc/sudoers.d/</code> 下的文件: <code>visudo -f /etc/sudoers.d/file_name</code></strong></li></ul></li><li>尽量使用用户组而非单个用户</li><li>限制权限到最小必要范围</li><li>查看日志文件: <code>sudo tail -f /var/log/auth.log</code></li></ul>          </div><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p><code>用户/用户组 主机=(目标用户[:组]) [NOPASSWD:]命令</code></p><ul><li>用户: <code>user_name</code></li><li>用户组: <code>%group_name</code> (以 <code>%</code> 开头)</li><li>主机 (从何处登陆): 通常设置为 <code>ALL</code> 表示所有主机, 可以指定主机名</li><li>目标用户 (可以哪些用户身份运行命令, <strong>不能省略</strong>): <code>(ALL)</code> 表示任何用户, <code>(root)</code> 表示 <em>root</em></li><li>组 (通常不需指定): 指定目标组, 可选, <span class="emp-style green">默认使用目标用户的主组</span> (<em><code>sudo -u/g cmds</code> 指定执行命令的用户&#x2F;组</em>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># (ALL)</span><br>sudo -u user_name <span class="hljs-built_in">id</span>  <span class="hljs-comment"># 用户=user_name, 组=user_name 的主组</span><br><span class="hljs-comment"># (ALL:ALL)</span><br><span class="hljs-comment"># 以指定用户及组运行命令</span><br>sudo -u user_name -g docker <span class="hljs-built_in">id</span>  <span class="hljs-comment"># 用户=user_name, 组=docker</span><br></code></pre></td></tr></table></figure></li><li>NOPASSWD: 允许无密码执行</li><li>命令 (允许执行命令列表, 以<strong>逗号</strong>分隔): 可以是完整路径 <code>/usr/bin/apt</code>, 也可以是目录 <code>/usr/sbin/</code> (结尾含 <code>/</code>), <code>ALL</code> 表示所有命令, 命令前加 <code>!</code> 表示禁止执行该命令</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>特殊字符: 字段之间以<strong>空格</strong>或<strong>制表位</strong>分隔, 命令列表之间以<strong>逗号</strong>  (必须) 分隔, 其后<em>可选</em>加空格, 注释以 <code>#</code> 开头</li><li>别名 <strong>(必须大写)</strong>: 定义用户别名 (<code>User_Alias</code>), 主机别名 (<code>Host_Alias</code>), 命令别名 (<code>Cmnd_Alias</code>), <code>=</code> <strong>前后空格可选, 不用加引号, 命令使用绝对路径 (<code>which</code>), 可使用嵌套别名</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Sudoers">User_Alias ADMINS = user1, user2, %admin<br>Host_Alias SERVERS = server1, server2<br>Cmnd_Alias PKGMGMT = /usr/bin/apt, /usr/bin/dpkg<br></code></pre></td></tr></table></figure></li><li>全局默认选项: <code>Default</code> 开头<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Sudoers"># 重置环境变量<br>Defaults env_reset<br># 2小时内无需重复输入<br>Defaults timestamp_timeout=120<br># 加载 /etc/sudoers.d 下的所有文件<br>#includedir /etc/sudoers.d<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">用户管理常用命令</summary>
    
    
    
    <category term="Ubuntu" scheme="https://zonglin-tian.github.io/categories/Ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 文本处理</title>
    <link href="https://zonglin-tian.github.io/utext/"/>
    <id>https://zonglin-tian.github.io/utext/</id>
    <published>2025-05-01T08:30:00.000Z</published>
    <updated>2025-10-29T01:13:30.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li><code>grep</code>, <code>sed</code>, <code>awk</code> Linux 文本处理三剑客, <code>grep</code> 搜索专家, <code>sed</code> 编辑快手, <code>awk</code> 数据处理大师</li></ul><h1 id="grep-文本处理瑞士军刀"><a href="#grep-文本处理瑞士军刀" class="headerlink" title="grep 文本处理瑞士军刀"></a>grep 文本处理瑞士军刀</h1><p><code>grep</code>, Global Regular Expression Print (全局正则表达式打印), 强大的文本搜索工具: 通过<strong>正则表达式</strong>或简单字符串快速搜索文件或输入流中的匹配内容, 并返回结果</p><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><ul><li><code>i</code>: 忽略大小写</li><li><code>v</code>: 反向匹配</li><li><code>n</code>: 显示匹配行的行号</li><li><code>c</code>: 统计匹配行的行数</li><li><code>o</code>: 仅输出匹配的部分</li><li><code>r</code>: 递归搜索目录</li></ul><h1 id="sed-Stream-Editor-流编辑器"><a href="#sed-Stream-Editor-流编辑器" class="headerlink" title="sed (Stream Editor) 流编辑器"></a>sed (Stream Editor) 流编辑器</h1><p>强大的<em>非交互式</em>流编辑器, 主要用于 (逐行) 文本<strong>替换, 删除, 插入和转换</strong>, 支持<em>正则表达式</em>, 尤其适合批量处理文件或管道数据</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>应用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># PATH 变量内容各路径独占一行并排序</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span> | sed <span class="hljs-string">&#x27;s/:/\n/g&#x27;</span> | <span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure></li><li>替换 (<code>s</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 全局替换</span><br>sed <span class="hljs-string">&#x27;s/old/new/g&#x27;</span> file.txt<br><span class="hljs-comment"># 替换第 2 个</span><br>sed <span class="hljs-string">&#x27;s/old/new/2&#x27;</span> file.txt<br></code></pre></td></tr></table></figure></li><li>删除 (<code>d</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除第 3 行</span><br>sed <span class="hljs-string">&#x27;3d&#x27;</span> file.txt<br><span class="hljs-comment"># 删除第 3-5 行, 最后一行用 $ 表示</span><br>sed <span class="hljs-string">&#x27;1,5d&#x27;</span> file.txt<br><span class="hljs-comment"># 删除匹配 &quot;pattern&quot; 的行</span><br>sed <span class="hljs-string">&#x27;/pattern/d&#x27;</span> file.txt<br></code></pre></td></tr></table></figure></li><li>插入&#x2F;追加 (<code>i/a</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在第 2 行前插入</span><br>sed <span class="hljs-string">&#x27;2i\插入内容&#x27;</span> file.txt<br><span class="hljs-comment"># 在最后一行后追加</span><br>sed <span class="hljs-string">&#x27;$a\追加内容&#x27;</span> file.txt<br></code></pre></td></tr></table></figure></li><li>打印行 (<code>p &amp; n</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只打印 1-3 行</span><br>sed -n <span class="hljs-string">&#x27;1,3p&#x27;</span> file.txt<br><span class="hljs-comment"># 打印包含 &quot;pattern&quot; 的行</span><br>sed -n <span class="hljs-string">&#x27;/pattern/p&#x27;</span> file.log<br></code></pre></td></tr></table></figure></li><li>行号操作 (<code>=</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在每行前显示行号</span><br>sed <span class="hljs-string">&#x27;=&#x27;</span> file.txt<br><span class="hljs-comment"># 打印匹配行的行号</span><br>sed -n <span class="hljs-string">&#x27;/pattern/=&#x27;</span> file.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p><code>sed [选项] &#39;脚本命令&#39; 文件名</code></p><ul><li><code>脚本命令</code>: 指定要执行的操作 (替换, 删除)</li><li><code>文件名</code>: 可省略 (从管道读取输入)</li></ul><h2 id="常用选项-1"><a href="#常用选项-1" class="headerlink" title="常用选项"></a>常用选项</h2><ul><li><code>n</code>: 禁止默认输出</li><li><code>-e &#39;command&#39;</code>: 指定多个命令</li><li><strong><code>-i</code>: 直接修改文件 (谨慎, 建议通过 <code>-i.bak</code> 进行备份)</strong></li><li><code>-r</code>: 启用扩展正则表达式</li></ul><h1 id="awk-“奥克”-Aho-Weinberger-Kernighan"><a href="#awk-“奥克”-Aho-Weinberger-Kernighan" class="headerlink" title="awk “奥克” (Aho-Weinberger-Kernighan)"></a>awk “奥克” (<em>A</em>ho-<em>W</em>einberger-<em>K</em>ernighan)</h1><p>Linux 系统中强大的文本处理和<strong>数据提取</strong>工具, 以逐行处理<strong>结构化文本</strong> (如日志, CSV) 著称, 支持<em>字段切割</em>, <em>模式匹配</em>, <em>数学运算</em>等复杂操作</p><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>提取指定列<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打印第 1 和第 3 列 (空格分隔)</span><br>awk <span class="hljs-string">&#x27;&#123;print $3, $3&#125;&#x27;</span> file.txt<br><span class="hljs-comment"># 以 `:` 分割, 打印用户名和家目录</span><br>awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1, $6&#125;&#x27;</span> /etc/passwd<br></code></pre></td></tr></table></figure></li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>字段自动切割: 默认按<strong>空格或制表符</strong>分割每行, $1, $2…表示第 1, 2 列</li><li>模式-动作模型: <code>模式 &#123;动作&#125;</code> 仅当行匹配模式时执行动作</li><li>内置变量: <code>NR</code> 当前行号, <code>NF</code> 当前行的字段数, <code>RS</code> 行分隔符, <code>FS</code> 输入字段分隔符, <code>OFS</code> 输出字段分隔符, <code>$0</code> 整行内容, <code>$1~$n</code> 第 1 列到第 n 列的内容, <code>FILENAME</code> 当前处理的文件名</li><li>数学计算: <code>+, -, /, *, %</code></li></ul><h2 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h2><p><code>awk &#39;模式 &#123;动作&#125;&#39; 文件名</code></p><ul><li>省略模式: 对所有行执行动作 (如 <code>awk &#39;&#123;print $1&#125;&#39; file</code>)</li><li>省略动作: 默认打印匹配行（如 <code>awk &#39;/error/&#39; file</code>)</li></ul><h2 id="基本选项"><a href="#基本选项" class="headerlink" title="基本选项"></a>基本选项</h2><ul><li><code>-v key=value</code>: 定义变量, 可用于内部使用</li><li><code>-F&#39;:&#39;</code>: 设置字段分隔符</li></ul><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="文本查看与处理"><a href="#文本查看与处理" class="headerlink" title="文本查看与处理"></a>文本查看与处理</h2><ul><li><code>cat</code>: 查看文件内容</li><li><code>less</code> &#x2F; <code>more</code>: 分页查看文件内容 (相关命令与 <code>VIM</code> 相似)<ul><li><strong><code>less</code></strong> 功能更齐全 (双向翻页, 行号), <code>more</code> 功能简单 (快速查看)</li><li><code>less +F log.txt</code> (比 <code>tail -f</code> 更灵活): 实时跟踪查看日志</li><li><code>less -S</code>: 禁用自动换行并允许水平滚动</li></ul></li><li><code>wc</code> (Word Count): <strong>统计行数 (<code>l</code>)</strong>, 单词数 (<code>w</code>), 字节数 (<code>-c</code>), 字符数 (<code>m</code>), 最长行长度 (<code>L</code>)<ul><li><code>grep -o &#39;word&#39; file.txt | wc -l</code>: 统计匹配词的出现次数</li></ul></li><li><code>head</code> &#x2F; <code>tail</code> 查看文件开头或者结尾的若干行 (默认 10 行)<ul><li><code>tail -n 5 log.txt</code>: 实时查看日志的最后 5 行</li></ul></li></ul><h2 id="文本过滤与搜索"><a href="#文本过滤与搜索" class="headerlink" title="文本过滤与搜索"></a>文本过滤与搜索</h2><ul><li><p><code>tr</code> (translate): 字符替换 (转换) 与删除, 通常与管道符 <code>|</code> 结合使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除所有数字</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello 123&quot;</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;0-9&#x27;</span><br><span class="hljs-comment"># 删除非数字字符</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Phone: 123-456-7890&quot;</span> | <span class="hljs-built_in">tr</span> -<span class="hljs-built_in">cd</span> <span class="hljs-string">&#x27;[:digit:]&#x27;</span><br><span class="hljs-comment"># 替换制表符为空格</span><br><span class="hljs-built_in">cat</span> file.txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;\t&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># 压缩连续空格为单个空格</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;too  many   spaces&quot;</span> | <span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure><ul><li><code>tr str1 str2</code>: 用 <code>str2</code>中的字符对应替换 <code>str1</code> 中的字符</li><li><code>tr -d str</code>: 删除 <code>str</code> 中的字符</li><li><code>tr -s str</code>: 压缩 <code>str</code> 中的重复字符</li><li><code>str</code> 的格式<ul><li><code>c</code>: 取补集</li><li><code>abc</code>: 枚举字符</li><li><code>a-z</code>&#x2F;<code>[0-9]</code>: 范围</li><li><code>\n</code>&#x2F;<code>\t</code>: 特殊字符</li><li>预定义字符类</li></ul></li><li>预定义字符类<ul><li><code>&#39;[:alnum:]&#39;</code>: 字母和数字</li><li><code>&#39;[:alpha:]&#39;</code>: 字母</li><li><code>&#39;[:digit:]&#39;</code>: 数字</li><li><code>&#39;[:lower:]&#39;</code>: 小写字母</li><li><code>&#39;[:upper:]&#39;</code>: 大写字母</li><li><code>&#39;[:space:]&#39;</code>: 空白字符</li><li><code>&#39;[:punct:]&#39;</code>: 标点符号</li></ul></li></ul></li><li><p><code>sort</code>: 对文本排序 (默认按字母)</p><ul><li><code>f</code>: 忽略大小写</li><li><code>r</code>: 降序</li><li><code>n</code>: 按数值排序</li><li>字段控制<ul><li><code>u</code>: 去除重复行</li><li><code>k</code>: 指定排序字段 (列数字) ← <code>-k3n</code></li><li><code>t</code>: 指定字段分隔符 (,&#x2F;:)</li></ul></li><li>输出控制<ul><li><code>o</code>: 将结果输出到指定文件</li><li><code>c</code>: 检查是否排序</li><li><code>m</code>: 合并已排序文件</li></ul></li></ul></li><li><p><code>uniq</code>: 检查和删除<strong>连续重复行</strong> (常与 <code>sort</code> 配合)</p><ul><li><code>c</code>: 显示重复的次数</li><li><code>d</code>: 只显示重复的行</li><li><code>D</code>: 显示所有重复的行</li><li><code>u</code>: 只显示不重复的行</li></ul></li></ul><h2 id="字符串处理与生成"><a href="#字符串处理与生成" class="headerlink" title="字符串处理与生成"></a>字符串处理与生成</h2><ul><li><code>xargs</code>: 将输入转换为命令行参数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除所有 .pth 文件</span><br>find . -name <span class="hljs-string">&#x27;*.txt&#x27;</span> | xargs <span class="hljs-built_in">rm</span><br></code></pre></td></tr></table></figure></li><li><code>cut</code>: 文本字段&#x2F;字符提取 (<code>awk</code> 的简化版)<ul><li><code>d</code>: 指定字段分隔符 (<code>-d:</code>)</li><li><code>f</code>: 选择指定字段 (<code>-f1,3</code>)</li><li><code>c</code>: 按字符位置提取 (<code>-c1-5</code>)</li></ul></li><li><code>printf</code>: 格式化输出 (比 <code>echo</code> 更灵活)</li></ul><h2 id="流处理与脚本工具"><a href="#流处理与脚本工具" class="headerlink" title="流处理与脚本工具"></a>流处理与脚本工具</h2><ul><li><code>tee</code>: 同时输出到屏幕和文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l | <span class="hljs-built_in">tee</span> output.txt<br></code></pre></td></tr></table></figure></li><li><code>nl</code>: 为文本添加行号</li></ul>]]></content>
    
    
    <summary type="html">grep sed awk 用法</summary>
    
    
    
    <category term="Ubuntu" scheme="https://zonglin-tian.github.io/categories/Ubuntu/"/>
    
    
    <category term="Writing..." scheme="https://zonglin-tian.github.io/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>Word 与排版</title>
    <link href="https://zonglin-tian.github.io/word/"/>
    <id>https://zonglin-tian.github.io/word/</id>
    <published>2025-03-03T05:51:41.000Z</published>
    <updated>2025-09-06T03:46:09.688Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Word-使用技巧"><a href="#Word-使用技巧" class="headerlink" title="Word 使用技巧"></a>Word 使用技巧</h1><h2 id="文字编辑"><a href="#文字编辑" class="headerlink" title="文字编辑"></a>文字编辑</h2><ul><li>文本大小写转换:<ul><li>快捷键: <code>Shift + F3</code> 来回切换 (全部大写, 全部小写, 首字母大写)</li><li>菜单项: <code>开始</code> 选项卡 → <code>字体</code> 分组 → <code>更改大小写</code> 按钮</li></ul></li></ul><h2 id="参考文献排版"><a href="#参考文献排版" class="headerlink" title="参考文献排版"></a>参考文献排版</h2><h3 id="多个交叉引用"><a href="#多个交叉引用" class="headerlink" title="多个交叉引用"></a>多个交叉引用</h3><ol><li>多篇不连续引用, 如 [1, 3, 5]: 先进行对应文献编号的交叉引用 → 在引用处选中编号, 右键 → 选择 <code>切换域代码</code> → 将 [1] 变为 <code>&#123;... \r \h \#&quot;[0&quot;&#125;</code>, [3] 变为 <code>&#123;... \r \h \#&quot;0&quot;&#125;</code>, 将 [5] 变为 <code>&#123;... \r \h \#&quot;0]&quot;&#125;</code>, 中间再添加逗号分隔即可 → 更新域</li></ol><ul><li><code>\#&quot;[0&quot;</code>: 表示保留左中括号</li><li><code>\#&quot;0&quot;</code>: 表示不要中括号</li><li><code>\#&quot;0]&quot;</code>: 表示保留右中括号</li></ul><ol start="2"><li>多篇连续引用, 如 [1-5]: 只进行第一篇和最后一篇文献编号的引用 → 对于第一个编号保留左中括号, 对于第二个编号保留右中括号 → 更新域</li><li>两个连续引用间使用<strong>逗号+空格</strong>分隔, 如 <code>[1, 2]</code>, 三个及以上的连续引用之间用短横线连接, 如 <code>[1-5]</code></li><li><code>F9</code>: 更新所有域代码 (先 <code>Ctrl + A</code> 选中内容)</li></ol><h2 id="查找与替换使用正则表达式"><a href="#查找与替换使用正则表达式" class="headerlink" title="查找与替换使用正则表达式"></a>查找与替换使用正则表达式</h2><p>开启<code>使用通配符</code>模式</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>任意数字: <code>[0-9]</code></li></ul><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><ul><li>换行符: <code>\p</code></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul><li>表达式查找: <code>()</code></li><li>占位: <code>\数字</code></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/142237132">嘟嘟. Word多参考文献连续交叉引用. 知乎</a><br>[2] <a href="https://zhuanlan.zhihu.com/p/399183452">CSer. word和正则表达式. 知乎</a></p><h1 id="Mathtype-公式录入"><a href="#Mathtype-公式录入" class="headerlink" title="Mathtype 公式录入"></a>Mathtype 公式录入</h1><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ul><li>显示空格或者制表符: 菜单栏[视图] → 全部显示[选中]</li></ul><h2 id="空格与对齐"><a href="#空格与对齐" class="headerlink" title="空格与对齐"></a>空格与对齐</h2><ul><li>空格: 0, 1, 2, 3, 4 宽度种空格, 对应快捷键为 <code>Ctrl + K</code> + <code>空格宽度</code></li><li>快速插入 0&#x2F;1 宽度空格: <code>Shift + Space</code>&#x2F;<code>Ctrl + Alt + Space</code></li><li>文本空格: 将模式切换成文本, 然后 <code>Space</code> 键即为普通意义的空格</li><li>制表符对齐: 如果未在标尺上点击位置, 按下 <code>Ctrl + Tab</code> 自动对齐到<strong>整数</strong>刻度位置</li><li>对齐符号: 在想对齐位置处按下 <code>Ctrl + ;</code> (或者通过菜单栏插入), 可实现多行公式在等号处对齐等效果; 对于没有插入对齐符号的行, 默认在公式<strong>最前端</strong>对齐</li></ul><p align="center"><img src="/img/posts/Word-与排版/space_align.png" style="height:250px" alt="空格示意图与插入菜单"/></p><h2 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://blog.csdn.net/zch19960629/article/details/88430098">Christopher Cheung. MathType中输入空格的方法. CSDN</a></p><h1 id="域代码"><a href="#域代码" class="headerlink" title="域代码"></a>域代码</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li>插入域符号: <code>Ctrl + F9</code> or [菜单]插入 → [文本]文档部件 → 域</li><li>更新域: <code>F9</code> (需要先选中内容)</li><li>显示&#x2F;隐藏域代码: <code>Shift + F9</code> (需要先选中内容或将光标放在内容之前[单个]), <code>Alt + F9</code> (显示所有域代码)</li></ul><h2 id="常用域代码"><a href="#常用域代码" class="headerlink" title="常用域代码"></a>常用域代码</h2><ul><li>编号项 (生成整数序列): <code>SEQ Equation</code> (Equation 是序列名)</li></ul><h1 id="自带公式编辑器使用技巧"><a href="#自带公式编辑器使用技巧" class="headerlink" title="自带公式编辑器使用技巧"></a>自带公式编辑器使用技巧</h1><h2 id="基本输入"><a href="#基本输入" class="headerlink" title="基本输入"></a>基本输入</h2><ul><li>输入方式可选择 LaTeX, 然后转制成公式 (专业)</li><li>公式后紧根空格可触发公式自动转换</li><li><code>()</code> 可用于界定结构子内容边界</li><li>选中内容, 点击<code>文本</code>可设置特殊字体格式</li></ul><h2 id="插入编号的公式"><a href="#插入编号的公式" class="headerlink" title="插入编号的公式"></a>插入编号的公式</h2><ul><li>✅ 自动转换: <code>Contents#()Enter</code> (不支持字体更改)</li><li>创建<code>公式</code>样式, 设定居中对齐与右对齐制表位</li><li>动态编号<ul><li>✅ 插入域代码 (<code>Ctrl + F9</code>) → <code>&#123; SEQ Equation \* MERGEFORMAT &#125;</code> </li><li>插入题注 + <strong>样式分隔符[同一段落实现不同样式]</strong> (<code>Ctrl + Alt + Enter</code>)</li></ul></li></ul><h2 id="公式编号交叉引用"><a href="#公式编号交叉引用" class="headerlink" title="公式编号交叉引用"></a>公式编号交叉引用</h2><ul><li>✅ 域代码编号: 选中编号建立书签 → 交叉引用对应的书签 (相当于 LaTeX 公式中的 <code>label</code>)</li><li>题注方式编号: 交叉引用对应的题注</li></ul><h2 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h2><p>[1] <a href="http://www.hanlindong.com/2021/word-equation/">董翰林. Word 公式编辑器的优雅使用方法</a></p><h1 id="插入-Unicode-编码字符"><a href="#插入-Unicode-编码字符" class="headerlink" title="插入 Unicode 编码字符"></a>插入 Unicode 编码字符</h1><ul><li>Unicode: 全球统一的字符编码标准, 为每个符号分配唯一的十六进制编号 (至多 4 位)</li><li><strong>输入 Unicode 编码之后, 按 <code>Alt + X</code> 直接转换为相应字符</strong> </li><li><strong>在特殊字符之后, 按 <code>Alt + X</code> 可得到相应的 Unicode 编码</strong></li><li><a href="https://symbl.cc/">Unicode 字符编码查询</a></li></ul><h2 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h2><ul><li>带圈数字: ①-⑩ → 2460-2469</li></ul><h2 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h2><ul><li>偏导数: ∂ → 2202</li></ul>]]></content>
    
    
    <summary type="html">Word 常用排版技巧</summary>
    
    
    
    <category term="Software" scheme="https://zonglin-tian.github.io/categories/Software/"/>
    
    
    <category term="Typesetting" scheme="https://zonglin-tian.github.io/tags/Typesetting/"/>
    
  </entry>
  
  <entry>
    <title>Git-GitBash-GitHub</title>
    <link href="https://zonglin-tian.github.io/git/"/>
    <id>https://zonglin-tian.github.io/git/</id>
    <published>2025-02-13T14:03:58.000Z</published>
    <updated>2025-09-06T03:17:18.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>查看配置: <code>git config --list</code><ul><li>显示配置项的来源: <code>--show-origin</code></li><li>全局配置: <code>--global</code></li><li>仓库配置: <code>--local</code></li></ul></li><li>配置文件位置: <ul><li>用户级 (<code>--global</code>): <code>$HOME\.gitconfig</code></li><li>仓库级 (<code>--local</code>): <code>$rep_dir\.git\config</code></li></ul></li><li>配置代理<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[http]</span><br>    <span class="hljs-attr">proxy</span> = http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">12345</span><br><span class="hljs-section">[https]</span><br>    <span class="hljs-attr">proxy</span> = http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li>clone 特定版本的仓库: <code>git clone --branch &lt;version&gt; repository_url</code></li><li>代理管理 (<code>git config --global</code>) (更多代理介绍参见<a href="/vpn/#%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86">系统代理</a>)<ul><li>http: <code>http.proxy &quot;socks5://127.0.0.1:12345&quot;</code></li><li>https: <code>https.proxy &quot;http://127.0.0.1:12345&quot;</code></li><li>取消: <code>git config –-global –unset http[s].proxy</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Git Git Bash GitHub 操作</summary>
    
    
    
    <category term="Software" scheme="https://zonglin-tian.github.io/categories/Software/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows Terminal</title>
    <link href="https://zonglin-tian.github.io/wter/"/>
    <id>https://zonglin-tian.github.io/wter/</id>
    <published>2025-01-07T00:48:18.000Z</published>
    <updated>2025-09-06T03:47:52.671Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="以应用为导向"><a href="#以应用为导向" class="headerlink" title="以应用为导向"></a>以应用为导向</h1><ul><li><p>查看命令的帮助信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">help cmd<br></code></pre></td></tr></table></figure></li><li><p>查看别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">CMD</span><br>doskey /macros<br><span class="hljs-meta prompt_"># </span><span class="language-bash">PowerShell</span><br>Get-Alias<br></code></pre></td></tr></table></figure></li><li><p>查看系统环境变量</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">CMD</span><br>set  # 显示所有环境变量<br>echo %var_name%  # 显示某个环境变量的值<br>set var_name=value  # 查置环境变量的值<br><span class="hljs-meta prompt_"># </span><span class="language-bash">PowerShell</span><br>Get-ChildItem/dir ENV:  # 显示所有环境变量<br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">env</span>:var_name  <span class="hljs-comment"># 显示某个环境变量的值</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">env</span>:Path -<span class="hljs-built_in">split</span> <span class="hljs-string">&#x27;:&#x27;</span>  <span class="hljs-comment"># 分行查看环境变量 Path 的值</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">env</span>:Path -<span class="hljs-built_in">split</span> <span class="hljs-string">&#x27;:&#x27;</span> | sls Python  <span class="hljs-comment"># 查找 Path 中包含 &#x27;Python&#x27; 的路径</span></span><br></code></pre></td></tr></table></figure><h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><ul><li>将命令输出到粘贴板: <code>cmd | clip</code></li></ul><h1 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h1><ul><li>配置文件位置: <code>echo $PROFILE</code></li><li>修改配置文件: <code>vim $PROFILE</code></li><li><strong>配置文件立即生效: <code>. $PROFILE</code></strong></li></ul><h1 id="ps1"><a href="#ps1" class="headerlink" title=".ps1"></a><code>.ps1</code></h1><p>- </p>]]></content>
    
    
    <summary type="html">Windows CMD (.bat) 与 PowerShell (.ps1) 操作</summary>
    
    
    
    <category term="Windows" scheme="https://zonglin-tian.github.io/categories/Windows/"/>
    
    
    <category term="Writing..." scheme="https://zonglin-tian.github.io/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>Shell 脚本</title>
    <link href="https://zonglin-tian.github.io/2024/12/04/Shell-%E8%84%9A%E6%9C%AC/"/>
    <id>https://zonglin-tian.github.io/2024/12/04/Shell-%E8%84%9A%E6%9C%AC/</id>
    <published>2024-12-04T01:57:31.000Z</published>
    <updated>2025-05-19T01:42:16.494Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h1><ul><li>空格: 赋值语句 <code>=</code> 两边不能有空格, 测试语句 <code>[]</code>内必须有空格分隔</li><li>引号<ul><li><p>变量, 命令替换, 含空格&#x2F;特殊字符的字符串 (文件名) 必须加引号</p><ul><li>默认用双引号 <code>&quot;&quot;</code> (防止空格&#x2F;特殊字符问题): 变量扩展, 支持转义字符</li><li>不需要变量扩展时单引号 <code>&#39;</code> (正则表达式): <strong>静态字符</strong>, 完全原样输出</li></ul></li><li><p><code>test</code> 或 <code>[]</code> 条件判断中变量比较必须加引号</p></li></ul></li></ul><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><ul><li>变量引用: <code>value=&quot;$Var_name&quot;</code></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/452686607">Soler索莱尔HO. 一文掌握shell脚本的基本语法. 知乎</a><br>[2] <a href="https://blog.csdn.net/u012294618/article/details/78427864">Pikachu5808. 释伴：Linux 上的 Shebang 符号(#!). CSDN</a></p>]]></content>
    
    
    <summary type="html">Shell 脚本语法</summary>
    
    
    
    <category term="Coding" scheme="https://zonglin-tian.github.io/categories/Coding/"/>
    
    <category term="Ubuntu" scheme="https://zonglin-tian.github.io/categories/Ubuntu/"/>
    
    
    <category term="Writing..." scheme="https://zonglin-tian.github.io/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>Hello Docker</title>
    <link href="https://zonglin-tian.github.io/docker/"/>
    <id>https://zonglin-tian.github.io/docker/</id>
    <published>2024-11-28T02:39:11.000Z</published>
    <updated>2025-09-04T11:48:24.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="最常用命令"><a href="#最常用命令" class="headerlink" title="最常用命令"></a>最常用命令</h1><ul><li>列出已有镜像: <code>docker image ls</code></li><li>镜像打包: <code>docker save -o file_name.tar &quot;img_name:img_tag&quot;</code></li><li>根据镜像创建实例:  <code>docker run -it --gpus all --name instance_name img_name:img_tag /bin/bash</code></li><li>根据 Dockerfile 创建镜像: <code>docker build -t img_name:img_tag</code></li><li>列出正在运行的实例: <code>docker ps</code></li></ul><h1 id="Dockerfile-语句"><a href="#Dockerfile-语句" class="headerlink" title="Dockerfile 语句"></a>Dockerfile 语句</h1><ul><li>FROM: 基础镜像名与标签</li><li>ENV: 设置环境变量</li><li>ARG: 创建镜像时的参数</li><li>WORKDIR: 设置镜像当前目录</li><li>COPY: 从本地复制内容到镜像</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>启动&#x2F;停止&#x2F;重启 Docker 服务: <code>sudo systemctl stop docker</code></li><li>编辑配置文件: <ul><li>Ubuntu: <code>sudo vim /etc/docker/daemon.json</code></li><li>Windows: <code>%USERPROFILE%\.docker\daemon.json</code></li></ul></li></ul><h2 id="自定义默认子网-172-17-0-0-16"><a href="#自定义默认子网-172-17-0-0-16" class="headerlink" title="自定义默认子网 (172.17.0.0/16)"></a>自定义默认子网 (<code>172.17.0.0/16</code>)</h2><p>在配置文件中添加如下内容 (以 <code>10.0.0.0/24</code> 为例):</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;bip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10.0.0.1/24&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-address-pools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;base&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10.1.0.0/16&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">24</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>验证: <code>ip addr show docker0</code></li></ul><h1 id="wsl"><a href="#wsl" class="headerlink" title="wsl"></a>wsl</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>查看帮助: <strong><code>wsl --help</code></strong></li><li>版本管理:<ul><li><strong>查看状态: <code>wsl --status</code></strong></li><li>更新 wsl: <code>wsl --update</code></li><li>设置默认子系统: <code>wsl --set-default/-s sub_system_name</code></li><li>将子系统转换为 wsl2: <code>wsl --set-version sub_system_name 2</code> </li><li>设置 wsl2 为默认版本: <code>wsl --set-default-version 2</code></li></ul></li><li>查看子系统信息:<ul><li>已安装子系统: <strong><code>wsl -l -v</code></strong></li><li>官方发布子系统: <code>wsl -l -o</code></li><li><strong>运行子系统: <code>wsl -l -r</code></strong></li></ul></li><li>启动子系统:<ul><li>默认子系统: <code>wsl [~]</code></li><li><strong>特定: <code>wsl -d sub_system_name</code></strong></li></ul></li><li><strong>关闭子系统:</strong><ul><li>特定: <code>wsl -t sub_system_name</code></li><li>所有子系统与虚拟机: <code>wsl --shutdown</code></li><li>退出子系统: <code>exit</code></li></ul></li><li><strong>安装子系统: <code>wsl --install -d sub_system_name</code> (建议下载文件以自定义安装位置)</strong></li><li>卸载子系统: <code>wsl --unregister sub_system_name</code></li></ul><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/11217948712">直抒胸臆. 解决问题：WSL升级后无法运行：错误代码: wsl&#x2F;callmsi&#x2F;install&#x2F;error_install_failure. 知乎</a></li><li><a href="https://github.com/microsoft/WSL/issues/11697">WSL. Could not write value to key \SOFTWARE\Classes\Drive\shell\WSL #11697</a></li></ul>]]></content>
    
    
    <summary type="html">Docker 常用命令</summary>
    
    
    
    <category term="Software" scheme="https://zonglin-tian.github.io/categories/Software/"/>
    
    
  </entry>
  
  <entry>
    <title>终端 Python: IPython</title>
    <link href="https://zonglin-tian.github.io/2024/10/25/Terminal-Python-IPython/"/>
    <id>https://zonglin-tian.github.io/2024/10/25/Terminal-Python-IPython/</id>
    <published>2024-10-25T02:39:33.000Z</published>
    <updated>2024-12-31T07:39:21.466Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>IPython 提供了一个丰富的工具包, 可以最大限度以交互方式使用 Python, 主要由两部分组成:</p><ul><li>交互式 Python shell</li><li>一个 Jupyter 内核</li></ul><h1 id="历史输入与输出"><a href="#历史输入与输出" class="headerlink" title="历史输入与输出"></a>历史输入与输出</h1><ul><li>hist: 查看历史输入, <code>-n</code> 则额外显示输入序号</li><li>_: 查看最近的一个<em>输出</em>结果</li><li>_n: 查看指定序号 n 的输出结果</li><li>_i: 查看最近的一个输入</li><li>_iN: 查看指定序号的输入</li></ul><h1 id="内省-内视功能"><a href="#内省-内视功能" class="headerlink" title="内省 (内视功能)"></a>内省 (内视功能)</h1><ul><li>object? 或者 ?object: 显示对象的一些通用信息</li><li>object?? 或者 ??object: 显示对象详细信息, 对于类或者函数, 将会显示源码</li><li>numpy.*load*?: 显示所有包含 load 的 numpy 函数</li><li>numpy.*sort?: 显示所有以 sort 结尾的 numpy 函数</li></ul><h1 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h1><p>Magic command 是常规 Python 代码的增强版, 通常由 <code>IPython</code> 的内核提供, 以 <code>%</code> 字符为前缀, 一共有两种魔术命令: </p><ul><li>% 前缀: 命令在一行代码上运行</li><li>%% 前缀: 命令在整个单元格上运行</li></ul><p><strong>默认情况下, 魔术命令总是以 % 分号开头, 但这不是必须的, 也可以直接使用不带 % 的魔术命令, 这称之为 <code>自动魔术命令 (automagic)</code></strong>. 当使用自动魔术命令时, 不能出现和魔术命令同名的变量, 否则显示的是变量. <strong>可以使用 <code>%automagic</code> 来切换是否开启自动魔术命令</strong></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>quickref: 显示 ipython 的快速参考</li><li><strong>lsmagic: 列出所有魔术命令</strong></li><li><strong>mc? 或者 ?mc: 显示魔术命令的帮助信息</strong></li><li>magic: 列出所有魔术命令的详细信息</li><li><strong>run file.py: 运行脚本</strong></li><li><strong>pycat file.py: 显示脚本内容</strong></li><li>writefile file.py: 将内容写入脚本 (-a 表示追加)</li><li>paste: 运行粘贴板上的代码</li><li><strong>查看变量</strong><ul><li>who: 依次显示所有变量的名称</li><li>whols: 以列表的形式显示所有变量的名称</li><li>whos: 显示所有变量的详细信息</li></ul></li><li><strong>变量删除</strong><ul><li>xdel var_name 或者 del var_name: 删除变量 var_name</li><li>resest: 删除交互命名空间中所有变量</li></ul></li><li><strong>调试</strong><ul><li>debug: 运行代码出现问题后, 使用此命令将回溯到代码异常处, 并进入调试模式</li><li>pdb: 运行代码出现问题时, 将自动进入调试模式</li></ul></li></ul><h1 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h1><p>以 <code>!</code> 开头的命令可直接在 Python 环境中执行操作系统中 shell 命令</p><ul><li>!cmd: 打开 CMD</li><li>!pwd: 当前目录</li><li>!echo $HOME: 查看环境变量 $HOME</li><li>!python train.py: 运行 python 程序</li></ul><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ul><li>向前查找以当前输入的文本开头的历史命令: <code>Ctrl + P</code></li><li>向后查找以当前输入的文本开头的历史命令: <code>Ctrl + N</code></li><li>从剪贴板粘贴文本: <code>Ctrl + Shift + V</code></li><li>将光标移至行首: <code>Ctrl + A</code></li><li>将光标移至行尾: <code>Ctrl + E</code></li><li>删除从光标开始至行尾的文本: <code>Ctrl + K</code></li><li>删除光标以前的所有文本: <code>Ctrl + U</code></li><li>清屏: <code>Ctrl + L</code></li><li>移动一个字符: <code>Ctrl + B/F</code></li></ul><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="给系统-shell-命令定义一个别名作为魔术命令"><a href="#给系统-shell-命令定义一个别名作为魔术命令" class="headerlink" title="给系统 shell 命令定义一个别名作为魔术命令"></a>给系统 shell 命令定义一个别名作为魔术命令</h2><h2 id="给文件目录定义一个书签-快速访问"><a href="#给文件目录定义一个书签-快速访问" class="headerlink" title="给文件目录定义一个书签, 快速访问"></a>给文件目录定义一个书签, 快速访问</h2><h2 id="以-Vim-模式输入命令"><a href="#以-Vim-模式输入命令" class="headerlink" title="以 Vim 模式输入命令"></a>以 Vim 模式输入命令</h2><ul><li>临时配置: 在 IPython 内输入: <code>%config TerminalInteractiveShell.editing_mode = &#39;vi&#39;</code></li><li>查询当前输入模式: <code>%config TerminalInteractiveShell.editing_mode</code></li><li>永久配置: 编辑或者创建位于 <code>~/.ipython/profile_default/</code> 目录下的  <code>ipython_config.py</code> 文件, 添加下列行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c.TerminalInteractiveShell.editing_mode = <span class="hljs-string">&#x27;vi&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://blog.csdn.net/qq_27825451/article/details/84320859?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-84320859-blog-53086766.235%5Ev39%5Epc_relevant_yljh&spm=1001.2101.3001.4242.2&utm_relevant_index=2">LoveMIss-Y. 史上最详细、最完全的ipython使用教程，Python使用者必备！——ipython系列之一. CSDN</a><br>[2] <a href="https://ipython.readthedocs.io/en/stable/">IPython. Document</a><br>[3] <a href="https://marketsplash.com/tutorials/ipython/ipython-vim-mode/#:~:text=Setting%20Up%20IPython%20Vim%20Mode%201%20IPython%20Installation,...%205%20Checking%20Your%20Vim%20Mode%20Status%20">How To Use IPython Vim Mode Effectively</a></p>]]></content>
    
    
    <summary type="html">IPython 终端操作</summary>
    
    
    
    <category term="Coding" scheme="https://zonglin-tian.github.io/categories/Coding/"/>
    
    
    <category term="Python" scheme="https://zonglin-tian.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CUDA Toolkit of Conda and Local</title>
    <link href="https://zonglin-tian.github.io/cuda/"/>
    <id>https://zonglin-tian.github.io/cuda/</id>
    <published>2024-10-10T06:28:47.000Z</published>
    <updated>2025-10-30T12:00:21.136Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-warning">            <p><strong>Warning:</strong><br>本人对这一块的相关概念理解不深, 主要从解决实际问题的角度出发, 慎重参考</p>          </div><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>以 ubuntu 服务器为例, 下面三种情况可能涉及到 cuda 版本的问题</p><ol><li><code>nvidia-smi</code>: 显卡驱动</li><li><code>nvcc -V</code>: 从 <a href="https://developer.nvidia.com/cuda-toolkit-archive">NVIDIA CUDA 官网</a>安装的 CUDA Toolkit 的 cuda 驱动</li><li><code>conda install pytorch==2.3.1 torchvision==0.18.1 torchaudio==2.3.1 pytorch-cuda=12.1 -c pytorch -c nvidia</code>: conda 安装 PyTorch 时, 安装的 cuda 驱动</li></ol><p><strong>存在性与版本兼容性:</strong></p><ul><li>1 必须存在, 2 与 3 可同时存在也可只含其一</li><li>1 的版本号必须<strong>不小于</strong> 2 和 3 的版本号</li></ul><h1 id="CUDA-自定义安装"><a href="#CUDA-自定义安装" class="headerlink" title="CUDA 自定义安装"></a>CUDA 自定义安装</h1><ul><li><p>通过 <code>nvidia-smi</code> 查看当前显卡驱动版本 (若没有安装, 可在后续安装 CUDA Toolkit 时选中 <code>Driver</code> 进行安装)</p></li><li><p>到<a href="https://developer.nvidia.com/cuda-toolkit-archive">官网</a>下载对应版本的 CUDA Toolkit (向下兼容). 以 ubuntu 20.04 安装 12.4.0 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Linux → x86_64 → Ubuntu → 20.04 → runfile (local) → 查看下方的 Installation Instructions</span><br>wget https://developer.download.nvidia.com/compute/cuda/12.4.0/local_installers/cuda_12.4.0_550.54.14_linux.run<br><span class="hljs-comment"># 当想自定义安装位置在个人工作目录下时, 命令可不以 sudo 开头</span><br>sudo sh cuda_12.4.0_550.54.14_linux.run<br></code></pre></td></tr></table></figure></li><li><p><span class="emp-style red">安装关键之处</span></p><ol><li>通常不需勾选安装&#x2F;更新显卡驱动 (若要勾选, 前面的命令应以 <code>sudo</code> 开头)</li><li>对于深度学习, 一般只需勾选第二个 <code>CUDA Toolkit</code>, 后面的不需要  <div style="text-align: center;">  <img src="/img/posts/CUDA-Toolkit-of-Conda-and-Local/cuda_install.png" style="zoom:80%">  </div></li><li><strong>点击 <code>Options</code> → <code>Toolkit Options</code> 可自定义 CUDA 安装位置</strong> (最后的 <code>Library install path</code> 通常不需要管)</li><li>一切定义好之后, 点击 <code>Install</code></li><li>安装完成后会有相关提示, 可复制其中的<strong>路径</strong>, 方便后面定义环境变量</li></ol></li><li><p>定义相关环境变量, 写入 <code>.bashrc</code> 或者 <code>.zshrc</code> 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对于自定义 cuda 安装位置, 必不可少</span><br><span class="hljs-comment"># 以 cuda-12.4 为例, 语句中的路径需要替换为前面安装完成时的输出路径</span><br><span class="hljs-built_in">export</span> CUDA_HOME=/usr/local/cuda-12.4/<br><span class="hljs-built_in">export</span> PATH=/usr/local/cuda-12.4/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-12.4/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br></code></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nvcc 有定义或者路径正确</span><br><span class="hljs-built_in">which</span> nvcc  <span class="hljs-comment"># 输出的前缀应以安装的 cuda 的路径为前缀</span><br>nvcc -V  <span class="hljs-comment"># 输出应为安装的 cuda 版本</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="多版本-CUDA-切换"><a href="#多版本-CUDA-切换" class="headerlink" title="多版本 CUDA 切换"></a>多版本 CUDA 切换</h1><p><strong>确定顺序: <code>CUDA_HOME/CUDA_PATH</code> → <code>which/where nvcc</code> → <code>/usr/local/cuda | C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v*.*</code></strong></p><p>当 2 和 3 同时存在或者第 2 种情况下安装有多个版本的 CUDA Toolkit, 代码运行时, 需要根据实际情况指定默认的 cuda 版本. </p><p><strong>查看当前默认的 cuda:</strong> <code>which nvcc</code> 输出的向上两级目录</p><ul><li>例 1: 假设 2 和 3 同时并存, 默认使用 3 中的 cuda, <em><strong>如何指定 2 中的 cuda 为默认值是个问题?</strong></em><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看 PyTorch 编译时 cuda 的版本</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># torch.__version__</span><br><span class="hljs-comment"># torch.cuda.is_available()</span><br>torch.version.cuda<br><span class="hljs-comment"># 查看 PyTorch 运行时调用的 cuda 版本</span><br><span class="hljs-keyword">import</span> torch.utils.cpp_extension<br>torch.utils.cpp_extension.CUDA_HOME<br></code></pre></td></tr></table></figure></li><li>例 2: 假设 2 中同时存在多个版本 cuda, 指定特定版本号的 cuda 为默认值 (<em><strong>对基于 Tensorflow 的任务可能较常遇到</strong></em>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 假设安装的 cuda 都在 /usr/local/ 下, 有 cuda-12.1, cuda-12.4</span><br><span class="hljs-comment"># 在 .bashrc 或者 .zshrc 文件中定义或者修改和 cuda 相关的环境变量</span><br><br><span class="hljs-comment"># 定义 CUDA_VERSION 这个变量使得后续更改更优雅</span><br><span class="hljs-comment"># 完全可以不用定义, 之后的更改使用完全显示的路径即可</span><br><span class="hljs-built_in">export</span> CUDA_VERSION=12.4<br><span class="hljs-built_in">export</span> CUDA_HOME=/usr/local/cuda-<span class="hljs-variable">$CUDA_VERSION</span>/<br><span class="hljs-built_in">export</span> PATH=/usr/local/cuda-<span class="hljs-variable">$CUDA_VERSION</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-<span class="hljs-variable">$CUDA_VERSION</span>/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><span class="hljs-comment"># 当只是临时指定, 可直接在终端输入</span><br><span class="hljs-comment"># 保存退出</span><br><span class="hljs-built_in">source</span> .bashrc <span class="hljs-comment"># source .zshrc</span><br><span class="hljs-comment"># 验证是否设置正确</span><br><span class="hljs-built_in">which</span> nvcc  <span class="hljs-comment"># 输出结果应为 /usr/local/cuda-12.4/bin/nvcc</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h1><p>cuDNN 是针对深度神经网络中的基础操作而设计基于 GPU 的加速库, 前面 3 会自动安装相应的 cuDNN, 当只是 2 存在时, 需要额外安装 cuDNN 并对相关文件复制&#x2F;移动</p><div class="note note-warning">            <p><strong>个人理解:</strong></p><ol><li>基于 PyTorch 的深度学习任务, 按照<a href="https://pytorch.org/get-started/previous-versions/">官网</a>提供的命令进行安装即可, <strong>不需要</strong>额外安装 CUDA Toolkit 与 cuDNN</li><li>基于 Tensorflow 的深度学习任务需要根据要安装的 <a href="https://tensorflow.google.cn/install/source#linux"><strong>Tensorflow 版本</strong></a>来安装相应版本的 CUDA Toolki 与 cuDNN, 并通常涉及到<a href="/2024/10/10/CUDA-Toolkit-of-Conda-and-Local/#%E5%A4%9A%E7%89%88%E6%9C%AC-cuda-%E5%88%87%E6%8D%A2"><strong>多版本 CUDA 切换</strong></a></li></ol>          </div><p><span style="font-size:15pt;font-weight:bold;color:red">Steps:</span> </p><ul><li>安装显卡驱动与 CUDA Toolkit (假设都为 12.4)</li><li>到<a href="https://developer.nvidia.com/rdp/cudnn-archive">官网</a>下载对应的 cuDNN 版本 (比如 v8.9.7) → <code>Local Installer for Linux x86_64 (Tar)</code> → 上传到服务器</li><li>解压缩上面的 <code>.tar.xz</code> 文件并复制相关文件到对应的 CUDA 目录下. 以 <code>/usr/local/cuda-12.4/</code> 为例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压缩</span><br>tar -xvf cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar.xz<br><span class="hljs-built_in">cd</span> cudnn-linux-x86_64-8.9.7.29_cuda12-archive<br><span class="hljs-comment"># 复制文件</span><br>sudo <span class="hljs-built_in">cp</span> include/cudnn*.h /usr/local/cuda-12.4/include<br>sudo <span class="hljs-built_in">cp</span> lib/libcudnn* /usr/local/cuda-12.4/lib64<br><span class="hljs-comment"># 为所有用户添加读权限 (可选, 通常都具有读的权限)</span><br>sudo <span class="hljs-built_in">chmod</span> a+r /usr/local/cuda-12.4/include/cudnn*.h<br>sudo <span class="hljs-built_in">chmod</span> a+r /usr/local/cuda-12.4/lib64/libcudnn*<br><span class="hljs-comment"># 查看 cuDNN 信息</span><br><span class="hljs-built_in">cat</span> /usr/local/cuda-12.4/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br></code></pre></td></tr></table></figure></li><li><em>执行 <code>sudo ldconfig</code> 可能提示<strong>文件不是链接</strong> → 删除文件 → 创建软链接</em></li></ul><p><span style="font-size:12pt;font-weight:bold;color:green">注:</span> Windows 安装 cuDNN, 下载相应的 <code>.zip</code> 文件 → 解压缩 → 复制 <code>bin, lib, include</code> 三个文件夹到 <code>CUDA 的安装目录</code></p><h1 id="Ubuntu-显卡驱动更新"><a href="#Ubuntu-显卡驱动更新" class="headerlink" title="Ubuntu 显卡驱动更新"></a>Ubuntu 显卡驱动更新</h1><ul><li><p>基本命令 (sudo 运行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br>apt install software-properties-common  <span class="hljs-comment"># 为了使用 add-apt-repository 命令</span><br>apt install ubuntu-drivers-common  <span class="hljs-comment"># 为了使用 ubuntu-drivers 命令</span><br><span class="hljs-comment"># 添加 NVIDIA PPA</span><br>add-apt-repository ppa:graphics-drivers/ppa<br>apt update<br><span class="hljs-comment"># 查找可用的 NVIDIA 驱动驱动程序</span><br>ubuntu-drivers devices  <span class="hljs-comment"># 或 apt search nvidia-driver</span><br>apt install nvidia-driver-&lt;version&gt;<br><span class="hljs-comment"># 重启计算机</span><br></code></pre></td></tr></table></figure></li><li><p>PyTorch 无法使用 (<code>CUDA unknown error</code>)</p><ul><li><a href="https://blog.csdn.net/qq_43428139/article/details/133498358">白帽子续命指南. RuntimeError: CUDA unknown error - this may be due to an incorrectly set up environme… .CSDN</a></li></ul></li></ul><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><ul><li>ubuntu 安装 Tensorflow<ul><li><a href="https://blog.csdn.net/m0_51302496/article/details/137185657">配置Tensorflow使用CUDA进行GPU加速(超详细教程)</a></li></ul></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://blog.csdn.net/bird11111/article/details/105746686">一颗牙牙. 下载各版本cuda，下载以前版本的cuda. CSDN</a><br>[2] <a href="https://www.cnblogs.com/yhjoker/p/10972795.html"><strong>yhjoker. Pytorch 使用不同版本的 cuda. 博客园</strong></a><br>[3] <a href="https://zhuanlan.zhihu.com/p/91334380"><strong>marsggbo. 显卡，显卡驱动,nvcc, cuda driver,cudatoolkit,cudnn到底是什么？知乎</strong></a><br>[4] <a href="https://blog.csdn.net/qq_42406643/article/details/109545766">tomorrow″. 理清GPU、CUDA、CUDA Toolkit、cuDNN关系以及下载安装. CSDN</a><br>[5] <a href="https://blog.csdn.net/weixin_37926734/article/details/123033286">嵌入式技术. Ubuntu20.04下CUDA、cuDNN的详细安装与配置过程（图文）.CSDN</a><br>[6] <a href="https://blog.csdn.net/AI_BING_/article/details/129316768?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bpytorch%E7%94%A8%E7%9A%84cuda%E7%89%88%E6%9C%AC&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-129316768.142%5Ev73%5Einsert_down3,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">我是好人BING. 如何正确查看pytorch运行时真正调用的cuda版本. CSDN</a></p>]]></content>
    
    
    <summary type="html">辨析 conda 内外安装的 CUDA Toolkit</summary>
    
    
    
    <category term="Others" scheme="https://zonglin-tian.github.io/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 利器</title>
    <link href="https://zonglin-tian.github.io/usoft/"/>
    <id>https://zonglin-tian.github.io/usoft/</id>
    <published>2024-09-24T15:25:49.000Z</published>
    <updated>2025-10-31T01:45:28.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="rclone"><a href="#rclone" class="headerlink" title="rclone"></a>rclone</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>服务器之间文件传输</li><li><strong>路径指定为 <code>remote:path</code></strong></li><li><strong>如果路径不以 <code>/</code> 开头, 表示相对于用户的家目录, 空路径为用户家目录</strong></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://rclone.org/install">安装</a></h2><ul><li>系统: <code>curl https://rclone.org/install.sh | sudo bash</code></li><li>自定义: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># fetch and unpack</span><br>curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip<br>unzip rclone-current-linux-amd64.zip<br><span class="hljs-built_in">cd</span> rclone-*-linux-amd64<br><span class="hljs-comment"># copy binary file</span><br>sudo <span class="hljs-built_in">cp</span> rclone /usr/bin/<br>sudo <span class="hljs-built_in">chown</span> root:root /usr/bin/rclone<br>sudo <span class="hljs-built_in">chmod</span> 755 /usr/bin/rclone<br><span class="hljs-comment"># install manpage</span><br>sudo <span class="hljs-built_in">mkdir</span> -p /usr/local/share/man/man1<br>sudo <span class="hljs-built_in">cp</span> rclone.1 /usr/local/share/man/man1/<br>sudo mandb<br></code></pre></td></tr></table></figure></li></ul><h2 id="常用命令-sftp"><a href="#常用命令-sftp" class="headerlink" title="常用命令 (sftp)"></a>常用命令 (<a href="https://rclone.org/sftp/">sftp</a>)</h2><ul><li><strong>配置 [文件]: <code>config [file]</code></strong></li><li>复制: <code>copy</code></li><li>从源移动文件到目标: <code>move</code></li><li>将远程存储挂载: <code>mount</code></li><li>查看目录下所有文件: <code>lsd</code></li></ul><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><ul><li>显示实时传输进度: <code>-P</code></li></ul><h1 id="SSHFS"><a href="#SSHFS" class="headerlink" title="SSHFS"></a>SSHFS</h1><p>服务器目录本地挂载</p><ul><li>安装: <code>sudo apt install sshfs</code></li><li>挂载: <code>sudo vim /etc/fstab</code><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 添加挂载项</span><br>username@host|IP:/remote/path /mount/dir fuse.sshfs x-systemd.automount,_netdev,<span class="hljs-attr">IdentityFile</span>=/path/id_rsa,uid=UID,gid=GID,allow_other,default_permissions,ServerAliveInterval=<span class="hljs-number">15</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="TMUX"><a href="#TMUX" class="headerlink" title="TMUX"></a>TMUX</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>Tmux 用于分离终端与会话, 终端窗口关闭后, 会话仍在后台运行 (即进程守护)</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><h3 id="root-系统级安装"><a href="#root-系统级安装" class="headerlink" title="root 系统级安装"></a>root 系统级安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install tmux<br></code></pre></td></tr></table></figure><h3 id="普通用户源码安装"><a href="#普通用户源码安装" class="headerlink" title="*普通用户源码安装"></a>*普通用户源码安装</h3><ul><li>(源码) 安装依赖 (libevent)</li><li><strong>下载并编译</strong></li><li>添加环境变量</li><li>验证安装: <code>tmux -V</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查 tmux 的依赖</span><br>ldd $(<span class="hljs-built_in">which</span> tmux)<br></code></pre></td></tr></table></figure></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>永久生效：写入 <code>~/.tmux.conf</code> 中 → 保存 → 重新加载配置 <code>tmux source-file ~/.tmux.conf</code></li><li>临时生效: 按 <code>Ctrl + B</code> → 输入 <code>:set ...</code> → 回车</li><li>查看配置值: <code>tmux show-options -g [item_name]</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 滚动模式下使用 vi 风格</span><br><span class="hljs-built_in">set</span> -g mode-keys vi<br><span class="hljs-comment"># 自定义缓冲区大小</span><br><span class="hljs-built_in">set</span> -g history-limit 10000<br><span class="hljs-comment"># 启用鼠标支持</span><br><span class="hljs-comment">#- 点击切换面板</span><br><span class="hljs-comment">#- 拖动面板边框调整大小</span><br><span class="hljs-comment">#- 滚动查看历史输出</span><br><span class="hljs-comment">#- 点击底部状态栏窗口名称切换窗口</span><br><span class="hljs-built_in">set</span> -g mouse on<br><span class="hljs-comment"># 移除默认鼠标右键绑定</span><br>unbind -n MouseDown3Pane  <br><span class="hljs-comment"># 鼠标右键粘贴</span><br><span class="hljs-built_in">bind</span> -n MouseDown3Pane run-shell <span class="hljs-string">&quot;tmux paste-buffer&quot;</span><br><span class="hljs-comment"># 彩色支持</span><br><span class="hljs-comment"># set -g default-terminal &quot;tmux-256color&quot;</span><br><span class="hljs-built_in">set</span> -g default-terminal <span class="hljs-string">&quot;screen-256color&quot;</span><br><span class="hljs-comment"># 平滑颜色</span><br><span class="hljs-built_in">set</span> -ga terminal-overrides <span class="hljs-string">&quot;,*:Tc&quot;</span><br></code></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li><strong>核心</strong>: session (会话) → window (窗口) → pane (面板)</li><li>前缀键 (prefix): <code>Ctrl + b</code></li><li>启动 (新建会话): <code>tmux</code> (左侧为窗口信息: 编号与名称, 右则为系统信息)</li><li>后台运行 (分离会话): <code>tmux deatach</code> 或 <code>prfix + d</code></li><li>查看会话: <code>tmux ls</code> 或 <code>tmux list-session</code></li><li>进入会话: <code>tmux a -t session_id</code></li><li>退出 (关闭) 会话: <code>exit</code> 或 <code>Ctrl + d</code> (会话外可使用 <code>tmux kill-session -t session_id</code>)</li><li>终止 tmux 服务: <code>tmux kill-server</code></li><li>查看帮助: <code>prefix + ?</code> (按下 <code>ESC</code> 或 <code>q</code> 退出)</li><li>[系统] 粘贴: <code>[Shift +] 鼠标右键 (需要配置)</code></li></ul><h2 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h2><ul><li>创建新窗口: <code>prefix + c</code></li><li>显示窗口列表: <code>prefix + w</code></li><li>切换窗口:<ul><li>指定窗口: <code>prefix + num</code></li><li>上&#x2F;下一个: <code>prefix + p/n</code></li></ul></li><li>重命名窗口: <code>prefix +,</code> → 输入新名称</li></ul><h2 id="面板操作"><a href="#面板操作" class="headerlink" title="面板操作"></a>面板操作</h2><ul><li>分割当前面板:<ul><li><strong>垂直: <code>prefix + %</code></strong></li><li>水平: <code>prefix + &quot;</code></li></ul></li><li>切换面板:<ul><li>鼠标点击</li><li><code>prefix + 方向键</code></li><li>循环切换: <code>prefix + o</code></li></ul></li><li>关闭当前面板: <code>exit</code> &#x2F; <code>prefix + x</code></li></ul><h2 id="滚动模式"><a href="#滚动模式" class="headerlink" title="滚动模式"></a>滚动模式</h2><ul><li>进入: <code>prefix + [</code></li><li>vi 模式: 搜索 (<code>/?-nN</code>), 最初位置 (<code>g</code>), 最新输出 (<code>G</code>)</li><li>翻页<ul><li><code>PageUp</code>, <code>PageDown</code></li><li>vi 模式: <code>Ctrl + b/d</code>, <code>Ctrl + f/u</code></li></ul></li><li>复制<ul><li>按住 <code>Shift</code> 选中即复制</li><li>vi 模式: 按下 <code>Space</code> 开始选择, 移动光标扩大选区, 按下 <code>Enter</code> 复制选中内容</li></ul></li></ul><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><ul><li>进入: <code>prefix + :</code></li><li>面板同步操作: <code>setw sync on/off</code></li></ul><h1 id="Asciinema"><a href="#Asciinema" class="headerlink" title="Asciinema"></a>Asciinema</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>用于录制和分享终端会话, 可以将命令行操作录制为 ASCII 视频格式, 方便记录和分享终端操作过程</p><p><em>单词理解</em>: ASCII  + Cinema → Asciinema (ASCII 电影, 即以 ASCII 字符形式记录和展示的终端操作过程)</p><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install asciinema<br></code></pre></td></tr></table></figure><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开始录制 (rec) 终端的输入与输出 (exit 结束录制)</span><br>asciinema rec /path_to_file/file_name.cast<br><span class="hljs-comment"># 即时显示 (cat) 录制的所有内容</span><br>asciinema <span class="hljs-built_in">cat</span> /path_to_file/file_name.cast<br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>[1] <a href="https://zhuanlan.zhihu.com/p/261744578">chengco. asciinema:终端操作录制神器. 知乎</a></li></ul>]]></content>
    
    
    <summary type="html">Ubuntu 常用软件</summary>
    
    
    
    <category term="Ubuntu" scheme="https://zonglin-tian.github.io/categories/Ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>Tensorboard notes</title>
    <link href="https://zonglin-tian.github.io/tensorboard/"/>
    <id>https://zonglin-tian.github.io/tensorboard/</id>
    <published>2024-09-01T12:14:26.000Z</published>
    <updated>2025-06-22T14:48:19.113Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在机器学习中, 要改进模型的某些参数, 通常需要对其进行衡量, Tensorboard 用于提供机器学习工作流程期间所需测量和呈现的工具, 能够跟踪实验指标, 呈现模型计算图, 将嵌入向量投影到较低维度的空间. </p><p>Tensorboard 原本是 TensorFlow 的可视化工具, <strong>TensorboardX</strong> 是一个支持 PyTorch 的可视化工具, 而 PyTorch 官方的 <code>torch.utils.tensorboard</code> 是 PyTorch 与 Tensorboard 合作开发的</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install tensorboard  <span class="hljs-comment"># tensorboardx 依赖于 tensorboard</span><br>pip install tensorboardx<br></code></pre></td></tr></table></figure><h1 id="Python-程序"><a href="#Python-程序" class="headerlink" title="Python 程序"></a>Python 程序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-comment"># 或者 from tensorboardx import SummaryWritter</span><br>writer = SummaryWriter(log_dir=os.path.join(save_path, <span class="hljs-string">&#x27;log&#x27;</span>), comment=<span class="hljs-string">&quot;writter_comment&quot;</span>)<br>writer.add_type(tag_name, <span class="hljs-built_in">object</span>, iterations)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">type: </span><br><span class="hljs-string">- scalar</span><br><span class="hljs-string">- histogram</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="终端使用"><a href="#终端使用" class="headerlink" title="终端使用"></a>终端使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tensorboard --logdir=<span class="hljs-string">&quot;path_log&quot;</span><br><span class="hljs-comment"># 在网页中打开: http://localhost:6060/</span><br></code></pre></td></tr></table></figure><h1 id="本地查看服务器-tensorboard-信息"><a href="#本地查看服务器-tensorboard-信息" class="headerlink" title="本地查看服务器 tensorboard 信息"></a>本地查看服务器 tensorboard 信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地终端输入</span><br><span class="hljs-comment"># ssh [-p port_num] -L local_num:localhost:6008 user_name@server_ip</span><br>ssh user_name@ip_server_ip -L local_num:localhost:6008<br><span class="hljs-comment"># ssh user_name@server_ip -L localhost:local_num:localhost:6008</span><br><span class="hljs-comment"># 进入远程服务器终端后, 输入</span><br>conda activate env_name<br>tensorboard --logdir=<span class="hljs-string">&quot;log_path&quot;</span> --port=6008<br><span class="hljs-comment"># 在本地浏览器输入: localhost:local_num 即可进入服务器 tensorboard 界面</span><br></code></pre></td></tr></table></figure><p><strong>建议: 远程服务器端口和本地端口保持一致, 可快速点击链接访问</strong></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://blog.csdn.net/qq_27155171/article/details/125337697">稚晖君的头号男粉. TensorboardX和Tensorboard的介绍及使用. CSDN</a><br>[2] <a href="https://pytorchbook.cn/chapter4/4.2.2-tensorboardx/">PyTorch 中文手册. 使用Tensorboard在 PyTorch 中进行可视化</a><br>[3] <a href="https://blog.csdn.net/HowieXue/article/details/105412155">HowieXue. 数据可视化：TensorboardX安装及使用（安装测试+实例演示）.CSDN</a><br>[4] <a href="https://zhuanlan.zhihu.com/p/471198169">deephub. TensorBoard最全使用教程：看这篇就够了. 知乎</a><br>[5] <a href="https://blog.csdn.net/qq_41656402/article/details/131123121">柒AII. TensorBoard最全使用教程：看这篇就够了. CSDN</a><br>[6] <a href="https://blog.csdn.net/NooahH/article/details/109739305">NooahH.【Pytorch】利用SSH查看远程服务器上的tensorboard可视化界面. CSDN</a></p>]]></content>
    
    
    <summary type="html">Tensorboard 使用总结</summary>
    
    
    
    <category term="Coding" scheme="https://zonglin-tian.github.io/categories/Coding/"/>
    
    
    <category term="Python" scheme="https://zonglin-tian.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>NumPy notes</title>
    <link href="https://zonglin-tian.github.io/2024/07/31/Numpy-notes/"/>
    <id>https://zonglin-tian.github.io/2024/07/31/Numpy-notes/</id>
    <published>2024-07-31T13:31:06.000Z</published>
    <updated>2024-09-04T01:40:29.801Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://numpy.org/doc/stable/user/whatisnumpy.html">官方英文</a></li><li><a href="https://numpy.org.cn/user/">中文文档</a></li></ul><h1 id="时间节点"><a href="#时间节点" class="headerlink" title="时间节点"></a>时间节点</h1><ul><li>From 2024-07-31 to ?</li></ul><h1 id="NumPy-介绍"><a href="#NumPy-介绍" class="headerlink" title="NumPy 介绍"></a>NumPy 介绍</h1><ul><li>ndarray: N-dimensional array</li></ul><h1 id="快速入门教程"><a href="#快速入门教程" class="headerlink" title="快速入门教程"></a>快速入门教程</h1><ul><li>花式索引与索引技巧部分较难理解</li></ul><h1 id="NumPy-基础知识"><a href="#NumPy-基础知识" class="headerlink" title="NumPy 基础知识"></a>NumPy 基础知识</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><ul><li>np.array: 将 Python 中 array-like 结构的数值转换为 ndarray</li><li>np.zeros&#x2F;np.ones: 创建全 0&#x2F;1 ndarray</li><li>np.arange&#x2F;np.linspace: 创建等间隔分布的 ndarray</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>数组索引返回的是原始数据的副本而不是切片获取的视图</li><li>在程序中处理可变数量的索引<ul><li>Python slice() 函数指定切片</li><li>使用 Elipsis 指定省略号</li></ul></li></ul><h2 id="Brodcasting"><a href="#Brodcasting" class="headerlink" title="Brodcasting"></a>Brodcasting</h2><ul><li>一般广播规则: 从<strong>最后一个轴</strong>的尺寸开始比较, 依次向前<ul><li>尺寸相等</li><li>其中一个是 1, 取大尺寸</li></ul></li></ul><h2 id="结构化数组"><a href="#结构化数组" class="headerlink" title="结构化数组"></a>结构化数组</h2><ul><li>数据类型由一系列命名字段组织的简单数据类型组成, 类似于 C 语言中的<code>结构</code></li></ul>]]></content>
    
    
    <summary type="html">NumPy 学习笔记</summary>
    
    
    
    <category term="Coding" scheme="https://zonglin-tian.github.io/categories/Coding/"/>
    
    
    <category term="Python" scheme="https://zonglin-tian.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>科研技能与资源</title>
    <link href="https://zonglin-tian.github.io/2024/07/27/%E7%A7%91%E7%A0%94%E6%8A%80%E8%83%BD%E4%B8%8E%E8%B5%84%E6%BA%90/"/>
    <id>https://zonglin-tian.github.io/2024/07/27/%E7%A7%91%E7%A0%94%E6%8A%80%E8%83%BD%E4%B8%8E%E8%B5%84%E6%BA%90/</id>
    <published>2024-07-27T02:38:19.000Z</published>
    <updated>2025-03-14T14:29:52.652Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h1><ul><li>如何判断 arXiv 上的文章是否已经发表?<ul><li>通过 PDF 文件内的注释</li><li>通过 arXiv 页面的 “Comments” 提示</li><li>通过 arXiv 页面的 “Submission history” 的说明</li><li>通过 arXiv 页面提供的 DOI, 访问 <a href="https://dx.doi.org/">resolve doi</a>&#x2F;<a href="https://scholar.google.com/">Google Scholar</a>&#x2F;<a href="https://search.crossref.org/">CrossRef</a> 查找</li></ul></li></ul><h1 id="文献阅读与写作"><a href="#文献阅读与写作" class="headerlink" title="文献阅读与写作"></a>文献阅读与写作</h1><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ul><li>每天查看最新文章 (研究进展)</li><li>论文的阅读, 可<strong>参考</strong>知乎&#x2F;CSDN 相关解说文章 (成为一种习惯)<ul><li><a href="https://blog.csdn.net/nav/advanced-technology/paper-reading?utm_source=csdn_ai_ada_blog_reply">CSDN 论文阅读专栏</a></li></ul></li><li>BRDF 模型<ul><li>Physically Based Shading at Disney (2012)</li></ul></li><li>(开创性) 方法原理的文章多读, 并要非常熟悉, 甚至能复现代码<ul><li>NeRF</li><li>NeuS</li><li>TensorRF</li><li>3D Gaussian</li><li>Nvdiffrecmc (渲染过程)<ul><li>Shape, Light, and Material Decomposition from Images using Monte Carlo Rendering and Denoising</li><li>Extracting Triangular 3D Models, Materials, and Lighting From Images</li></ul></li></ul></li><li>写得好的文章多读, 并模仿与写作与表述 (尤其图表, 排版)</li><li>读完论文之后写总结收获 → Blog</li></ul>]]></content>
    
    
    <summary type="html">科研过程中常用到的软件, 网站, 技能方法</summary>
    
    
    
    <category term="Research" scheme="https://zonglin-tian.github.io/categories/Research/"/>
    
    
  </entry>
  
  <entry>
    <title>Computer Graphics 学习资源</title>
    <link href="https://zonglin-tian.github.io/2024/07/12/Computer-Graphics-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    <id>https://zonglin-tian.github.io/2024/07/12/Computer-Graphics-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</id>
    <published>2024-07-12T08:36:45.000Z</published>
    <updated>2025-03-13T14:39:24.941Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="物理渲染"><a href="#物理渲染" class="headerlink" title="物理渲染"></a>物理渲染</h1><h2 id="Physically-Based-Rendering-from-Theory-to-Implementation"><a href="#Physically-Based-Rendering-from-Theory-to-Implementation" class="headerlink" title="Physically Based Rendering from Theory to Implementation"></a>Physically Based Rendering from Theory to Implementation</h2><ul><li>官网: <a href="https://www.pbrt.org/">pbrt.org</a></li><li>在线电子书: <a href="https://pbr-book.org/4ed/contents">目录</a></li></ul><h2 id="物理渲染从理论到实现-第2版"><a href="#物理渲染从理论到实现-第2版" class="headerlink" title="物理渲染从理论到实现 (第2版)"></a>物理渲染从理论到实现 (第2版)</h2><ul><li>李秋霞译, 清华大学出版社, 2016.12</li><li><em>已下载电子书</em></li></ul><h2 id="全局光照技术从离线到实时渲染"><a href="#全局光照技术从离线到实时渲染" class="headerlink" title="全局光照技术从离线到实时渲染"></a>全局光照技术从离线到实时渲染</h2><ul><li>秦春林著, 电子科技大学出版社, 2018.4</li><li><em>已下载电子书</em></li></ul><h1 id="实时渲染"><a href="#实时渲染" class="headerlink" title="实时渲染"></a>实时渲染</h1><h2 id="Real-Time-Rendering-3rd-提炼总结"><a href="#Real-Time-Rendering-3rd-提炼总结" class="headerlink" title="Real-Time Rendering 3rd 提炼总结"></a>Real-Time Rendering 3rd 提炼总结</h2><ul><li>毛星云（浅墨） 著, 2018.3</li><li>CSDN 专栏: <a href="https://blog.csdn.net/poem_qianmo/category_9269285.html">https://blog.csdn.net/poem_qianmo/category_9269285.html</a></li></ul>]]></content>
    
    
    <summary type="html">图形学学习资料整理</summary>
    
    
    
    <category term="Research" scheme="https://zonglin-tian.github.io/categories/Research/"/>
    
    
    <category term="Writing..." scheme="https://zonglin-tian.github.io/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>Windows 那些事儿</title>
    <link href="https://zonglin-tian.github.io/wins/"/>
    <id>https://zonglin-tian.github.io/wins/</id>
    <published>2024-07-06T07:35:37.000Z</published>
    <updated>2025-09-08T12:04:23.750Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="效率提升"><a href="#效率提升" class="headerlink" title="效率提升"></a>效率提升</h1><h2 id="Win-R-运行框"><a href="#Win-R-运行框" class="headerlink" title="Win + R 运行框"></a>Win + R 运行框</h2><p><strong>输入命令后, 按 <code>Ctrl + Shift + Enter</code> 可管理员身份运行</strong></p><p>规律:</p><ul><li><code>.msc</code>: <strong>M</strong>icrosoft <strong>M</strong>anagement <strong>C</strong>onsole (微软管理控制台) 是系统内置的图形化管理工具模块, 通常用于硬件, 服务, 策略等</li><li><code>.cpl</code>: <strong>C</strong>ontrol <strong>P</strong>anel (控制面板项) 是控制面板中的小程序模块, 用于系统设置</li><li>命令所在位置: <code>C:\Windows\System32\</code>, <code>C:\Windows\SysWOW64\</code></li></ul><p><strong>常用:</strong></p><ul><li>sysdm.cpl: 系统属性 (高级设置, 环境变量)</li><li>msconfig: 系统配置</li><li>taskmgr: 任务管理器</li><li>compmgmt: 计算机管理 (整合多个工具)<ul><li>services.msc: 服务管理</li><li>eventvwr.msc: 事件查看器</li><li>taskschd.msc: 任务计划程序</li><li>diskmgmt.msc: 磁盘管理</li><li>devmgmt.msc: 设备管理器 (硬件)</li><li>wf.msc: 防火墙高级设置</li></ul></li><li>control: 控制面板<ul><li><strong>main.cpl: 鼠标属性</strong></li><li>appwiz.cpl: 程序和功能</li><li>ncpa.cpl: 网络连接</li><li>firewall.cpl: 防火墙</li><li>powercfg.cpl: 电源选项</li><li>inetcpl.cpl: 浏览器设置</li></ul></li><li>mstsc: 运程桌面连接</li><li>winver: Windows 版本信息</li><li>dfrgui: 磁盘碎片整理</li><li>cleanmgr: 磁盘清理</li><li>shell:start&#x2F;recent&#x2F;downloads&#x2F;appsfolder: 开启启动&#x2F;最近访问&#x2F;下载&#x2F;所有应用文件夹</li><li>control folders: 文件夹选项</li><li>mspaint: 画图工具</li><li>logoff&#x2F;shutdown &#x2F;l: 注销当前用户并关闭所有程序</li><li>shutdown &#x2F;s &#x2F;t 0[60]: 立即[60 秒后]关机</li><li>shutdown &#x2F;r [&#x2F;f] &#x2F;t 0: [强制]重启</li><li>shutdown &#x2F;h: 休眠</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="Win-组合键"><a href="#Win-组合键" class="headerlink" title="Win 组合键"></a>Win 组合键</h3><ul><li><strong>Win + A: 打开操作中心</strong></li><li>Win + B: 将焦点移动到托盘区域</li><li>Win + S&#x2F;Q: 搜索</li><li>Win + I: 设置</li><li>Win + P: 进行投影</li><li>Win + K: 连接无线显示器</li><li>Win + L: 锁屏</li><li>Win + E: 资源管理器</li><li><strong>Win + D: 显示桌面</strong></li><li>Win + ,: 临时速览桌面</li><li><strong>Win + V: 剪切板</strong></li><li><strong>Win +M: 最小化所有窗口</strong></li><li>Win + Shift + M: 还原桌面上的最小化窗口</li><li>Win + ;&#x2F;.: 打开表情符号面板</li><li>Win + T: 循环浏览任务栏上的应用</li><li>Win + 方向键: 窗口缩放</li><li>Win + X: Win 键菜单</li><li>Win + Pause: 打开 “系统属性” 对话框</li></ul><h3 id="虚拟桌面"><a href="#虚拟桌面" class="headerlink" title="虚拟桌面"></a>虚拟桌面</h3><ul><li><code>Win + Tab</code>: 打开任务视图, 可新建和切换虚拟桌面</li><li><code>Win + Ctrl + D</code>: 创建新的虚拟桌面, 并切换</li><li><code>Win + Ctrl + F4</code>: 删除当前虚拟桌面, 并切换到左侧桌面 (相关窗口会自动转移到左侧桌面)</li><li><code>Win + Ctrl + Left/Right</code>: 切换到相邻左&#x2F;右侧桌面</li></ul><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li><code>F6</code>: 循环浏览窗口或桌面上的屏幕元素</li></ul><h2 id="常用环境变量"><a href="#常用环境变量" class="headerlink" title="常用环境变量"></a>常用环境变量</h2><p>通过 Windows 环境变量可快速访问系统路径或配置信息, 使得在 <code>Win + R</code> 运行窗口和资源管理器地址栏通过 <code>%var_name%</code> 可打开特定<strong>目录</strong> (变量名称不区分大小写)</p><ul><li><code>userprofile</code> or <code>.</code>: 当前用户主目录, <code>C:\Users\user_name</code></li><li><code>appdata</code>: 应用程序数据目录, 常用于软件配置存储,  <code>C:\Users\user_name\AppData\Roaming</code></li><li><code>localappdata</code>: 本地应用程序数据目录, <code>C:\Users\user_name\AppData\Local</code></li><li><code>temp</code>: 临时文件夹路径, 内容呆手动删除, <code>C:\Users\user_name\AppData\Temp</code></li><li><code>programfiles</code>, <code>programfiles(x86)</code>: 64 位, 32 位程序的默认安装目录, <code>C:\Program Files</code>, <code>C:\Program Files (x86)</code></li><li><code>systemroot</code> or <code>windir</code>: Windows 系统目录, <code>C:\Windows</code></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://blog.csdn.net/qq_42402854/article/details/93162387">Charge8. Win10 CMD命令大全与超好用的快捷键[EB&#x2F;OL]</a><br>[2] <a href="https://cheat-sheet.cn/post/windows-10-cheat-sheet/">Windows 10 快捷键速查表</a></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><h3 id="终端命令-schtasks"><a href="#终端命令-schtasks" class="headerlink" title="终端命令 schtasks"></a>终端命令 <code>schtasks</code></h3><ul><li>立即启动计划的任务: <code>schtasks /rum /tn &lt;taskname&gt;</code></li><li>列出计划在计算机上运行的所有任务: <code>schtasks [/query] [/tn &lt;taskname&gt;]</code></li></ul><h3 id="定时删除特定时间前的文件和文件夹-forfiles"><a href="#定时删除特定时间前的文件和文件夹-forfiles" class="headerlink" title="定时删除特定时间前的文件和文件夹 forfiles"></a>定时删除特定时间前的文件和文件夹 <code>forfiles</code></h3><ul><li>(CMD 下) 查看 <code>forfiles</code> 帮助信息: <code>forfiles /?</code></li><li>(CMD 下) 查看 <code>rmdir</code> 和 <code>del</code> 帮助信息: <code>help cmd</code></li><li>创建 <code>.bat</code> 脚本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs commonlisp">@echo off<br>set del_dir=T:\root\Temp\AUTO_DEL <br>set day_ago=3<br><br>:: 删除三天以前的文件<br>ForFiles /p %del_dir% /s /d -%day_ago% /c &quot;cmd /c if @isdir==TRUE (rmdir /q /s @path) else (del /q @path)&quot; 2&gt;nul<br></code></pre></td></tr></table></figure></li><li>创建定时任务, 使用 <code>SYSTEM</code> 帐户执行, <strong>可实现隐藏 cmd 窗口</strong></li></ul><h2 id="SSH-服务"><a href="#SSH-服务" class="headerlink" title="SSH 服务"></a>SSH 服务</h2><ol><li>首先在服务端电脑上安装 SSH 服务器: <code>设置</code> → <code>应用</code> → <code>可选功能</code> → <code>添加可选功能</code> →  <code>OpenSSH 服务器</code></li><li>配置 SSH 服务器, 配置文件: <code>C:\ProgramData\ssh\sshd_config</code> (更多配置参见 <a href="/ssh/#%E9%85%8D%E7%BD%AE-1">SSH 服务端配置</a>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 可用密钥登陆</span><br>PubkeyAuthentication <span class="hljs-built_in">yes</span><br><span class="hljs-comment"># 对于标准用户</span><br>将客户端生成的公钥内容写入 C:\Users\username\.ssh\authorized_keys 文件<br><span class="hljs-comment"># 对于管理用户</span><br>将客户端生成的公钥内容写入 C:\ProgramData\ssh\administrators_authorized_keys 文件<br></code></pre></td></tr></table></figure></li><li>启动 SSH 服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方法一: Win + R 打开运行窗口 → 输入 services.msc (或者直接在 Windows 搜索框输入 services) → 找到 OpenSSH SSH Server, 右键启动或者重新启动</span><br><span class="hljs-comment"># 方法二: 以管理员身份打开 WindowsTerminal, 运行命令 net [re]start sshd 即可启动 SSH 服务 (停止: net stop sshd)</span><br></code></pre></td></tr></table></figure></li><li>在客户端电脑上安装 SSH <strong>客户端</strong>: 过程类似第一步</li><li>在客户端生成私钥和公钥, 并将公钥内容复制到服务端电脑对应文件中, 参见第 2 步</li><li>打开 <code>WindowsTerminal</code>, 使用命令 <code>ssh user@ip_addr</code>, 根据提示使用密码或者密钥登陆</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/schtasks">Windows Sever schtasks 命令</a><br>[2] <a href="https://www.cnblogs.com/widows/p/13328291.html">第八种格调的男人. Windows 配置定时任务 和任务无法执行原因分析. 博客园</a><br>[3] <a href="https://blog.csdn.net/macwhirr123/article/details/105148443">tyasdxx. Windows forfiles命令删除N天前文件&amp;文件夹. CSDN</a><br>[4] <a href="https://blog.csdn.net/qq_39188306/article/details/88689224">IT-Andy. windows执行计划任务 隐藏弹窗cmd命令解决办法. CSDN</a><br>[5] <a href="https://blog.csdn.net/duke_ding2/article/details/135662761?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-3-135662761-blog-90080815.235%5Ev43%5Epc_blog_bottom_relevance_base7&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-3-135662761-blog-90080815.235%5Ev43%5Epc_blog_bottom_relevance_base7&utm_relevant_index=4">蓝黑2020. Windows11开启SSH服务. CSDN</a><br>[6] <a href="https://blog.csdn.net/pariese/article/details/111604340">Mr.亮先生. Windows 10 开启ssh服务. CSDN</a><br>[7] <a href="https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_keymanagement">OpenSSH for Windows 中基于密钥的身份验证. Microsoft.learn</a></p><h1 id="跨电脑文件传输"><a href="#跨电脑文件传输" class="headerlink" title="跨电脑文件传输"></a>跨电脑文件传输</h1><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>师门有一台专门用于开组会的笔记本, 每次开组会或者组会上都要用 U 盘拷贝汇报文件, 感觉不太方便. 早些时候, 我利用 Windows 的 <em>nearby sharing</em> 功能, 每次都要打开&#x2F;关闭, 不仅速度较慢, 而且对传输距离有要求, 最终弃用了. 于是, 想到校园内大家同在一个大的局域网内, 可以利用 <em>Windows FTP</em> 服务. 即将开组会的笔记本作为服务器, 创建一个用户, 小组成员通过该用户向服务器上传文件. </p><h2 id="FTP-服务"><a href="#FTP-服务" class="headerlink" title="FTP 服务"></a>FTP 服务</h2><p><em>2024-06-30 在师门笔记本上配置成功过, 但其中有些问题没有想清楚 (关于防火墙), 最后能成功感觉有点 “玄学”… 所以, 仅将在此过程参考的几个文章标记一下, 方便后期查阅</em></p><ul><li><a href="https://blog.csdn.net/weixin_46081669/article/details/114037504">年轻秃了头. https://blog.csdn.net/weixin_46081669&#x2F;article&#x2F;details&#x2F;114037504. CSDN</a></li><li><a href="Windows%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B"><em>翊墨</em>. https://blog.csdn.net/weixin_46081669&#x2F;article&#x2F;details&#x2F;114037504. CSDN</a></li><li><a href="https://blog.csdn.net/Alex_81D/article/details/135296467">Alex_81D. 超详情的Windows搭建FTP服务器教程-（老奶奶来了也能搭好）.CSDN</a></li></ul><h2 id="服务器-samba"><a href="#服务器-samba" class="headerlink" title="服务器 samba"></a>服务器 samba</h2><h3 id="服务器安装与配置-samba"><a href="#服务器安装与配置-samba" class="headerlink" title="服务器安装与配置 samba"></a>服务器安装与配置 samba</h3><ul><li>安装 <code>samba</code>: <code>sudo apt update &amp;&amp; sudo apt install samba</code></li><li>配置共享目录: <code>sudo vim /etc/samba/smb.conf</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[share_folder_name]<br>   path = /path/to/share<br>   valid <span class="hljs-built_in">users</span> = username<br>   <span class="hljs-built_in">read</span> only = no<br>   <span class="hljs-comment"># browseable = yes</span><br></code></pre></td></tr></table></figure></li><li>设置 samba 用户密码 <code>sudo smbpasswd -a username</code> (username 必须是系统用户)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重置密码</span><br>sudo smbpasswd username<br><span class="hljs-comment"># 删除帐户</span><br>sudo smbpasswd -x username<br><span class="hljs-comment"># 列出所有用户</span><br>sudo pdbedit -L [-v]<br></code></pre></td></tr></table></figure></li><li>重启 samba 服务: <code>sudo systemctl restart smbd</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置语法检查</span><br>testparm [-s]<br><span class="hljs-comment"># 查看状态</span><br>sudo systemctl status smbd<br><span class="hljs-comment"># 开机启动</span><br>sudo systemctl <span class="hljs-built_in">enable</span> smbd<br></code></pre></td></tr></table></figure></li></ul><h3 id="Windows-上-访问-samba-共享"><a href="#Windows-上-访问-samba-共享" class="headerlink" title="Windows 上 访问 samba 共享"></a>Windows 上 访问 samba 共享</h3><ul><li><code>资源管理器</code> → <code>Computer</code> → <code>映射网络驱动器 | 增加一个网络位置</code> → 在<strong>文件夹</strong>输入框填写 <code>\\&lt;hostname&gt;\share_folder_name</code> → 输入配置的 samba 用户名和密码</li></ul><h2 id="客户端-SSHFS"><a href="#客户端-SSHFS" class="headerlink" title="客户端 SSHFS"></a>客户端 SSHFS</h2><ul><li>安装 SSHFS 客户端: <a href="https://github.com/winfsp/winfsp">WinFsp</a> + <a href="https://github.com/winfsp/sshfs-win?tab=readme-ov-file">SSHFS-Win</a></li><li>挂载远程目录: <code>资源管理器</code> → <code>Computer</code> → <code>映射网络驱动器</code> → 在<strong>文件夹</strong>输入框填写 <code>\\sshfs|sshsfs.r\&lt;username&gt;@&lt;host_ip&gt;[!port]\&lt;remote_path&gt;</code></li><li>查看域名的 <strong>ip</strong>: <code>ping/nslookup hostname</code></li></ul><h2 id="客户端网络位置管理"><a href="#客户端网络位置管理" class="headerlink" title="客户端网络位置管理"></a>客户端网络位置管理</h2><ul><li><code>net use</code>: 查看</li><li><code>net use &lt;Remote|map_drive:&gt; /delete</code>: 断开连接&#x2F;挂载 (要在资源管理器中彻底删除图标, 可能要重启资源管理器并结束和 sshfs 有关的任务)</li></ul><h1 id="电脑配置"><a href="#电脑配置" class="headerlink" title="电脑配置"></a>电脑配置</h1><h2 id="Win-10-资源管理器多标签"><a href="#Win-10-资源管理器多标签" class="headerlink" title="Win 10 资源管理器多标签"></a>Win 10 资源管理器多标签</h2><ul><li><a href="https://github.com/indiff/qttabbar">QTTabBar</a></li></ul><h2 id="WindowsTermimal"><a href="#WindowsTermimal" class="headerlink" title="WindowsTermimal"></a>WindowsTermimal</h2><p>快速打开一个 WindowsTerminal 窗口, 并以特定目录为工作目录</p><p><code>右键: 新建快键方式</code> → <code>输入命令: wt.exe -d &quot;path_to_dir&quot;</code> → <code>下一步</code> → <code>命名</code> → <code>完成</code></p><ul><li>移动到一个快速启动的目录 (<code>PATH</code> 变量的一个路径), 可用 <code>Win + R</code> 运行</li><li>可右键属性, 自定义快键方式图标</li></ul><p>关闭输入错误提示声: <code>打开 WindowsTerminal 窗口</code> → <code>设置</code> → <code>Default</code> → <code>Advanced</code> → <code>Bell notification style 取消所有方框</code> → <code>保存</code></p><h2 id="禁用-Win-开头的快捷捷"><a href="#禁用-Win-开头的快捷捷" class="headerlink" title="禁用 Win 开头的快捷捷"></a>禁用 Win 开头的快捷捷</h2><ol><li>打开注册表</li><li>导航到 <code>Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced</code></li><li>右键 <code>Advanced</code>, 新建字符串值 <code>DisabledHotkeys</code></li><li>修改值为对应想禁用的键, 比如禁用 <code>Win + H</code>, 则写入 <code>H</code> 即可</li><li><strong>在任务管理器中重启 Explorer.exe 以生效</strong></li></ol><h2 id="配置锁屏后屏幕关闭时间"><a href="#配置锁屏后屏幕关闭时间" class="headerlink" title="配置锁屏后屏幕关闭时间"></a>配置锁屏后屏幕关闭时间</h2><ol><li>打开注册表编辑器, 导航到 <code>Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power\PowerSettings\7516b95f-f776-4464-8c53-06167f40cc99\8EC4B3A5-6868-48c2-BE75-4F3044BE88A7</code></li><li>将右侧 <code>Atributes</code> 值由 <code>1</code> 改为 <code>2</code></li></ol><p><em>注: 若已修改过, 可直接跳到步骤 <strong>3</strong></em><br>3. 打开控制面权, 依次导航 <code>Hardware and Sound</code> $\rightarrow$ <code>power options</code> $\rightarrow$ <code>change plan settings</code> $\rightarrow$ <code>change advanced power settings</code> $\rightarrow$ <code>Display</code> $\rightarrow$ <code>console lock display off timeout</code>, 然后设置充电和非充电时 (锁屏后) 熄屏时间</p><h2 id="Win-11-使用经典记事本"><a href="#Win-11-使用经典记事本" class="headerlink" title="Win 11 使用经典记事本"></a>Win 11 使用经典记事本</h2><p><strong>修改注册表</strong></p><h2 id="Win-关闭系统图标"><a href="#Win-关闭系统图标" class="headerlink" title="Win 关闭系统图标"></a>Win 关闭系统图标</h2><p><code>控制面板</code> $\rightarrow$ <code>view by Small icons</code> $\rightarrow$ <code>Notification Area Icons</code> $\rightarrow$ <code>Turn system icons on or off</code></p><h2 id="删除-隐藏资源管理器-视频-图片-…"><a href="#删除-隐藏资源管理器-视频-图片-…" class="headerlink" title="删除&#x2F;隐藏资源管理器 视频, 图片, …"></a>删除&#x2F;隐藏资源管理器 视频, 图片, …</h2><p><strong>定位到注册表: <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions</code></strong>, 找到文件夹对应的项, 将 <code>ThisPCPolicy</code> 字符串的值改为 <code>Hide</code></p><h2 id="Win-11-关闭资源管理器左侧的图库按钮"><a href="#Win-11-关闭资源管理器左侧的图库按钮" class="headerlink" title="Win 11 关闭资源管理器左侧的图库按钮"></a>Win 11 关闭资源管理器左侧的图库按钮</h2><p><strong>定位到注册表: <code>HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;E88865EA-0E1C-4E20-9AA6-EDCD0212C87C&#125;</code></strong>, 修改该项下的 <code>System.IsPinnedToNameSpaceTree</code> 值为 <code>0 (隐藏), 1 (显示)</code></p><h2 id="管理-Win-11-开机启动项"><a href="#管理-Win-11-开机启动项" class="headerlink" title="管理 Win 11 开机启动项"></a>管理 Win 11 开机启动项</h2><ul><li>查看自启的应用<ul><li>打开 <code>Windows 设置</code> → 应用 → 启动 (或直接在 <code>搜索框</code> 输入 <code>启动</code></li><li>任务管理器 → 启动</li></ul></li><li>添加自定义启动程序 (<em>上面自启应用的来源</em>)<ul><li>通过特定资源管理器目录将需要启动的软件快捷方式复制到该目录下即可<ol><li>所有用户: <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code> </li><li>特定用户: <code>C:\Users\user_name\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code> 或 <code>Win + R</code> → <code>shell:startup</code></li></ol></li><li>通过注册表添加:<ol><li>所有用户: <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code></li><li>当前用户: <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code></li></ol></li></ul></li></ul><h2 id="资源管理器右键菜单管理"><a href="#资源管理器右键菜单管理" class="headerlink" title="资源管理器右键菜单管理"></a>资源管理器右键菜单管理</h2><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul><li><a href="https://github.com/BluePointLilac/ContextMenuManager">ContextMenuManager</a></li><li><a href="https://blog.csdn.net/KaiKaiaiq/article/details/112347027">RightMenuMGR</a></li></ul><h3 id="Win-11-右键菜单关闭显示更多"><a href="#Win-11-右键菜单关闭显示更多" class="headerlink" title="Win 11 右键菜单关闭显示更多"></a>Win 11 右键菜单关闭<code>显示更多</code></h3><h3 id="右键菜单添加自定义命令"><a href="#右键菜单添加自定义命令" class="headerlink" title="右键菜单添加自定义命令"></a>右键菜单添加自定义命令</h3><ul><li><a href="https://blog.csdn.net/Mrceel/article/details/107459678">参考1</a></li><li><a href="https://blog.csdn.net/weixin_30656145/article/details/97092402#:~:text=%E5%9C%A8Windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E9%A1%B9%201%20%E6%89%93%E5%BC%80%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%8C%E5%B1%95%E5%BC%80%20HKEY_CLASSES_ROOT%20-%3E%20*%20-%3E%20shell,%E6%96%B0%E5%BB%BA%20-%3E%20%E9%A1%B9%20%EF%BC%8C%E8%BE%93%E5%85%A5%E9%A1%B9%E5%90%8D%E7%A7%B0%20Command%20%EF%BC%88%E5%BF%85%E9%A1%BB%E4%B8%BA%E6%AD%A4%E5%90%8D%E7%A7%B0%EF%BC%89%EF%BC%8C%E5%9B%9E%E8%BD%A6%E7%A1%AE%E5%AE%9A%EF%BC%9B%20More%20items">参考2</a></li></ul><h3 id="Win-11-右键菜单新建菜单删除-bmp"><a href="#Win-11-右键菜单新建菜单删除-bmp" class="headerlink" title="Win 11 右键菜单新建菜单删除 .bmp"></a>Win 11 右键菜单新建菜单删除 <code>.bmp</code></h3><ul><li><a href="https://www.cnblogs.com/live41/p/18214635">Clotho. Windows 11删除右键菜单的新建菜单的bmp图像(Bitmap image). 博客园</a></li></ul><h3 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h3><p>[1] <a href="https://blog.csdn.net/smartinzhou/article/details/128038357">smartinzhou. Windows 禁用指定键盘快捷组合键. CSDN</a><br>[2] <a href="https://www.sysgeek.cn/disable-windows-keyboard-shortcut/">Windows如何禁用部分特定或全部键盘快捷键. 系统极客</a><br>[3] <a href="https://jingyan.baidu.com/article/a17d52851297e18099c8f270.html">Win10锁屏之后屏幕自动关闭怎么办. 百度经验</a><br>[4] <a href="https://www.winhelponline.com/blog/restore-old-classic-notepad-windows/">How to Restore Old Classic Notepad in Windows 11</a><br>[<strong>5</strong>] <a href="https://blog.csdn.net/qq_42558430/article/details/106148840"><strong>方冬_肖. Windows 任务计划不运行 &amp;&amp; 任务计划只运行一次 &amp;&amp; 手动运行任务计划正常 &amp;&amp; 任务计划没有按触发器设定自动运行. CSDN</strong></a><br>[6] <a href="http://xiuchufang.com/JC/22116.html">Win 11 系统之家. 关闭Win11右下角图标的方法(不是隐藏)</a><br>[7] <a href="https://blog.csdn.net/xuwenze1991/article/details/87394105">xuwenze1991. Win10 删除&#x2F;隐藏 文件资源管理器 视频、图片、文档、下载、音乐、桌面、3D对象. CSDN</a><br>[8] <a href="https://www.landiannews.com/archives/101273.html">山外的鸭子哥. 修改注册表删除Windows 11资源管理器左侧中的图库按钮. 蓝点网</a><br>[9] <a href="https://blog.csdn.net/qq_43530326/article/details/128142653#:~:text=%E5%A6%82%E6%9E%9C%E8%A6%81%E7%A6%81%E7%94%A8Win11%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%B8%AD%E7%9A%84%E6%98%BE%E7%A4%BA%E6%9B%B4%E5%A4%9A%E9%80%89%E9%A1%B9%EF%BC%8C%E9%82%A3%E4%B9%88%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E5%85%88%E5%B0%9D%E8%AF%95%E6%9B%B4%E6%94%B9%E2%80%9C%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E2%80%9D%E9%80%89%E9%A1%B9%EF%BC%8C%E5%8F%A6%E5%A4%96%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E7%82%B9%E6%98%AF%EF%BC%8C%E6%AD%A4%E6%96%B9%E6%B3%95%E8%BF%98%E4%BC%9A%E5%90%8C%E6%97%B6%E5%B0%86%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E8%BF%98%E5%8E%9F%E5%88%B0%E6%97%A7%E7%9A%84Win10%E6%A0%B7%E5%BC%8F%E3%80%82,%E6%AD%A5%E9%AA%A41%E3%80%81%E6%8C%89Win%2BE%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%8C%E5%8D%95%E5%87%BB%E4%B8%8A%E6%96%B9%E7%9A%84%E2%80%9C%E6%9F%A5%E7%9C%8B%E2%80%9D%E9%80%89%E9%A1%B9%E5%B9%B6%E5%9C%A8%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E4%B8%AD%E7%82%B9%E5%87%BB%E2%80%9C%E9%80%89%E9%A1%B9%E2%80%9D%E6%8C%89%E9%92%AE%E3%80%82">司徒小夜. win11 右键关闭显示更多选项 修改右键菜单. CSDN</a><br>[10] <a href="https://zhuanlan.zhihu.com/p/446430778">泳者. 管理Win10开机启动项. 知乎</a></p><h1 id="TroubleShotting"><a href="#TroubleShotting" class="headerlink" title="TroubleShotting"></a>TroubleShotting</h1><h2 id="System-exception-端口已被占用"><a href="#System-exception-端口已被占用" class="headerlink" title="System exception 端口已被占用"></a>System exception 端口已被占用</h2><p><strong>Step 1:</strong> 打开 cmd<br><strong>Step 2:</strong> 输入 <code>netstat -aon | findstr &quot;1080&quot; </code>查看占用端口 <em>1080</em> 的进程 <strong>PID</strong><br><strong>Step 3:</strong> 输入 <code>tasklist | findstr pid_str</code>  查看 <em>pid_str</em> 所对应的程序<br><strong>Step 4:</strong> 在任务管理器中寻找程序并停用</p><h2 id="Windows-键失灵"><a href="#Windows-键失灵" class="headerlink" title="Windows 键失灵"></a>Windows 键失灵</h2><ul><li>按 <code>Fn + Win</code> 进行切换</li></ul><h2 id="启动-CMD-提示-“The-system-cannot-find-the-path-specified”"><a href="#启动-CMD-提示-“The-system-cannot-find-the-path-specified”" class="headerlink" title="启动 CMD 提示 “The system cannot find the path specified”"></a>启动 CMD 提示 “The system cannot find the path specified”</h2><ul><li>运行 PowerShell 命令, 检查 <code>PATH</code> 环境变量中所有路径是否存在: <code>@($env:path -split &quot;;&quot;).ForEach(&#123; if($_) &#123;$result = &#39;MISSING |&#39;;if(Test-Path -path $_) &#123; $result = &#39;     OK |&#39;&#125;;-join($result, &#39; &#39;, $_); &#125;&#125;)</code></li><li>检查注册表位置 <em><code>Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor</code></em> 和 <code>Computer\HKEY_CURRENT_USER\Software\Microsoft\Command Processor</code> 下的 <strong><code>autorun</code></strong> 中的路径是否正确</li></ul><h2 id="磁盘修复"><a href="#磁盘修复" class="headerlink" title="磁盘修复"></a>磁盘修复</h2><h2 id="资源管理器无法使用预览功能"><a href="#资源管理器无法使用预览功能" class="headerlink" title="资源管理器无法使用预览功能"></a>资源管理器无法使用预览功能</h2><h2 id="Ping-不通-GitHub-com"><a href="#Ping-不通-GitHub-com" class="headerlink" title="Ping 不通 GitHub.com"></a>Ping 不通 GitHub.com</h2><ul><li>以管理员身份运行 <code>cmd</code>, 然后在终端输入 <code>cd C:\Windows\System32\drivers\etc</code> 进入 <code>hosts</code> 文件所在目录</li><li>输入 <code>vim hosts</code> 在文件结尾处添加 (或修改) 下面的几行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Added for GitHub</span><br>140.82.114.3 github.com<br>199.232.69.194 github.global.ssl.fastly.net<br></code></pre></td></tr></table></figure><strong>注:</strong> 对应的 <strong>ip 地址</strong> 可通过 <a href="https://www.ipaddress.com/ip-lookup">IP Lookup</a> 进行查询</li></ul><h2 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://www.technewstoday.com/the-system-cannot-find-the-path-specified/">ABHISHEK SILWAL. 11 Ways to Fix “The System Cannot Find The Path Specified” Error</a><br>[2] <a href="https://www.coder.work/article/7505935">如何修复Windows 10上的 ‘The system cannot find the path specified’ 错误？</a><br>[3] <a href="https://blog.csdn.net/qq_41675812/article/details/114781465">且陶陶º. GitHub.com连接超时问题的解决. CSDN</a><br>[4] <a href="https://www.partitionwizard.com/partitionmagic/the-device-deviceharddisk0dr0-has-a-bad-block.html">Solved: the Device DeviceHarddisk0DR0 has a Bad Block</a><br>[5] <a href="https://www.disktool.cn/content-center/command-prompt-check-disk-6540.html">在Windows中使用磁盘修复命令CHKDSK检查并修复磁盘错误</a><br>[6] <a href="https://blog.csdn.net/Zou_XX/article/details/148345201?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Ctr-1-148345201-blog-135354538.235%5Ev43%5Econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Ctr-1-148345201-blog-135354538.235%5Ev43%5Econtrol&utm_relevant_index=2">真的是小恐龙吗？彻底解决Win11文件资源管理器预览窗格无法预览问题. CSDN</a></p>]]></content>
    
    
    <summary type="html">Windows 探索</summary>
    
    
    
    <category term="Windows" scheme="https://zonglin-tian.github.io/categories/Windows/"/>
    
    
  </entry>
  
  <entry>
    <title>Conda 环境配置</title>
    <link href="https://zonglin-tian.github.io/conda/"/>
    <id>https://zonglin-tian.github.io/conda/</id>
    <published>2024-06-26T00:41:10.000Z</published>
    <updated>2025-10-29T02:38:04.322Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>参考官网<a href="https://www.anaconda.com/docs/getting-started/miniconda/install">指南</a>, <a href="https://repo.anaconda.com/miniconda/">安装文件下载</a></li><li>自定义安装目录: <code>$programs/miniconda3</code></li><li><code>.zshrc</code> 配置中加入语句: <code>source $programs/miniconda3/etc/profile.d/conda.sh</code></li><li><strong>更新</strong>已有 (快速) 安装: <code>bash Miniconda3-verison-Linux-x86_64.sh -b -u -p /path_to_old_dir</code> (<code>b</code> 非交互式安装, <code>u</code> 更新, <code>p</code> 指定安装路径)</li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>统一格式: <code>conda [操作][目标][参数]</code><ul><li>操作: <code>creat/install/update/remove</code></li><li>目标: <code>-n env_name</code>, <code>pkg_name</code></li></ul></li><li>查看版本: <code>conda --version</code></li><li>查看配置信息: <code>conda info</code> 或 <code>conda config --show</code><ul><li>环境保存位置: <code>conda config --show envs_dirs</code></li><li>缓存目录位置: <code>conda config --show pkgs_dirs</code></li><li>包安装频道 (源): <code>conda config --show channels</code></li></ul></li><li>安装包: <code>conda install pkg_name</code><ul><li>以指定 channel 安装包: <code>conda install -c specific_channel pkg_name</code></li><li><strong>强制重新下载包 (不使用缓存): <code>conda install pkg_name --force-reinstall</code></strong></li></ul></li><li>升级包: <code>conda update pkg_name</code><ul><li>更新 conda: <code>conda update conda</code></li></ul></li><li>卸载包: <code>conda uninstall pkg_name</code></li><li>列出已安装包: <code>conda list</code></li><li>搜索包: <code>conda search pkg_name</code></li><li>清理缓存: <code>conda clean --all</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 命令最后加 --dry-run 表示查看可清理数据</span><br><span class="hljs-comment">## 清理包</span><br>conda clean --packages<br><span class="hljs-comment">## 清理临时文件</span><br>conda clean --tarballs<br><span class="hljs-comment">## 清理索引数据</span><br>conda clean --index-cache<br></code></pre></td></tr></table></figure></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="所有-Shell-生效"><a href="#所有-Shell-生效" class="headerlink" title="所有 Shell 生效"></a>所有 Shell 生效</h3><p>更改 (新建) <code>.condarc</code> 文件</p><ul><li>Windows: <code>C:\Users\user_name</code> 下</li><li>Ubuntu: <code>$Home</code> 下</li></ul><h4 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h4><ul><li>删除某项配置: <code>conda config --remove-key key_in_condarc</code></li><li>删除某项配置下的某项: <code>conda config --remove key sub_key</code></li><li>安全追加列表型配置: <code>conda config --add key value</code></li><li>强制指定单值或完全替换列表: <code>conda config --set key value</code></li></ul><h4 id="文件直接写入"><a href="#文件直接写入" class="headerlink" title="文件直接写入"></a>文件直接写入</h4><p>常用配置示例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># basic</span><br><span class="hljs-comment">## 禁用自动激活 base 环境</span><br><span class="hljs-attr">auto_activate_base:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">## 安装包时显示下载频道地址</span><br><span class="hljs-attr">show_channel_urls:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># save</span><br><span class="hljs-comment">## 缓存目录 </span><br><span class="hljs-comment"># pkgs_dirs:</span><br><span class="hljs-comment">#   - /path/to/pkgs_1</span><br><span class="hljs-comment">#   - /path/to/pkgs_2</span><br><span class="hljs-comment"># ## 环境目录</span><br><span class="hljs-comment"># envs_dirs:</span><br><span class="hljs-comment">#   - /path/to/env_1</span><br><span class="hljs-comment">#   - /path/to/env_2</span><br><span class="hljs-comment"># channels</span><br><span class="hljs-comment">## 清华源</span><br><span class="hljs-attr">channels:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="hljs-comment">#  - conda-forge</span><br><span class="hljs-comment">#  - defaults</span><br><span class="hljs-comment">## 频道别名</span><br><span class="hljs-comment"># custom_channels:</span><br><span class="hljs-comment">#   conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="hljs-comment">#   pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="hljs-comment">## 优先级模式</span><br><span class="hljs-comment"># channel_priority: strict</span><br></code></pre></td></tr></table></figure><h3 id="当前-Shell-生效"><a href="#当前-Shell-生效" class="headerlink" title="当前 Shell 生效"></a>当前 Shell 生效</h3><ul><li>ubuntu 定义环境保存位置<ul><li>临时定义: <code>export CONDA_ENVS_DIRS=&quot;/path/to/dir1:/path/to/dir2&quot;</code></li><li>永久定义: 在 <code>.bashrc</code> 或者 <code>.zshrc</code> 中写入 <code>export CONDA_ENVS_DIRS=&quot;/path/to/dir1:/path/to/dir2&quot;</code></li></ul></li><li>ubuntu 定义缓存目录位置, 环境变量为 <code>CONDA_PKGS_DIRS</code>, 操作形式同上</li></ul><h2 id="环境管理与迁移"><a href="#环境管理与迁移" class="headerlink" title="环境管理与迁移"></a><em>环境</em>管理与迁移</h2><ul><li>查看帮助: <code>conda env --help</code></li><li>列出所有环境: <code>conda env list</code></li><li>彻底删除环境: <code>conda remove -n env_name --all</code></li><li>克隆&#x2F;复制环境: <code>conda create -n new_env_name --clone ond_env_name</code></li><li><span style="color:red"><strong>conda</strong> 导出环境配置: <code>conda env export -n env_name -f env.yaml</code> (适用于大多数包用 conda 安装)</span></li><li><span style="color:green"><strong>pip</strong> 导出环境中所有通过 pip 安装的包: <code>pip freeze &gt; requirements.txt</code> (适用于大多数包用 pip 安装)</span></li><li><span style="color:red"><strong>conda</strong> 从配置文件中创建环境: <code>conda env create -f env.yaml [--force]</code></span><ul><li>运行命令前需更改文件 <code>env.yaml</code> 最后一行的 <code>prefix</code> (或直接删除)</li><li>命令同时安装 conda 和 pip 安装过的包, 对于个别 pip 信赖项若提示安装失败, 可删除 <code>env.yaml</code> 的对应行, 重新运行命令, 最后再用 <code>pip install</code> 单独安装</li></ul></li><li><span style="color:red"><strong>conda</strong> 从配置文件中更新环境中的包: <code>conda env update -f env.yaml [-n env_name]</code></span><ul><li>适用于环境已经创建, 需要批量安装&#x2F;更新某些包</li><li><code>--dry-run</code>: 模拟操作, 不实际执行, 用于预览更新内容</li></ul></li><li><span style="color:green"><strong>pip</strong> 从配置文件中安装包: <code>pip install -r requirements.txt</code></span><ul><li>运行命令前需先创建环境 (注意指定 Python 版本) 并激活</li><li>若还有 conda 命令安装的包, 需用 <code>conda install</code> 单独安装</li></ul></li><li><span style="color:yellow">直接复制 <code>envs/env_name</code> 实行环境迁移 (适用于 conda 和 cuda 版本一致)</span></li><li>高效文件迁移命令: <code>scp -r [-q] local_file user@host:/path/to/target</code> 或者 <code>scp -r [-q] user@host:/path/to/copy /path/to/local</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-r:</span> <span class="hljs-string">递归复制整个目录。</span><br><span class="hljs-string">-P</span> <span class="hljs-attr">port:</span> <span class="hljs-string">指定</span> <span class="hljs-string">SSH</span> <span class="hljs-string">连接的端口。</span><br><span class="hljs-string">-i</span> <span class="hljs-attr">identity_file:</span> <span class="hljs-string">指定私钥文件用于身份验证。</span><br><span class="hljs-string">-v:</span> <span class="hljs-string">显示详细的调试信息。</span><br><span class="hljs-string">-q:</span> <span class="hljs-string">禁止显示进度信息和错误信息</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="环境配置文件-yaml"><a href="#环境配置文件-yaml" class="headerlink" title="环境配置文件 (.yaml)"></a>环境配置文件 (.yaml)</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">my_env</span>  <span class="hljs-comment"># 环境名称 (可选, 创建时可被命令行覆盖)</span><br><span class="hljs-attr">channels:</span>  <span class="hljs-comment"># 包下载渠道 (优先级从上到下)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">conda-forge</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">defaults</span><br><span class="hljs-attr">dependencies:</span>  <span class="hljs-comment"># 依赖包列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">python=3.9</span>  <span class="hljs-comment"># 指定 Python 版本</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">numpy=1.21</span>  <span class="hljs-comment"># 指定包版本</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pandas&gt;=1.3</span>  <span class="hljs-comment"># 版本范围约束</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">pip:</span>  <span class="hljs-comment"># 通过pip安装的包 (需缩进)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">torch==1.11.0</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">requests</span><br></code></pre></td></tr></table></figure><h3 id="关键字段"><a href="#关键字段" class="headerlink" title="关键字段"></a>关键字段</h3><ul><li><code>name</code> (可选)<ul><li>指定环境名称, 可通过 <code>conda env create -n env_name</code> 覆盖</li><li>如果省略, 创建环境时需显式指定 <code>-n</code> 参数</li></ul></li><li><code>channels</code> (可选但推荐)<ul><li>定义包的搜索渠道, <strong>优先级按顺序排列</strong></li></ul></li><li><code>dependencies</code> (必需)<ul><li>列出所有依赖包, 支持格式: 精确版本 (<code>包名=版本</code>), 版本约束 (至少 <code>&gt;=</code>, 低于 <code>&lt;</code>, 1.2 系列最新版 <code>1.2.*</code>)</li><li>通过 pip 安装的包: 需嵌套在 <code>- pip:</code> 下</li></ul></li></ul><h3 id="语法注意事项"><a href="#语法注意事项" class="headerlink" title="语法注意事项"></a>语法注意事项</h3><ul><li>注释: <code>#</code></li><li>缩进: 每级使用两个<strong>空格</strong> (且不能使用 <code>Tab</code>)</li><li>续行: 在行尾加 <code>\</code>, 回车后在下一行缩进对齐</li></ul><h2 id="Trouble-shooting"><a href="#Trouble-shooting" class="headerlink" title="Trouble shooting"></a>Trouble shooting</h2><h3 id="imageio"><a href="#imageio" class="headerlink" title="imageio"></a>imageio</h3><blockquote><p>Imageio: ‘libfreeimage-3.16.0-linux64.so’ was not found on your computer; downloading it now. Error while fetching file: &lt;urlopen error timed out&gt;.</p><footer><strong>imageio.plugins.freeimage.download()</strong></footer></blockquote><p>解决办法: </p><ul><li>到 <a href="https://github.com/imageio/imageio-binaries/tree/master">imageio GitHub 库</a> 下载对应的插件</li><li>终端运行 <code>python -c &#39;import imageio; print(imageio.core.util.appdata_dir(&quot;imageio&quot;))&#39;</code> 将得到一个路径, 将下载的插件保存到该路径下对应的子目录中</li></ul><p>参考链接: <a href="https://blog.csdn.net/qq_43778485/article/details/130770654">记得吃早饭a. 使用imageio报错…</a></p><h3 id="GLIBCXX-3-4-29-not-found"><a href="#GLIBCXX-3-4-29-not-found" class="headerlink" title="GLIBCXX_3.4.29 not found"></a>GLIBCXX_3.4.29 not found</h3><ul><li>查看安装的 libstdc++6 版本: <code>sudo find / -name &quot;libstdc++.so.6*&quot; 2&gt; /dev/null</code></li><li>检查支持的 GLIBCXX 版本:<ul><li>系统: <code>strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX</code></li><li>conda: <code>strings $CONDA_PREFIX/lib/libstdc++.so.6 | grep GLIBCXX</code></li></ul></li><li>复制满足要求的 libstdc++6, 并创建软链接或者<strong>降低相关包的版本</strong></li></ul><p>参考链接: <a href="https://blog.csdn.net/weixin_39379635/article/details/129159713">夜溪兮. 如何解决 version GLIBCXX_3.4.29 not found 的问题. CSDN</a></p><h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><p>Python 包管理器, 用于安装和管理不属于 Python 标准库的其它库与依赖</p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><ul><li>配置文件位置<ul><li>Windows: <code>C:\Users\temm\AppData\Roaming\pip.ini</code></li><li>Ubuntu: <code>/public/home/tianzonglin/.config/pip/pip.conf</code></li></ul></li><li>使用清华源<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-comment"># 超时时间</span><br><span class="hljs-attr">timeout</span> = <span class="hljs-number">6000</span><br><span class="hljs-comment"># 使用单一镜像源, 仅在必要时添加 extra-index-url</span><br><span class="hljs-attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple<br><span class="hljs-comment"># 包缓存位置</span><br><span class="hljs-attr">cache-dir</span> = H:\APP_files\pip\cache<br><br><span class="hljs-section">[install]</span><br><span class="hljs-attr">trusted-host</span> = pypi.tuna.tsinghua.edu.cn<br></code></pre></td></tr></table></figure></li><li>终端命令永久配置<ul><li>使用清华源: <code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></li></ul></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><strong>不使用缓存安装 (网络测试): <code>pip install pkg_name --no-cache-dir</code></strong></li><li>查看配置: <code>pip config list</code><ul><li>缓存目录: <code>pip cache dir</code></li></ul></li><li><strong>清理缓存: <code>pip cache purge</code></strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看具体缓存的包</span><br>pip cache list<br><span class="hljs-comment"># 清理特定包</span><br>pip cache remove pkg<br><span class="hljs-comment"># 查看缓存位置和内容 (显示的路径可用于清理 wheel 和 http 缓存)</span><br>pip cache info<br><span class="hljs-comment"># 清理缓存的 wheel 文件 (构建好的包)</span><br>pip cache remove --path /path/to/wheels<br><span class="hljs-comment"># 清理 HTTP 缓存 (下载的原始文件)</span><br>pip cache remove --path /path/to/http<br></code></pre></td></tr></table></figure></li><li>帮助<ul><li>总: <code>pip --help</code></li><li>特定: <code>pip install --help</code></li></ul></li><li>指定镜像加速安装: <code>pip install pkg_name -i source_url</code><ul><li>使用清华源: <code>pip install pkg_name -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li></ul></li><li>升级包: <code>pip install -U/--upgrade pkg_name</code><ul><li>升级 pip: <code>pip install -U pip</code></li></ul></li><li>查看所有已安装的包: <code>pip list [--verbose]</code></li><li><span class="emp-style green">查看某个包的详细 (安装) 信息: <code>pip show pkg_name</code></span></li><li><strong>搜索包: <code>pip search pkg_name</code></strong></li><li><strong>导出和安装信赖</strong><ul><li>导出: <code>pip freeze &gt; requirements.txt</code></li><li>安装: <code>pip install -r requirements.txt</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">conda 与 pip 的使用命令</summary>
    
    
    
    <category term="Others" scheme="https://zonglin-tian.github.io/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>SSH (Secure Shell) 配置与命令</title>
    <link href="https://zonglin-tian.github.io/ssh/"/>
    <id>https://zonglin-tian.github.io/ssh/</id>
    <published>2024-06-26T00:05:37.000Z</published>
    <updated>2025-10-22T02:48:47.993Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><ul><li>测试连通性:<ul><li><code>ping IP</code></li><li><strong><code>telnet IP PORT</code></strong></li></ul></li><li>端口监听: <ul><li>Ubuntu: <code>ss/netstat -tulnp | grep PORT</code></li><li>Windows: <code>netstat -ano | findstr PORT</code></li></ul></li><li>ssh 服务管理 (状态&#x2F;重启&#x2F;启动&#x2F;停止): <ul><li>Ubuntu: <code>sudo systemctl status/restart/start/stop sshd</code></li><li>Windows: <code>Get/Restart/Start/Stop-Service sshd|ssh-agent</code></li></ul></li><li>ssh 服务开机启动:<ul><li>Windows: <code>Set-Service -Name sshd|ssh-agent -StartupType Automatic</code></li></ul></li><li>关闭后台 ssh 隧道 (<code>-Nf</code>):<ol><li>找到进程的 PID: <code>ps aux | grep &quot;ssh ...&quot;</code></li><li>终止进程: <code>kill PID</code></li><li>通过 <code>ss/netstat</code> 验证端口是否释放</li></ol></li></ul><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="密钥配置"><a href="#密钥配置" class="headerlink" title="密钥配置"></a>密钥配置</h2><ul><li>生成密钥: <code>ssh-keygen -t TYPE [-c COMMENTS]</code><ul><li><code>ed25519</code>: 更安全且性能更好</li><li><code>-t rsa -b 4096</code>: 更通用</li></ul></li><li>重置密码短语: <code>ssh-keygen -p -f ~/.ssh/id_rsa[id_ed25519]</code> (<code>id_rsa[id_ed25519]</code> 根据具体情况替换)</li></ul><h2 id="终端登陆"><a href="#终端登陆" class="headerlink" title="终端登陆"></a>终端登陆</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>一般书写顺序</strong><ol><li>连接选项: <span class="emp-style"><code>-i</code>, <code>-p</code>, <code>-J</code>, <code>-L</code></span></li><li>交互选项: <code>-t</code> <code>-T</code></li><li><span class="emp-style"><strong>后台运行 (持久化连接): <code>-Nf</code></strong></span></li><li>目标主机: <code>user@host</code></li><li>远程命令: <code>exec zsh -l</code></li></ol></li><li>常用参数<ul><li>执行命令: <strong>置于最后</strong>, 特殊字符需要转义<ul><li>双引号内: <code>$</code>, <code>`</code>, <code>&quot;</code>, <code>\</code></li><li>单引号内: 单引号自身</li></ul></li><li>特殊: <code>l</code> (用户名), <code>V</code> (版本信息)</li><li>分配终端: <code>t</code> (分配), <code>T</code> (取消), <code>N</code> (不执行命令), <code>f</code> (后台执行)</li><li>显示与输出: <code>q</code> (安静), <code>v or vv</code> (详细 or 调试), <code>G</code> (配置解析)</li><li>配置: <code>-o &quot;key=value&quot;</code>, 临时覆盖 <a href="#%E9%85%8D%E7%BD%AE"><code>config</code></a> 中的参数<ul><li>当值中含有特殊字符时, 使用 <code>\</code> 转义或者单引号嵌套</li><li>可多个 <code>-o</code> 分开书写组合</li><li><code>-F</code> (临时配置文件)</li></ul></li><li><strong>跳转机与端口转发: <code>J</code> (跳转机), <code>W</code> (透明转发), <code>L</code> (本地转发), <code>R</code> (远程转发), <code>D</code> (建立 socks5 代理)</strong></li></ul></li></ul><h3 id="特定命令"><a href="#特定命令" class="headerlink" title="特定命令"></a>特定命令</h3><ul><li>登陆到远程主机: <code>ssh user@remote_host_ipORdomain</code></li><li>登陆时指定 <code>bash</code> 配置文件: <code>ssh -t user@remote_host &#39;bash --rcfile /path/to/custom_.bashrc</code></li><li>登陆时指定 <code>zsh</code> 配置文件: <code>ssh -t use@remote_host &#39;exec -l -c &quot;source /path/to/custom_.zshrc; zsh&quot;&#39;</code></li><li><strong>后台建立本地端口转发 (最小开销): <code>ssh -f -N -L 2222:localhost:22 user@host-name</code></strong></li><li><span class="emp-style green">通过跳板机登陆 docker 容器: <code>ssh -J jump-host target_user@target_ip</code></span></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>若没有特殊说明表示在 <code>~/.ssh/config</code> 文件中添加内容</li><li><strong><code>ssh -G user@ip</code>: 显示生效的连接配置 (经过 <code>config</code> 与命令行选项合并后), 但不实际建立连接</strong></li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><code>Host</code> 支持 <code>*</code> 通配符 </li><li>内置变量<ul><li><code>%h</code>: 目标主机 HostName</li><li><code>%n</code>: “原始” 主机 (Host)</li><li><code>%r</code>: 目标主机 User</li><li><code>%p</code>: 目标主机 Port</li></ul></li></ul><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><span class="emp-style blue"><code>config</code> 中的参数与在终端登陆的参数基本是相对应的, <code>config</code> 中是全局定义, 终端登陆是临时, 优先级高于 <code>config</code>, 并可以通过 <code>-o &quot;key=value&quot;</code> 临时替换</span></p><ul><li><code>RemoteCommand</code>: 连接时执行的命令, 对应终端登陆命令的最后部分 (如果有的话)</li><li><code>ProxyCommand</code>: 代理命令, 可结合<a href="#%E8%B7%B3%E6%9D%BF%E6%9C%BA">跳板机</a>实现单次 SSH 连接, 隐藏跳板步骤</li><li><code>RequestTTY</code>: [yes&#x2F;no], 强制分配终端, 与 <code>t|T</code> 对应 </li><li><code>StrictHostKeyChecking</code>: [yes&#x2F;no], 是否严格检查远程主机的公钥</li><li><code>ProxyJump</code>: <a href="#%E8%B7%B3%E6%9D%BF%E6%9C%BA">跳板机</a></li><li><code>LogLevel</code>: [QUIET&#x2F;VERBOSE&#x2F;DEBUG], 日志级别, 与 <code>q/v/vv</code> 对应</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host custom_host_name  <span class="hljs-comment"># 别名</span><br>    HostName host_ip_or_dormain  <span class="hljs-comment"># 主机 IP 或者域名</span><br>    User username  <span class="hljs-comment"># 用户名</span><br>    Port port  <span class="hljs-comment"># 默认 22</span><br>    PreferredAuthentications publickey  <span class="hljs-comment"># 优先使用公钥认证</span><br>    IdentityFile ~/.ssh/id_rsa  <span class="hljs-comment"># 私钥文件路径</span><br>    RemoteCommand bash --rcfile /path/to/custom_bashrc  <span class="hljs-comment"># 登陆时执行命令</span><br>    ProxyJump jump-host  <span class="hljs-comment"># 跳板机</span><br>    ProxyCommand ssh -q jump-host <span class="hljs-string">&quot;ip=<span class="hljs-subst">$(~/Temp/read_ip.sh %n | tr -d &#x27;\n&#x27;)</span>; ssh -W <span class="hljs-variable">$ip</span>:22 localhost&quot;</span>  <span class="hljs-comment"># 仍然跳板机</span><br><br>Host jump-host<br>...<br><br></code></pre></td></tr></table></figure><h2 id="跳板机"><a href="#跳板机" class="headerlink" title="跳板机"></a>跳板机</h2><p>基本目标: 本地电脑通过跳板机 (Bastion Host) 连接 “外网” 电脑<br><strong>注:</strong> 下文所有标识 <code>jump-host</code> 表示跳板机, 若没有在 <code>~/.ssh/config</code> 中定义, 需要显示指定 <code>jump-host</code> 的连接方式, 通常包括用户名, 主机名&#x2F;ip, 端口, 密钥文件</p><ul><li><code>-J</code> or <code>ProxyJump</code> 选项: <code>ssh -J jump-host target_user@target_ip</code></li><li><code>-W</code> + <code>ProxyCommand</code> 组合: <code>ssh -o &quot;ProxyCommand=ssh -W %h:%p jump-host&quot; target_user@target_ip</code></li></ul><p><span class="emp-style green">应用: 通过跳板机动态透明转发, 连接容器</span></p><ul><li>配置与命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/.ssh/config</span><br>Host *-container<br>    User user<br>    ProxyCommand ssh -W $(ssh jump-host <span class="hljs-string">&quot;~/get_ip.sh %n&quot;</span>):%p jump-host<br><span class="hljs-comment"># 终端输入</span><br>ssh test-container<br></code></pre></td></tr></table></figure></li><li>连接步骤<ol><li>解析 <code>test-container</code>, 触发 <code>ProxyCommand</code></li><li>跳板机执行 <code>get_ip.sh</code> 获取容器 IP (如 172.17.0.2)</li><li><code>-W 172.17.0.2:22</code> 建立隧道</li><li>本地 SSH 客户端通过隧道连接容器。</li></ol></li></ul><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>基本目标: 通过端口映射, 本地电脑可以访问 “外网” 电脑 (服务), <span class="emp-style">常接 <code>-Nf</code> (在后台运行)</span></p><ul><li><p><code>-L</code> (访问远程特定服务): 本地端口转发到远程主机, 从而通过本地工具 (浏览器) 访问本地端口访问远程主机的服务, 命令格式 <span class="emp-style red"><code>ssh -L local_port:target_host:target_port jump-host</code></span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在本地电脑上操作</span><br>ssh -L 2222:target-host:22 jump-host<br>ssh -p 2222 target_user@localhost<br></code></pre></td></tr></table></figure></li><li><p><code>-R</code> (从外部访问本地服务): 远程主机端口转发到本地, 从而在远程主机的端口访问本地电脑的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在外网电脑上操作</span><br>ssh -R [*:]2222:localhost:22 local_user@local_ip<br><span class="hljs-comment"># 在本地电脑上操作</span><br>ssh -p 2222 target_user@localhost<br></code></pre></td></tr></table></figure></li><li><p><code>-W</code>: <strong>只建立隧道, 不涉及端口, 通常配合 <code>PorxyCommad</code> 命令</strong> (参见前述<a href="#%E8%B7%B3%E6%9D%BF%E6%9C%BA"><em>跳板机</em></a>)</p></li><li><p><code>-D</code> (全局代理): 动态端口转发 (SOCKS 代理), 在本地端口启动 SOCKS5 代理 (<code>127.0.0.1:port</code>), 使用该代理后, 访问任何地址都会通过 SSH 隧道转发到远程服务器进行访问, 通常用于<span class="emp-style red">科学上网</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在需要科学上网电脑上操作</span><br>ssh -D 20170 local_user@local_ip<br><span class="hljs-comment"># 终端使用代理访问外网</span><br>curl --socks5 127.0.0.1:20170 https://www.google.com<br><span class="hljs-comment"># 或者设置全局代理</span><br><span class="hljs-built_in">export</span> all_proxy=socks5://127.0.0.1:20170<br></code></pre></td></tr></table></figure></li></ul><h2 id="密钥管理-SSH-Agent-身份验证代理"><a href="#密钥管理-SSH-Agent-身份验证代理" class="headerlink" title="密钥管理 SSH-Agent (身份验证代理)"></a>密钥管理 SSH-Agent (身份验证代理)</h2><p>安全便利的管理 SSH 密钥: 私钥存储在内存中而不是在文件系统中; 登陆时自动提供身份验证, 无需每次都输入密钥的短语</p><ul><li>启动&#x2F;停止<ul><li>自动启动: <code>Set-Service -Name ssh-agent -StartupType Automatic</code></li><li>启动: <code>Start-Service ssh-agent</code></li><li>停止: <code>Stop-Service ssh-agent</code></li><li>查看状态: <code>Get-Service ssh-agent</code></li></ul></li><li>添加密钥: <code>ssh-add ~/.ssh/id_rsa</code></li><li>查看已添加密钥: <code>ssh-add -l</code></li><li>删除<ul><li>指定密钥: <code>ssh-add -d ~/.ssh/id_rsa</code></li><li>所有密钥: <code>ssh-add -D</code></li></ul></li></ul><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>若没有特殊说明表示在 <strong>sshd_config</strong> 中更新内容</p><ul><li>Windows: <code>C:\ProgramData\ssh\sshd_config</code></li><li>Ubuntu: <code>/etc/ssh/sshd_config</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许流量转发, 如 ssh -D</span><br>AllowTcpForwarding <span class="hljs-built_in">yes</span><br><span class="hljs-comment"># 运程转发 (ssh -R) 时, 监听所有接口 (0.0.0.0)</span><br>GatewayPorts <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SSH 常用命令与配置</summary>
    
    
    
    <category term="Others" scheme="https://zonglin-tian.github.io/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>LaTeX 常用命令</title>
    <link href="https://zonglin-tian.github.io/latex/"/>
    <id>https://zonglin-tian.github.io/latex/</id>
    <published>2024-06-11T05:31:25.000Z</published>
    <updated>2025-10-22T07:40:57.053Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h1><h2 id="高亮与颜色"><a href="#高亮与颜色" class="headerlink" title="高亮与颜色"></a>高亮与颜色</h2><p><strong>使用宏包: xcolor</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-params">#</span> 颜色<br><span class="hljs-keyword">\textcolor</span>&#123;red&#125;&#123;colored<span class="hljs-built_in">_</span>text&#125;<br><span class="hljs-keyword">\textcolor</span>&#123;gray&#125;&#123;colored<span class="hljs-built_in">_</span>text&#125;<br><span class="hljs-keyword">\color</span>&#123;blue&#125; colored<span class="hljs-built_in">_</span>text<br><br><span class="hljs-params">#</span> 高亮<br><span class="hljs-keyword">\colorbox</span>&#123;green&#125;&#123;<span class="hljs-keyword">\color</span>&#123;<span class="hljs-keyword">\black</span>&#125; black text with green background&#125;<br><span class="hljs-keyword">\fcolorbox</span>&#123;red&#125;&#123;yellow&#125;&#123;yellow background with red frame&#125;<br></code></pre></td></tr></table></figure><h2 id="数学字体加粗"><a href="#数学字体加粗" class="headerlink" title="数学字体加粗"></a>数学字体加粗</h2><ul><li><code>\textbf</code>: 文本环境加粗, 没有斜体且无法对希腊字母加粗</li><li><code>\mathbf</code>: 效果同 <code>\textbf</code></li><li><code>\boldmath</code>: 加粗且有斜体效果, 依赖 <em>amsmath</em> 宏包</li><li><code>\boldsymbol</code>: 加粗有斜体效果, 并对希腊字母有效, 依赖 <em>amsmath</em> 宏包</li></ul><p><strong>在数学环境中, 推荐使用 宏包 bm 的 <code>\bm</code> 命令</strong> . 对于 <em>xelatex</em> 的情形, 若 <code>\bm</code> 报错, 尝试:</p><ul><li><code>\symbfit</code>: 加粗与斜体</li><li><code>\symbf</code>: 加粗无斜体</li><li><code>\mathbfcal</code>: 加粗的 <code>\mathcal</code> 字体</li></ul><h2 id="特殊字体"><a href="#特殊字体" class="headerlink" title="特殊字体"></a>特殊字体</h2><ul><li>花体: <code>\mathcal&#123;大写字母&#125;</code></li><li>黑板粗体 (数集表示): <code>\mathbb&#123;大写字母&#125;</code></li></ul><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><ul><li><code>\boxed</code></li></ul><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><h2 id="基本符号"><a href="#基本符号" class="headerlink" title="基本符号"></a>基本符号</h2><ul><li>乘号 $\times$: <code>\times</code></li><li>星号 $\ast$: <code>\ast</code></li><li>点乘 $\cdot$: <code>\cdot</code></li><li>带圆圈的点运算 $\odot$: <code>\odot</code></li><li>约等于 $\approx$: <code>\approx</code></li><li>梯度 $\nabla$: <code>\nabla</code></li><li>箭头: 双向 <code>\leftrightarrow</code></li><li>函数映射 $\mapsto$: <code>\mapsto</code></li><li>向下取整 $\lfloor x \rfloor$: <code>\lfloor \rfloor</code></li><li>向上取整 $\lceil x \rceil$: <code>\lceil \rceil</code></li><li>连乘 $\prod$: <code>\prod</code></li><li>积分 $\int$: <code>\int</code> </li><li>范数: $\Vert x \Vert$: <code>\Vert \Vert</code></li><li>变量上加一横:<ul><li>单个字母 $\bar{x}$: <code>\bar&#123;x&#125;</code></li><li>多个字母 $\overline{xyz}$: <code>\overline&#123;xyz&#125;</code></li></ul></li></ul><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><ul><li>$\tau$: <code>\tau</code></li></ul><h2 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br>    sgn<span class="hljs-keyword">\left</span>(x<span class="hljs-keyword">\right</span>)=<span class="hljs-keyword">\left</span><span class="hljs-keyword">\&#123;</span><br>        <span class="hljs-keyword">\begin</span>&#123;array&#125;&#123;ll&#125;  <span class="hljs-comment">% 每一列均左对齐</span><br>            1, <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\quad</span> x&gt;0 <span class="hljs-keyword">\\</span><br>            0, <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\quad</span> x=0 <span class="hljs-keyword">\\</span><br>            -1, <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\quad</span> x&lt;0 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\end</span>&#123;array&#125;<br>    <span class="hljs-keyword">\right</span>.<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br></code></pre></td></tr></table></figure><h2 id="调整公式字体大小"><a href="#调整公式字体大小" class="headerlink" title="调整公式字体大小"></a>调整公式字体大小</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;small&#125;<br><span class="hljs-comment">% normalsize &gt; large &gt; Large &gt; huge &gt; Huge &gt; small &gt; footnotesize &gt; scriptsize &gt; tiny</span><br><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br>...<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br><span class="hljs-keyword">\end</span>&#123;small&#125;<br></code></pre></td></tr></table></figure><h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><ul><li>自定义括号大小: <code>\big, \Big, \bigg, \Bigg</code></li></ul><h1 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h1><ul><li><em>et al.</em><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\DeclareRobustCommand</span>&#123;<span class="hljs-keyword">\etal</span>&#125;&#123;<span class="hljs-keyword">\textit</span>&#123;et al.&#125;&#125;<br></code></pre></td></tr></table></figure></li><li>图片以 Fig. 为引用前缀<figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\figref</span>&#125;[1]&#123;Fig.~<span class="hljs-keyword">\ref</span>&#123;<span class="hljs-params">#1</span>&#125;&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>TexLive</li></ul><h2 id="将-pdf-文件转换为-eps-文件"><a href="#将-pdf-文件转换为-eps-文件" class="headerlink" title="将 .pdf 文件转换为 .eps 文件"></a>将 <code>.pdf</code> 文件转换为 <code>.eps</code> 文件</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">pdftops -eps source.pdf target.eps<br><span class="hljs-comment">% .bat 文件批量转换</span><br><br></code></pre></td></tr></table></figure><h2 id="将-pdf-文件转换为图片"><a href="#将-pdf-文件转换为图片" class="headerlink" title="将 .pdf 文件转换为图片"></a>将 <code>.pdf</code> 文件转换为图片</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">pdftocairo -png -f start<span class="hljs-built_in">_</span>num -l end<span class="hljs-built_in">_</span>num file.pdf<br></code></pre></td></tr></table></figure><h1 id="Excel-转-LaTex"><a href="#Excel-转-LaTex" class="headerlink" title="Excel 转 LaTex"></a>Excel 转 LaTex</h1><ul><li>Excel 安装 <a href="https://ctan.org/tex-archive/support/excel2latex/"><code>Excel2LaTex</code> 插件</a></li><li><a href="https://tableconvert.com/latex-generator"><code>TableConvert</code> 在线转换</a></li><li><a href="https://www.tablesgenerator.com/"><code>Tables Generator</code> 在线生成</a></li></ul><h1 id="changes-宏包添加批注"><a href="#changes-宏包添加批注" class="headerlink" title="changes 宏包添加批注"></a>changes 宏包添加批注</h1><ul><li>导言区引用: <code>\usepackage&#123;changes&#125;</code>, 可选参数<ul><li>commandnameprefix&#x3D;ifneeded</li><li>defaultcolor&#x3D;orange</li><li>authormarkup&#x3D;name</li><li><strong>final: 编译时不显示批注</strong></li></ul></li><li>定义作者: <code>\definechangesauthor[name=&#123;&#125;, corlor=]&#123;author_id&#125;</code></li><li>列出所有修订: <code>\listofchanges</code></li><li>正文批注<ul><li>新增内容: <code>\added[id=, comment=&#123;&#125;]&#123;&#125;</code></li><li>替换内容: <code>\replaced[id=, comment=&#123;&#125;]&#123;new_texts&#125;&#123;old_texts&#125;</code></li><li>高亮内容: <code>\highlight[id=, comment=&#123;&#125;]&#123;&#125;</code></li><li>批注: <code>\comment&#123;comment_text&#125;</code></li></ul></li></ul><h1 id="期刊模板"><a href="#期刊模板" class="headerlink" title="期刊模板"></a>期刊模板</h1><h2 id="Elsevier"><a href="#Elsevier" class="headerlink" title="Elsevier"></a>Elsevier</h2><ul><li><a href="https://blog.csdn.net/qq_31347869/article/details/128161240">不吃饭就会放大招. Elsevier（爱思唯尔）LaTex 模板详细说明. CSDN</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://blog.csdn.net/subtitle_/article/details/129392994">小林up. LaTex使用技巧15：LaTex命令行转换pdf和eps. CSDN</a></li><li><a href="https://blog.csdn.net/jeryjeryjery/article/details/88970357">liuwei1206. Texlive中jpg和pdf转成eps. CSDN</a></li><li><a href="https://pencilq.com/64/">小铅笔 &amp; Jeff. 通过LaTeX发行版直接转换和查看EPS. CSDN</a></li><li><a href="https://www.zhihu.com/question/307970489/answer/2305355098">严二姨. 有什么好用的 LaTeX 表格自动生成工具？知乎</a></li></ul>]]></content>
    
    
    <summary type="html">LaTex Notes</summary>
    
    
    
    <category term="Others" scheme="https://zonglin-tian.github.io/categories/Others/"/>
    
    
    <category term="Typesetting" scheme="https://zonglin-tian.github.io/tags/Typesetting/"/>
    
  </entry>
  
  <entry>
    <title>Visio 学习积累</title>
    <link href="https://zonglin-tian.github.io/2024/06/11/Visio-%E5%AD%A6%E4%B9%A0%E7%A7%AF%E7%B4%AF/"/>
    <id>https://zonglin-tian.github.io/2024/06/11/Visio-%E5%AD%A6%E4%B9%A0%E7%A7%AF%E7%B4%AF/</id>
    <published>2024-06-11T01:49:08.000Z</published>
    <updated>2024-07-27T08:12:23.219Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件转-pdf"><a href="#文件转-pdf" class="headerlink" title="文件转 .pdf"></a>文件转 .pdf</h1><ul><li>去除多余的白边 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[强殖装甲凯普. 最简单Visio导出无边框无白边pdf. CSDN](https://blog.csdn.net/qq_38163755/article/details/111690961)">[1]</span></a></sup><ul><li>设计 → 大小 → 适应绘图</li><li>按住 <code>Ctrl</code> → 使用鼠标拖动画布边缘调整画布大小</li></ul></li><li>去除黑边<ul><li>在导出 pdf 时, 点击 <code>选项</code> → 取消勾选 <code>辅助功能文档结构标记</code></li></ul></li></ul><h1 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h1><ul><li>直接复制粘贴: <code>Ctrl + D</code></li><li>常规复制粘贴: <code>Ctrl + C</code> → <code>Ctrl + V</code> (默认在原对象右下角粘贴; 若粘贴前在任意位置点击, 则在点击位置粘贴)</li><li>拖动复制: <code>按住 Ctrl 键</code>, 鼠标左键拖动复制 (若同时按住 <code>Shift</code> 键, 则进行水平或者垂直对齐的复制)</li><li>等距复制: 复制一次之后, 每按一次 <code>F4</code>, 则等距复制一次</li></ul><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><ul><li>微小移动: 选中形状之后, 先按住 <code>Shift</code>, 再按方向键进行移动</li></ul><h1 id="形状改变"><a href="#形状改变" class="headerlink" title="形状改变"></a>形状改变</h1><ul><li>[非]等比例改变: 按住 <code>Shift</code>, 再拖动控制点</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/qq_38163755/article/details/111690961">强殖装甲凯普. 最简单Visio导出无边框无白边pdf. CSDN</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">Microsoft Visio 学习积累</summary>
    
    
    
    <category term="Software" scheme="https://zonglin-tian.github.io/categories/Software/"/>
    
    
  </entry>
  
</feed>
